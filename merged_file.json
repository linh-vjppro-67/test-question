[
    {
        "id": "1",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following React component and identify the syntax issue:\n```jsx\nimport React from 'react';\n\nfunction MyComponent() {\n  return (\n    <div class=\"container\">\n      <h1>Welcome to React!</h1>\n    </div>\n  );\n}\n\nexport default MyComponent;\n```",
        "options": [
            {
                "description": "Replace the attribute 'class' with 'className'.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the import of React.",
                "isAnswerKey": false
            },
            {
                "description": "Eliminate the closing div tag.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the export statement.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "2",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following arrow function component and determine the error:\n```jsx\nimport React from 'react';\n\nconst Header = () => {\n  <h1>Hello World</h1>\n};\n\nexport default Header;\n```\nWhat is the problem with this component?",
        "options": [
            {
                "description": "It does not return any JSX because the return statement is missing.",
                "isAnswerKey": true
            },
            {
                "description": "The component must be defined using a function declaration.",
                "isAnswerKey": false
            },
            {
                "description": "The JSX should be wrapped in a React fragment.",
                "isAnswerKey": false
            },
            {
                "description": "It requires the use of React.createElement instead.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "3",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following component. What is the error present in handling props?\n```jsx\nimport React from 'react';\n\nfunction Greeting(props) {\n  return (\n    <div>\n      <p>Hello, {prop.name}</p>\n    </div>\n  );\n}\n\nexport default Greeting;\n```",
        "options": [
            {
                "description": "The code incorrectly refers to 'prop' instead of 'props'.",
                "isAnswerKey": true
            },
            {
                "description": "There is no return statement in the component.",
                "isAnswerKey": false
            },
            {
                "description": "The component should use a class-based syntax.",
                "isAnswerKey": false
            },
            {
                "description": "The 'name' property should be passed as a string literal.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "4",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Identify the error in the following component related to JSX element syntax:\n```jsx\nimport React from 'react';\n\nfunction ImageComponent() {\n  return (\n    <div>\n      <img src=\"logo.png\">\n    </div>\n  );\n}\n\nexport default ImageComponent;\n```",
        "options": [
            {
                "description": "The <img> tag is not self-closed; it should be written as <img src=\"logo.png\" />.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the wrapping div element.",
                "isAnswerKey": false
            },
            {
                "description": "Import a CSS file for the image.",
                "isAnswerKey": false
            },
            {
                "description": "Add an alt attribute to the <img> tag.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "5",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following Button component. What is the problem with the event attribute?\n```jsx\nimport React from 'react';\n\nfunction Button() {\n  return (\n    <button onclick=\"handleClick()\">Click me</button>\n  );\n}\n\nexport default Button;\n```",
        "options": [
            {
                "description": "Change 'onclick' to 'onClick' and pass the function reference instead of a string.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the onclick attribute entirely.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the function in an arrow function.",
                "isAnswerKey": false
            },
            {
                "description": "Add a semicolon after the function call.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "6",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following component that filters even numbers:\n```jsx\nimport React from 'react';\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) => {\n    if (number % 2 === 0) {\n      return <li key={number}>{number}</li>;\n    } else {\n      return;\n    }\n  });\n  return <ul>{listItems}</ul>;\n}\n\nexport default NumberList;\n```\nWhat will be rendered when the prop numbers is [1, 2, 3, 4]?",
        "options": [
            {
                "description": "An unordered list with list items displaying '2' and '4'.",
                "isAnswerKey": true
            },
            {
                "description": "An unordered list displaying all numbers.",
                "isAnswerKey": false
            },
            {
                "description": "An empty unordered list.",
                "isAnswerKey": false
            },
            {
                "description": "A runtime error due to returning undefined for odd numbers.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "7",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following conditional rendering in the Message component:\n```jsx\nimport React from 'react';\n\nfunction Message({ isLoggedIn }) {\n  return (\n    <div>\n      {isLoggedIn ? <p>Welcome back!</p> : <p>Please sign in.</p>}\n    </div>\n  );\n}\n\nexport default Message;\n```\nWhat will be rendered when the prop isLoggedIn is false?",
        "options": [
            {
                "description": "<p>Please sign in.</p>",
                "isAnswerKey": true
            },
            {
                "description": "<p>Welcome back!</p>",
                "isAnswerKey": false
            },
            {
                "description": "An empty div.",
                "isAnswerKey": false
            },
            {
                "description": "A runtime error.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "8",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What will be displayed by the Sum component given the following code?\n```jsx\nimport React from 'react';\n\nfunction Sum({ numbers }) {\n  let total = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    total += numbers[i];\n  }\n  return <div>Total: {total}</div>;\n}\n\nexport default Sum;\n```\nIf the numbers prop is [1, 2, 3].",
        "options": [
            {
                "description": "Total: 6",
                "isAnswerKey": true
            },
            {
                "description": "Total: 0",
                "isAnswerKey": false
            },
            {
                "description": "Total: 123",
                "isAnswerKey": false
            },
            {
                "description": "Total: undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "9",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following EvenNumbers component:\n```jsx\nimport React from 'react';\n\nfunction EvenNumbers({ numbers }) {\n  const even = [];\n  for (let num of numbers) {\n    if (num % 2 === 0) {\n      even.push(num);\n    }\n  }\n  return (\n    <ul>\n      {even.map((num, index) => <li key={index}>{num}</li>)}\n    </ul>\n  );\n}\n\nexport default EvenNumbers;\n```\nWhat does this component render when passed numbers = [2, 5, 8, 11]?",
        "options": [
            {
                "description": "An unordered list with list items '2' and '8'.",
                "isAnswerKey": true
            },
            {
                "description": "An unordered list with all numbers displayed.",
                "isAnswerKey": false
            },
            {
                "description": "An empty unordered list.",
                "isAnswerKey": false
            },
            {
                "description": "A runtime error occurs.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "10",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Inspect the following ListDisplay component:\n```jsx\nimport React from 'react';\n\nfunction ListDisplay({ items }) {\n  if (!items.length) {\n    return <p>No items to display.</p>;\n  }\n  return (\n    <ul>\n      {items.map((item, idx) => <li key={idx}>{item}</li>)}\n    </ul>\n  );\n}\n\nexport default ListDisplay;\n```\nWhat is the purpose of the if condition in this component?",
        "options": [
            {
                "description": "It checks if the items array is empty and displays a fallback message.",
                "isAnswerKey": true
            },
            {
                "description": "It verifies that the items array contains more than one item.",
                "isAnswerKey": false
            },
            {
                "description": "It causes a runtime error when items are present.",
                "isAnswerKey": false
            },
            {
                "description": "It converts items to an array of numbers.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "11",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the output of the following function when called with transformNumbers([3, 6, 9])?\n```jsx\nimport React from 'react';\n\nfunction transformNumbers(numbers) {\n  return numbers.filter(num => num > 5).map(num => num * 2);\n}\n```",
        "options": [
            {
                "description": "[12, 18]",
                "isAnswerKey": true
            },
            {
                "description": "[3, 6, 9]",
                "isAnswerKey": false
            },
            {
                "description": "[9, 12]",
                "isAnswerKey": false
            },
            {
                "description": "[6, 9]",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "12",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following recursive function:\n```jsx\nfunction factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n```\nWhat is the result of factorial(4)?",
        "options": [
            {
                "description": "24",
                "isAnswerKey": true
            },
            {
                "description": "12",
                "isAnswerKey": false
            },
            {
                "description": "4",
                "isAnswerKey": false
            },
            {
                "description": "1",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "13",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following component, what will be rendered if the user prop is { name: 'Alice', age: 30 }?\n```jsx\nimport React from 'react';\n\nfunction UserInfo({ user }) {\n  const { name, age } = user;\n  return <div>{name} is {age} years old.</div>;\n}\n\nexport default UserInfo;\n```",
        "options": [
            {
                "description": "Alice is 30 years old.",
                "isAnswerKey": true
            },
            {
                "description": "undefined is undefined years old.",
                "isAnswerKey": false
            },
            {
                "description": "Alice is undefined years old.",
                "isAnswerKey": false
            },
            {
                "description": "A destructuring error occurs.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "14",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What will be the output of the following function?\n```jsx\nfunction sumArray(arr) {\n  return arr.reduce((acc, curr) => acc + curr, 0);\n}\n```\nCalculate sumArray([1, 2, 3, 4]).",
        "options": [
            {
                "description": "10",
                "isAnswerKey": true
            },
            {
                "description": "1234",
                "isAnswerKey": false
            },
            {
                "description": "[1, 2, 3, 4]",
                "isAnswerKey": false
            },
            {
                "description": "0",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "15",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the AverageDisplay component below. What value is displayed when the numbers prop is [10, 20]?\n```jsx\nimport React from 'react';\n\nfunction calculateAverage(numbers) {\n  const total = numbers.reduce((sum, n) => sum + n, 0);\n  return numbers.length > 0 ? total / numbers.length : 0;\n}\n\nfunction AverageDisplay({ numbers }) {\n  const avg = calculateAverage(numbers);\n  return <div>Average: {avg}</div>;\n}\n\nexport default AverageDisplay;\n```",
        "options": [
            {
                "description": "Average: 15",
                "isAnswerKey": true
            },
            {
                "description": "Average: 30",
                "isAnswerKey": false
            },
            {
                "description": "Average: 10",
                "isAnswerKey": false
            },
            {
                "description": "Average: 20",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "16",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Identify the bug in the following Counter component implementation:\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(count++);\n  };\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\nWhat is the error and its fix?",
        "options": [
            {
                "description": "Using post-increment (count++) does not update the state correctly; use setCount(count + 1) instead.",
                "isAnswerKey": true
            },
            {
                "description": "The useState hook is misused and should be removed.",
                "isAnswerKey": false
            },
            {
                "description": "The onClick event should be renamed.",
                "isAnswerKey": false
            },
            {
                "description": "The React import is incorrect.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "17",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following ItemList component. If the prop 'items' might be null, what modification would prevent a runtime error?\n```jsx\nimport React from 'react';\n\nfunction ItemList({ items }) {\n  return (\n    <ul>\n      {items.map((item, idx) => <li key={idx}>{item}</li>)}\n    </ul>\n  );\n}\n\nexport default ItemList;\n```\n",
        "options": [
            {
                "description": "Use a conditional check (e.g., items && items.map(...)) or default items to an empty array.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the map function altogether.",
                "isAnswerKey": false
            },
            {
                "description": "Replace the map with a for loop.",
                "isAnswerKey": false
            },
            {
                "description": "Convert items to a string before mapping.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "18",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the DataFetcher component below. What potential issue arises from using an empty dependency array in the useEffect hook?\n```jsx\nimport React, { useEffect, useState } from 'react';\n\nfunction DataFetcher({ url }) {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(jsonData => setData(jsonData));\n  }, []);\n\n  return <div>{data ? 'Data loaded' : 'Loading...'}</div>;\n}\n\nexport default DataFetcher;\n```\n",
        "options": [
            {
                "description": "The effect will not re-run when the 'url' prop changes.",
                "isAnswerKey": true
            },
            {
                "description": "The effect will cause an infinite loop.",
                "isAnswerKey": false
            },
            {
                "description": "The component will fetch data twice.",
                "isAnswerKey": false
            },
            {
                "description": "There is no issue with an empty dependency array in this case.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "19",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following SubmitForm component. Identify the bug related to event handling:\n```jsx\nimport React from 'react';\n\nfunction SubmitForm() {\n  const handleSubmit = (e) => {\n    e.preventDefault;\n    console.log('Form submitted');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default SubmitForm;\n```\n",
        "options": [
            {
                "description": "The preventDefault method is not called correctly; it should be e.preventDefault().",
                "isAnswerKey": true
            },
            {
                "description": "The onSubmit handler is missing a parameter.",
                "isAnswerKey": false
            },
            {
                "description": "The button type should be 'button' not 'submit'.",
                "isAnswerKey": false
            },
            {
                "description": "The form element is not properly imported from React.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "20",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is the issue with the updateCount function in this component, and how can it be fixed?\n```jsx\nimport React, { useState } from 'react';\n\nfunction BatchUpdater() {\n  const [count, setCount] = useState(0);\n\n  const updateCount = () => {\n    for (let i = 0; i < 5; i++) {\n      setCount(count + 1);\n    }\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={updateCount}>Update Count</button>\n    </div>\n  );\n}\n\nexport default BatchUpdater;\n```\n",
        "options": [
            {
                "description": "The setCount calls should use the functional update form: setCount(prev => prev + 1).",
                "isAnswerKey": true
            },
            {
                "description": "The loop should iterate one additional time.",
                "isAnswerKey": false
            },
            {
                "description": "The button type should be modified.",
                "isAnswerKey": false
            },
            {
                "description": "The loop should be moved into a useEffect hook.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "21",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Predict the output of the following component when the prop count is 7:\n```jsx\nimport React from 'react';\n\nfunction RenderConditionally({ count }) {\n  if (count > 10) {\n    return <p>High count</p>;\n  } else if (count > 5) {\n    return <p>Medium count</p>;\n  } else {\n    return <p>Low count</p>;\n  }\n}\n\nexport default RenderConditionally;\n```\n",
        "options": [
            {
                "description": "Medium count",
                "isAnswerKey": true
            },
            {
                "description": "High count",
                "isAnswerKey": false
            },
            {
                "description": "Low count",
                "isAnswerKey": false
            },
            {
                "description": "Nothing is rendered",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "22",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following StatusMessage component. What will be rendered when the prop status is 'error'?\n```jsx\nimport React from 'react';\n\nfunction StatusMessage({ status }) {\n  if (status === 'loading') {\n    return <p>Loading...</p>;\n  } else {\n    if (status === 'error') {\n      return <p>Error occurred</p>;\n    } else {\n      return <p>Data loaded</p>;\n    }\n  }\n}\n\nexport default StatusMessage;\n```\n",
        "options": [
            {
                "description": "Error occurred",
                "isAnswerKey": true
            },
            {
                "description": "Loading...",
                "isAnswerKey": false
            },
            {
                "description": "Data loaded",
                "isAnswerKey": false
            },
            {
                "description": "A runtime error is thrown",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "23",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following function:\n```jsx\nfunction computeResult(a, b) {\n  let result = 0;\n  if (a > b) {\n    for (let i = b; i <= a; i++) {\n      result += i;\n    }\n  } else {\n    for (let i = a; i <= b; i++) {\n      result += i;\n    }\n  }\n  return result;\n}\n```\nWhat is the output of computeResult(3, 6)?",
        "options": [
            {
                "description": "18",
                "isAnswerKey": true
            },
            {
                "description": "21",
                "isAnswerKey": false
            },
            {
                "description": "15",
                "isAnswerKey": false
            },
            {
                "description": "12",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "24",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Evaluate the following function using a switch-case:\n```jsx\nfunction getDayName(dayNumber) {\n  switch(dayNumber) {\n    case 1:\n      return 'Monday';\n    case 2:\n      return 'Tuesday';\n    case 3:\n      return 'Wednesday';\n    case 4:\n      return 'Thursday';\n    case 5:\n      return 'Friday';\n    case 6:\n      return 'Saturday';\n    case 7:\n      return 'Sunday';\n    default:\n      return 'Invalid day';\n  }\n}\n```\nWhat will be the output of getDayName(5)?",
        "options": [
            {
                "description": "Friday",
                "isAnswerKey": true
            },
            {
                "description": "Saturday",
                "isAnswerKey": false
            },
            {
                "description": "Invalid day",
                "isAnswerKey": false
            },
            {
                "description": "Wednesday",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "25",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the Timer component below. If it is rendered with start=3, what will be displayed after 3 seconds?\n```jsx\nimport React, { useEffect, useState } from 'react';\n\nfunction Timer({ start }) {\n  const [time, setTime] = useState(start);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTime(prev => prev - 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  if (time <= 0) {\n    return <p>Time's up!</p>;\n  }\n  return <p>Time remaining: {time}</p>;\n}\n\nexport default Timer;\n```\n",
        "options": [
            {
                "description": "Time's up!",
                "isAnswerKey": true
            },
            {
                "description": "Time remaining: 0",
                "isAnswerKey": false
            },
            {
                "description": "Time remaining: -1",
                "isAnswerKey": false
            },
            {
                "description": "A Timer error occurs",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "26",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following React component:\n```javascript\nimport React, { useState } from 'react';\n\nfunction MyComponent() {\n  const [count, setCount] = useState(0);\n  \n  return <div>{count}</div>;\n}\n```\nWhich hook is being used to manage the local state of the component?",
        "options": [
            {
                "description": "useEffect",
                "isAnswerKey": false
            },
            {
                "description": "useState",
                "isAnswerKey": true
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "27",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following snippet used to render a list:\n```javascript\nconst items = [1, 2, 3];\n\nreturn (\n  <ul>\n    {items.map((item, index) => <li key={index}>{item}</li>)}\n  </ul>\n);\n```\nWhat is the primary purpose of the key prop in this code?",
        "options": [
            {
                "description": "To apply CSS styles to the list items",
                "isAnswerKey": false
            },
            {
                "description": "To uniquely identify each list element for rendering efficiency",
                "isAnswerKey": true
            },
            {
                "description": "To bind each list item to its corresponding data value",
                "isAnswerKey": false
            },
            {
                "description": "To enforce the order of list items",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "28",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following component code:\n```javascript\nimport React from 'react';\n\nfunction Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}\n```\nWhich statement about the component is correct?",
        "options": [
            {
                "description": "It is a class component that manages its own state",
                "isAnswerKey": false
            },
            {
                "description": "It is a functional component that destructures its props",
                "isAnswerKey": true
            },
            {
                "description": "It renders a static header without using any props",
                "isAnswerKey": false
            },
            {
                "description": "It incorrectly uses props; they should be accessed via 'this.props'",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "29",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Analyze the code snippet below:\n```javascript\nconst element = <h1>Hello, world!</h1>;\n```\nWhich of the following statements is true about the code above?",
        "options": [
            {
                "description": "It is a function call to create a DOM element directly.",
                "isAnswerKey": false
            },
            {
                "description": "It is JSX code that will be transpiled to React.createElement calls.",
                "isAnswerKey": true
            },
            {
                "description": "It is invalid because JSX elements cannot be assigned to variables.",
                "isAnswerKey": false
            },
            {
                "description": "It creates a string literal that represents HTML.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "30",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following code snippet:\n```javascript\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\nWhat is the primary role of the ReactDOM.render function in this context?",
        "options": [
            {
                "description": "It initializes the React component's state.",
                "isAnswerKey": false
            },
            {
                "description": "It renders a React element into a specified DOM container.",
                "isAnswerKey": true
            },
            {
                "description": "It mounts the App component as a new HTML element.",
                "isAnswerKey": false
            },
            {
                "description": "It compiles JSX into vanilla JavaScript in the browser.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "31",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following React component snippet:\n```javascript\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function increment() {\n    // What should replace '??' to update state based on the previous value?\n    setCount(??);\n  }\n\n  return <button onClick={increment}>Increment</button>;\n}\n```\nWhich option correctly replaces '??' to update the count based on its previous value?",
        "options": [
            {
                "description": "count + 1",
                "isAnswerKey": false
            },
            {
                "description": "prevCount => prevCount + 1",
                "isAnswerKey": true
            },
            {
                "description": "++count",
                "isAnswerKey": false
            },
            {
                "description": "function() { return count + 1; }",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "32",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following component:\n```javascript\nimport React, { useEffect } from 'react';\n\nfunction MyComponent({ value }) {\n  useEffect(() => {\n    console.log('Value changed:', value);\n  }, /* dependency array here */);\n  \n  return <div>{value}</div>;\n}\n```\nWhich dependency array should be used to ensure that the effect runs whenever the 'value' prop changes?",
        "options": [
            {
                "description": "[]",
                "isAnswerKey": false
            },
            {
                "description": "[value]",
                "isAnswerKey": true
            },
            {
                "description": "[props]",
                "isAnswerKey": false
            },
            {
                "description": "No dependency array is needed",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "33",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Identify the error in the following component intended to display a price dynamically:\n```javascript\nfunction PriceTag({ price }) {\n  return <div>The price is $price</div>;\n}\n```\nWhich of the options correctly fixes the JSX to properly display the price?",
        "options": [
            {
                "description": "return <div>The price is {price}</div>;",
                "isAnswerKey": true
            },
            {
                "description": "return <div>The price is \"$\" + price</div>;",
                "isAnswerKey": false
            },
            {
                "description": "return <div>The price is ${price}</div>;",
                "isAnswerKey": false
            },
            {
                "description": "return <div>The price is price</div>;",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "34",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following component code:\n```javascript\nfunction MyButton() {\n  function handleClick() {\n    console.log('Clicked');\n  }\n  \n  return <button onClick={handleClick()}>Click me</button>;\n}\n```\nWhat is the error in the code regarding event handling?",
        "options": [
            {
                "description": "There is no error; calling handleClick() is correct.",
                "isAnswerKey": false
            },
            {
                "description": "The onClick prop should be assigned a function reference, not the result of a function call.",
                "isAnswerKey": true
            },
            {
                "description": "The button tag should be self-closing.",
                "isAnswerKey": false
            },
            {
                "description": "handleClick must be defined outside of the component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "35",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which of the following options demonstrates the correct usage of the React Fragment shorthand introduced in React 16.2+?\n\nOption A:\n```javascript\n<>\n  <div>Item 1</div>\n  <div>Item 2</div>\n</>\n```\nOption B:\n```javascript\n<Fragment>\n  <div>Item 1</div>\n  <div>Item 2</div>\n</Fragment>\n```\nOption C:\n```javascript\n<React.Fragment>\n  <div>Item 1</div>\n  <div>Item 2</div>\n</React.Fragment>\n```\nOption D:\n```javascript\n<></></>\n```\n",
        "options": [
            {
                "description": "Option A",
                "isAnswerKey": true
            },
            {
                "description": "Option B",
                "isAnswerKey": false
            },
            {
                "description": "Option C",
                "isAnswerKey": false
            },
            {
                "description": "Option D",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "36",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following form handler component:\n```javascript\nimport React, { useState } from 'react';\n\nfunction NameForm() {\n  const [name, setName] = useState(\"\");\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"Submitting:\", name);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={name} onChange={handleChange} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\nWhat is the role of e.preventDefault() inside the handleSubmit function?",
        "options": [
            {
                "description": "It prevents the default form submission behavior that would reload the page.",
                "isAnswerKey": true
            },
            {
                "description": "It stops the change event from propagating to parent elements.",
                "isAnswerKey": false
            },
            {
                "description": "It prevents the form input from updating the component's state.",
                "isAnswerKey": false
            },
            {
                "description": "It disables the submit button after form submission.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "37",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following component that filters a list based on a search query:\n```javascript\nimport React, { useState } from 'react';\n\nfunction SearchList({ items }) {\n  const [query, setQuery] = useState(\"\");\n\n  const filteredItems = items.filter(item =>\n    item.toLowerCase().includes(query.toLowerCase())\n  );\n\n  return (\n    <div>\n      <input value={query} onChange={e => setQuery(e.target.value)} placeholder=\"Search\" />\n      <ul>\n        {filteredItems.map((item, index) => <li key={index}>{item}</li>)}\n      </ul>\n    </div>\n  );\n}\n```\nHow does this component filter the list of items?",
        "options": [
            {
                "description": "It filters items based on an exact match with the query.",
                "isAnswerKey": false
            },
            {
                "description": "It returns the original list without any filtering.",
                "isAnswerKey": false
            },
            {
                "description": "It filters items to include those that contain the query, ignoring case.",
                "isAnswerKey": true
            },
            {
                "description": "It sorts the items alphabetically before filtering.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "38",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following component that sorts an array of numbers:\n```javascript\nimport React, { useState } from 'react';\n\nfunction SortNumbers({ numbers }) {\n  const [sortedNumbers, setSortedNumbers] = useState([]);\n\n  function sortNumbers() {\n    const sorted = [...numbers].sort((a, b) => a - b);\n    setSortedNumbers(sorted);\n  }\n\n  return (\n    <div>\n      <button onClick={sortNumbers}>Sort</button>\n      <ul>\n        {sortedNumbers.map((num, index) => <li key={index}>{num}</li>)}\n      </ul>\n    </div>\n  );\n}\n```\nWhy is the spread operator used before the 'numbers' array in the sortNumbers function?",
        "options": [
            {
                "description": "To convert 'numbers' into an array.",
                "isAnswerKey": false
            },
            {
                "description": "To create a shallow copy of the 'numbers' array before sorting.",
                "isAnswerKey": true
            },
            {
                "description": "To merge the 'numbers' array with the sortedNumbers state.",
                "isAnswerKey": false
            },
            {
                "description": "To reverse the order of the 'numbers' array.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "39",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Study the following component that conditionally renders messages:\n```javascript\nimport React from 'react';\n\nfunction StatusMessage({ status }) {\n  if (status === \"loading\") {\n    return <p>Loading...</p>;\n  } else if (status === \"error\") {\n    return <p>Error occurred</p>;\n  }\n  return <p>Loaded successfully</p>;\n}\n```\nWhich value of the 'status' prop will cause the component to render \"Loaded successfully\"?",
        "options": [
            {
                "description": "\"loading\"",
                "isAnswerKey": false
            },
            {
                "description": "\"error\"",
                "isAnswerKey": false
            },
            {
                "description": "Any value other than \"loading\" or \"error\"",
                "isAnswerKey": true
            },
            {
                "description": "An undefined status",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "40",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following toggle component:\n```javascript\nimport React, { useState } from 'react';\n\nfunction Toggle() {\n  const [isOn, setIsOn] = useState(false);\n  \n  function toggle() {\n    setIsOn(!isOn);\n  }\n  \n  return (\n    <button onClick={toggle}>\n      {isOn ? \"ON\" : \"OFF\"}\n    </button>\n  );\n}\n```\nWhat type of React component pattern is demonstrated in the Toggle component?",
        "options": [
            {
                "description": "An uncontrolled component",
                "isAnswerKey": false
            },
            {
                "description": "A controlled component",
                "isAnswerKey": false
            },
            {
                "description": "A pure component",
                "isAnswerKey": false
            },
            {
                "description": "A functional component with state",
                "isAnswerKey": true
            }
        ]
    },
    {
        "id": "41",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Analyze the Timer component below, which is intended to update the seconds every second:\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return <div>Seconds: {seconds}</div>;\n}\n```\nWhat is the bug in this component and how can it be fixed?",
        "options": [
            {
                "description": "The setInterval callback uses a stale value of 'seconds'. Replace setSeconds(seconds + 1) with setSeconds(prev => prev + 1).",
                "isAnswerKey": true
            },
            {
                "description": "The dependency array should include 'seconds'.",
                "isAnswerKey": false
            },
            {
                "description": "The interval should be cleared outside the useEffect hook.",
                "isAnswerKey": false
            },
            {
                "description": "There is no bug with this implementation.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "42",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the DataFetcher component below:\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction DataFetcher({ url }) {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(result => setData(result));\n  }, []);\n\n  return <div>{data ? 'Data loaded' : 'Loading...'}</div>;\n}\n```\nWhat is the bug in this component that could lead to incorrect behavior when the 'url' prop changes?",
        "options": [
            {
                "description": "The fetch call is missing error handling.",
                "isAnswerKey": false
            },
            {
                "description": "The dependency array for useEffect should include 'url' to refetch data on prop changes.",
                "isAnswerKey": true
            },
            {
                "description": "The component should use async/await instead of promises.",
                "isAnswerKey": false
            },
            {
                "description": "There is no bug in the component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "43",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following component:\n```javascript\nfunction Welcome({ isLoggedIn }) {\n  return (\n    <div>\n      {isLoggedIn = true ? <h1>Welcome back!</h1> : <h1>Please log in.</h1>}\n    </div>\n  );\n}\n```\nWhat is the error in the code above?",
        "options": [
            {
                "description": "The assignment operator is used instead of a comparison operator, causing isLoggedIn to always be true.",
                "isAnswerKey": true
            },
            {
                "description": "The component should use === for type-safe comparison.",
                "isAnswerKey": false
            },
            {
                "description": "The conditional operator is not allowed inside JSX.",
                "isAnswerKey": false
            },
            {
                "description": "There is no error; the code works as intended.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "44",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following component that listens for window resize events:\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction ResizeComponent() {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener('resize', handleResize);\n  }, []);\n\n  return <div>Width: {width}</div>;\n}\n```\nWhat is the bug in this component?",
        "options": [
            {
                "description": "The event listener is not removed during cleanup, potentially leading to memory leaks.",
                "isAnswerKey": true
            },
            {
                "description": "The dependency array should include 'window.innerWidth'.",
                "isAnswerKey": false
            },
            {
                "description": "The initial state is incorrectly set.",
                "isAnswerKey": false
            },
            {
                "description": "There is no bug with the component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "45",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following CounterList component:\n```javascript\nimport React, { useState } from 'react';\n\nfunction CounterList() {\n  const [counters, setCounters] = useState([0, 0, 0]);\n\n  function incrementAll() {\n    counters.forEach((count, index) => {\n      setCounters(prev => {\n        const newCounters = [...prev];\n        newCounters[index] = count + 1;\n        return newCounters;\n      });\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={incrementAll}>Increment All</button>\n      {counters.map((count, index) => <p key={index}>{count}</p>)}\n    </div>\n  );\n}\n```\nWhat is the bug in the incrementAll function?",
        "options": [
            {
                "description": "It incorrectly uses forEach, which should be replaced with map.",
                "isAnswerKey": false
            },
            {
                "description": "Calling setCounters multiple times leads to performance issues.",
                "isAnswerKey": false
            },
            {
                "description": "It uses the stale 'count' value from the outer scope instead of the current value in the updater function.",
                "isAnswerKey": true
            },
            {
                "description": "The key prop for list items is incorrectly assigned.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "46",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following UserGreeting component:\n```javascript\nimport React from 'react';\n\nfunction UserGreeting({ user, setUser }) {\n  function handleLogout() {\n    setUser(null);\n    console.log(user.name + \" has logged out.\");\n  }\n\n  return (\n    <div>\n      <h1>Welcome, {user.name}!</h1>\n      <button onClick={handleLogout}>Logout</button>\n    </div>\n  );\n}\n```\nConsidering best practices regarding pure functions and side effects, which of the following changes would improve this component's purity?",
        "options": [
            {
                "description": "Remove the console.log statement from the component to keep it purely presentational.",
                "isAnswerKey": true
            },
            {
                "description": "Move the handleLogout function outside the component entirely.",
                "isAnswerKey": false
            },
            {
                "description": "Do not pass the setUser function as a prop.",
                "isAnswerKey": false
            },
            {
                "description": "Replace user.name with a hardcoded string to avoid side effects.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "47",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following component that performs an expensive calculation:\n```javascript\nimport React, { useState } from 'react';\n\nfunction ExpensiveCalculation({ numbers }) {\n  const [multiplier, setMultiplier] = useState(1);\n\n  const calculated = numbers.map(n => {\n    // Simulate an expensive calculation\n    let result = n;\n    for (let i = 0; i < 1000000; i++) {\n      result += 0;\n    }\n    return result * multiplier;\n  });\n\n  return (\n    <div>\n      <input\n        type=\"number\"\n        value={multiplier}\n        onChange={e => setMultiplier(Number(e.target.value))}\n      />\n      <ul>\n        {calculated.map((val, index) => <li key={index}>{val}</li>)}\n      </ul>\n    </div>\n  );\n}\n```\nWhich modification would best optimize this component by preventing unnecessary recalculations?",
        "options": [
            {
                "description": "Wrap the expensive calculation within a useMemo hook.",
                "isAnswerKey": true
            },
            {
                "description": "Replace useState with useReducer for multiplier management.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the for loop to simplify the calculation.",
                "isAnswerKey": false
            },
            {
                "description": "Eliminate the input element to reduce re-renders.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "48",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following ItemList component:\n```javascript\nimport React from 'react';\n\nfunction ItemList({ items }) {\n  console.log('Rendering ItemList');\n  return (\n    <ul>\n      {items.map((item, index) => <li key={index}>{item}</li>)}\n    </ul>\n  );\n}\n```\nHow can you improve performance if the 'items' prop rarely changes?",
        "options": [
            {
                "description": "Wrap the component with React.memo to prevent unnecessary re-renders.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the console.log statement.",
                "isAnswerKey": false
            },
            {
                "description": "Use the array index as the key.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component into a class-based component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "49",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the ComplexForm component below:\n```javascript\nimport React, { useState } from 'react';\n\nfunction ComplexForm() {\n  const [name, setName] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Process form data\n    console.log({ name, age, email });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={name} onChange={e => setName(e.target.value)} placeholder=\"Name\" />\n      <input value={age} onChange={e => setAge(e.target.value)} placeholder=\"Age\" />\n      <input value={email} onChange={e => setEmail(e.target.value)} placeholder=\"Email\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\nWhich refactoring approach best adheres to the DRY principle in this component?",
        "options": [
            {
                "description": "Create a reusable InputField component to handle rendering of input elements.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the placeholder attributes to reduce code repetition.",
                "isAnswerKey": false
            },
            {
                "description": "Extract handleSubmit into a separate utility function.",
                "isAnswerKey": false
            },
            {
                "description": "Consolidate the three state variables into one using useReducer.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "50",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following Parent and Child components:\n```javascript\nimport React, { useState } from 'react';\n\nfunction Parent() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <Child onClick={() => setCount(count + 1)} />\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n\nfunction Child({ onClick }) {\n  console.log('Child rendered');\n  return <button onClick={onClick}>Increment</button>;\n}\n```\nWhich change would best improve performance by following good coding practices regarding function references?",
        "options": [
            {
                "description": "Define the onClick handler outside of the Parent component.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the onClick handler with useCallback to memoize the function reference.",
                "isAnswerKey": true
            },
            {
                "description": "Move the Child component inside the Parent component.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the onClick prop from the Child component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "51",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following React component:\n```\nimport React, { useState } from 'react';\n\nfunction ClickCounter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n      <p>{count}</p>\n    </div>\n  );\n}\n\nexport default ClickCounter;\n```\nWhat happens when the button is clicked?",
        "options": [
            {
                "description": "The count resets to 0.",
                "isAnswerKey": false
            },
            {
                "description": "The count increments by 1.",
                "isAnswerKey": true
            },
            {
                "description": "The count decrements by 1.",
                "isAnswerKey": false
            },
            {
                "description": "The component unmounts.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "52",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following component:\n```\nimport React, { useEffect } from 'react';\n\nfunction Logger() {\n  useEffect(() => {\n    console.log('Component mounted');\n  }, []);\n\n  return <div>Check console</div>;\n}\n\nexport default Logger;\n```\nWhen is 'Component mounted' logged to the console?",
        "options": [
            {
                "description": "On every re-render.",
                "isAnswerKey": false
            },
            {
                "description": "Only once after the initial render.",
                "isAnswerKey": true
            },
            {
                "description": "On component unmount.",
                "isAnswerKey": false
            },
            {
                "description": "Every time the component updates.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "53",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Given the React component below:\n```\nimport React from 'react';\n\nfunction Greeting(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n\nexport default Greeting;\n```\nWhich of the following is the correct way to use the Greeting component to display 'Hello, Alice!'?",
        "options": [
            {
                "description": "<Greeting>Alice</Greeting>",
                "isAnswerKey": false
            },
            {
                "description": "<Greeting name=\"Alice\" />",
                "isAnswerKey": true
            },
            {
                "description": "<Greeting props=\"Alice\" />",
                "isAnswerKey": false
            },
            {
                "description": "<Greeting {name: 'Alice'} />",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "54",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine this code snippet:\n```\nconst items = ['a', 'b', 'c'];\n\nreturn (\n  <ul>\n    {items.map(item => <li>{item}</li>)}\n  </ul>\n);\n```\nWhat is missing in the above code snippet to ensure proper list rendering in React?",
        "options": [
            {
                "description": "An enclosing <div> element.",
                "isAnswerKey": false
            },
            {
                "description": "The use of React.Fragment.",
                "isAnswerKey": false
            },
            {
                "description": "The key attribute in list items.",
                "isAnswerKey": true
            },
            {
                "description": "A return statement before the map function.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "55",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following component:\n```\nimport React from 'react';\n\nfunction Wrapper() {\n  return (\n    <React.Fragment>\n      <div>Item 1</div>\n      <div>Item 2</div>\n    </React.Fragment>\n  );\n}\n\nexport default Wrapper;\n```\nWhat does the Wrapper component render?",
        "options": [
            {
                "description": "A single div containing both items.",
                "isAnswerKey": false
            },
            {
                "description": "Two sibling divs without an extra wrapping element.",
                "isAnswerKey": true
            },
            {
                "description": "Two nested divs.",
                "isAnswerKey": false
            },
            {
                "description": "Nothing, because React.Fragment does not render any element.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "56",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following code snippet using React Context:\n```\nimport React, { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext('light');\n\nfunction ThemedComponent() {\n  const theme = useContext(ThemeContext);\n  return <div>{theme}</div>;\n}\n\nexport default ThemedComponent;\n```\nWhich design pattern is demonstrated in this component and what is its primary purpose?",
        "options": [
            {
                "description": "Factory Pattern; to create new components dynamically.",
                "isAnswerKey": false
            },
            {
                "description": "Context API; to share data across the component tree without prop drilling.",
                "isAnswerKey": true
            },
            {
                "description": "Singleton Pattern; to ensure only one instance of the context exists.",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern; to automatically update components on data changes.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "57",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine this component that utilizes React.lazy and Suspense:\n```\nimport React, { lazy, Suspense } from 'react';\nconst LazyComponent = lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <LazyComponent />\n    </Suspense>\n  );\n}\n\nexport default App;\n```\nWhat is the primary benefit of using React.lazy and Suspense as shown in the code snippet?",
        "options": [
            {
                "description": "They enable lazy loading of components, reducing the initial bundle size.",
                "isAnswerKey": true
            },
            {
                "description": "They improve runtime performance by caching component state.",
                "isAnswerKey": false
            },
            {
                "description": "They provide error boundaries for handling exceptions.",
                "isAnswerKey": false
            },
            {
                "description": "They eliminate the need for code splitting.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "58",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following Button component:\n```\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Button({ label }) {\n  return <button>{label}</button>;\n}\n\nButton.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport default Button;\n```\nWhat is the main purpose of using PropTypes in the Button component?",
        "options": [
            {
                "description": "To enforce compile-time type safety.",
                "isAnswerKey": false
            },
            {
                "description": "To provide runtime type checking for component props.",
                "isAnswerKey": true
            },
            {
                "description": "To automatically generate documentation for the component.",
                "isAnswerKey": false
            },
            {
                "description": "To improve component rendering performance.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "59",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following component using useReducer:\n```\nimport React, { useReducer } from 'react';\n\nfunction reducer(state, action) {\n   switch(action.type) {\n     case 'increment':\n       return { count: state.count + 1 };\n     default:\n       return state;\n   }\n}\n\nfunction Counter() {\n   const [state, dispatch] = useReducer(reducer, { count: 0 });\n   return (\n     <div>\n       <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\n       <p>{state.count}</p>\n     </div>\n   );\n}\n\nexport default Counter;\n```\nWhat is an advantage of using useReducer over useState as demonstrated in this component?",
        "options": [
            {
                "description": "It automatically manages side effects.",
                "isAnswerKey": false
            },
            {
                "description": "It simplifies state management for more complex state logic.",
                "isAnswerKey": true
            },
            {
                "description": "It eliminates the need for state variables.",
                "isAnswerKey": false
            },
            {
                "description": "It batches state updates to prevent re-renders.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "60",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the HOC implementation below:\n```\nimport React from 'react';\n\nfunction withLogging(WrappedComponent) {\n  return function(props) {\n    console.log('Render:', WrappedComponent.name);\n    return <WrappedComponent {...props} />;\n  };\n}\n\nfunction Hello({ name }) {\n  return <div>Hello, {name}!</div>;\n}\n\nexport default withLogging(Hello);\n```\nWhat design pattern is used in the above code snippet and what is its primary benefit?",
        "options": [
            {
                "description": "Render Props; it passes state as a prop.",
                "isAnswerKey": false
            },
            {
                "description": "Higher-Order Component (HOC); it enhances components with additional logging functionality.",
                "isAnswerKey": true
            },
            {
                "description": "Decorator Pattern; it modifies component behavior.",
                "isAnswerKey": false
            },
            {
                "description": "Container Pattern; it separates logic from presentation.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "61",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following multi-file code:\n```\n/* File: Counter.js */\nimport React, { useState } from 'react';\nimport Child from './Child';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <Child count={count} setCount={setCount} />\n      <p>{count}</p>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n```\n/* File: Child.js */\nimport React from 'react';\n\nfunction Child({ count, setCount }) {\n  return <button onClick={() => setCount(count++)}>Increase</button>;\n}\n\nexport default Child;\n```\nIdentify the bug in the above multi-file code that may lead to incorrect state updates.",
        "options": [
            {
                "description": "The state variable 'count' is not initialized.",
                "isAnswerKey": false
            },
            {
                "description": "The useState hook is used incorrectly.",
                "isAnswerKey": false
            },
            {
                "description": "State is mutated directly using 'count++' instead of using a non-mutating increment.",
                "isAnswerKey": true
            },
            {
                "description": "The Child component is not receiving the setCount prop.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "62",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following code from ThemeProvider:\n```\n/* File: ThemeProvider.js */\nimport React, { createContext, useState } from 'react';\n\nexport const ThemeContext = createContext();\n\nexport function ThemeProvider({ children }) {\n  const [theme, setTheme] = useState('light');\n  const toggleTheme = () => {\n    // Incorrect: Directly mutating 'theme' instead of using setTheme\n    theme = theme === 'light' ? 'dark' : 'light';\n  };\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n```\nWhat is the bug in the ThemeProvider component?",
        "options": [
            {
                "description": "The useState hook is missing an initial value.",
                "isAnswerKey": false
            },
            {
                "description": "The toggleTheme function mutates the state directly instead of using setTheme.",
                "isAnswerKey": true
            },
            {
                "description": "The context value is not memoized.",
                "isAnswerKey": false
            },
            {
                "description": "The children are not correctly rendered.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "63",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following component for data fetching:\n```\n/* File: DataFetcher.js */\nimport React, { useEffect, useState } from 'react';\n\nfunction DataFetcher({ url }) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(json => setData(json));\n  }, []);\n  return <div>{data ? data.message : 'Loading...'}</div>;\n}\n\nexport default DataFetcher;\n```\nWhat potential issue exists in the DataFetcher component when the 'url' prop changes?",
        "options": [
            {
                "description": "The component will fetch data multiple times.",
                "isAnswerKey": false
            },
            {
                "description": "The component doesn't handle fetch errors.",
                "isAnswerKey": false
            },
            {
                "description": "The dependency array is missing 'url', potentially causing stale data.",
                "isAnswerKey": true
            },
            {
                "description": "The initial state of data is not set correctly.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "64",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Evaluate the multi-file component structure below:\n```\n/* File: Parent.js */\nimport React, { useState } from 'react';\nimport Child from './Child';\n\nfunction Parent() {\n  const [value, setValue] = useState(0);\n  return <Child value={value} setValue={setValue} />;\n}\n\nexport default Parent;\n```\n```\n/* File: Child.js */\nimport React from 'react';\nimport Grandchild from './Grandchild';\n\nfunction Child({ value, setValue }) {\n  return <Grandchild value={value} setValue={setValue} />;\n}\n\nexport default Child;\n```\n```\n/* File: Grandchild.js */\nimport React from 'react';\n\nfunction Grandchild({ value, setValue }) {\n  return (\n    <button onClick={() => setValue(value + 1)}>\n      Increase: {val}\n    </button>\n  );\n}\n\nexport default Grandchild;\n```\nWhat is the bug in the multi-file component communication?",
        "options": [
            {
                "description": "The Parent component does not pass the state update function.",
                "isAnswerKey": false
            },
            {
                "description": "The Child component fails to pass the 'value' prop.",
                "isAnswerKey": false
            },
            {
                "description": "The Grandchild component incorrectly references 'val' instead of 'value'.",
                "isAnswerKey": true
            },
            {
                "description": "The components are missing React.Fragment wrappers.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "65",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the error handling implementation below:\n```\n/* File: withErrorBoundary.js */\nimport React from 'react';\n\nfunction withErrorBoundary(WrappedComponent) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n    static getDerivedStateFromError(error) {\n      return { hasError: true };\n    }\n    componentDidCatch(error, info) {\n      console.error(error, info);\n    }\n    render() {\n      if (this.state.hasError) {\n        return <div>Error occurred</div>;\n      }\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n}\n\nexport default withErrorBoundary;\n```\n```\n/* File: App.js */\nimport React from 'react';\nimport withErrorBoundary from './withErrorBoundary';\nimport RiskyComponent from './RiskyComponent';\n\nconst SafeComponent = withErrorBoundary(RiskyComponent);\n\nfunction App() {\n  return <SafeComponent />;\n}\n\nexport default App;\n```\n```\n/* File: RiskyComponent.js */\nimport React, { useEffect } from 'react';\n\nfunction RiskyComponent() {\n  useEffect(() => {\n    throw new Error(\"Failure!\");\n  }, []);\n  return <div>Risky Component</div>;\n}\n\nexport default RiskyComponent;\n```\nWhat is the primary error handling strategy employed by the withErrorBoundary HOC?",
        "options": [
            {
                "description": "It retries rendering the component until it succeeds.",
                "isAnswerKey": false
            },
            {
                "description": "It wraps components in a try-catch block during rendering.",
                "isAnswerKey": false
            },
            {
                "description": "It uses getDerivedStateFromError and componentDidCatch to catch errors and display a fallback UI.",
                "isAnswerKey": true
            },
            {
                "description": "It logs errors without altering the UI.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "66",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following List component:\n```\nimport React from 'react';\n\nfunction List({ items }) {\n  return (\n    <ul>\n      {items.map(item => <li key={item.id} onClick={() => console.log(item.name)}>{item.name}</li>)}\n    </ul>\n  );\n}\n\nexport default List;\n```\nWhich refactoring improvement can optimize performance in the above List component?",
        "options": [
            {
                "description": "Remove the key attribute from list items.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the inline onClick handler in useCallback to avoid recreating the function on every render.",
                "isAnswerKey": true
            },
            {
                "description": "Replace the map function with a for loop.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component into a class-based component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "67",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the Status component below:\n```\nfunction Status({ status }) {\n  return (\n    <div>\n      {status === 'loading' ? (\n        <p>Loading...</p>\n      ) : status === 'error' ? (\n        <p>Error occurred</p>\n      ) : status === 'success' ? (\n        <p>Data loaded successfully</p>\n      ) : (\n        <p>Unknown status</p>\n      )}\n    </div>\n  );\n}\n``` \nWhich refactoring technique would best improve the readability of the Status component?",
        "options": [
            {
                "description": "Use a mapping object to associate statuses with messages.",
                "isAnswerKey": true
            },
            {
                "description": "Remove conditional rendering entirely.",
                "isAnswerKey": false
            },
            {
                "description": "Inline all text content directly in JSX.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component to a class-based component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "68",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the UserProfile component below:\n```\nimport React from 'react';\n\nfunction UserProfile({ user, onClick }) {\n  console.log(\"Rendering UserProfile\");\n  return (\n    <div onClick={onClick}>\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n    </div>\n  );\n}\n\nexport default UserProfile;\n```\nWhich refactoring approach can help prevent unnecessary re-renders of the UserProfile component?",
        "options": [
            {
                "description": "Wrap the component with React.memo to memoize it if its props don't change.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the onClick handler to prevent re-renders.",
                "isAnswerKey": false
            },
            {
                "description": "Inline the user object within the component.",
                "isAnswerKey": false
            },
            {
                "description": "Add additional console logs to track renders.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "69",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following SumList component:\n```\nimport React, { useMemo } from 'react';\n\nfunction SumList({ numbers }) {\n  const total = numbers.reduce((acc, num) => acc + num, 0);\n  return <div>Total: {total}</div>;\n}\n\nexport default SumList;\n```\nHow can you refactor this component to avoid recalculating the total on every render?",
        "options": [
            {
                "description": "Replace useMemo with useCallback.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the total calculation in useMemo with 'numbers' as a dependency.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the dependency array from useEffect.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component into a class-based component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "70",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following FormatDate component:\n```\nimport React from 'react';\n\nfunction FormatDate({ date }) {\n  const d = new Date(date);\n  const day = (\"0\" + d.getDate()).slice(-2);\n  const month = (\"0\" + (d.getMonth() + 1)).slice(-2);\n  const year = d.getFullYear();\n  return <span>{day}-{month}-{year}</span>;\n}\n\nexport default FormatDate;\n```\nWhich refactoring principle could improve the reusability of the date formatting logic in this component?",
        "options": [
            {
                "description": "Inline the date formatting in each component that needs it.",
                "isAnswerKey": false
            },
            {
                "description": "Extract the date formatting logic into a separate utility function.",
                "isAnswerKey": true
            },
            {
                "description": "Remove date formatting entirely from the UI.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component into a class-based component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "71",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine this custom hook:\n```\nimport React, { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    let isMounted = true;\n    fetch(url).then(res => res.json()).then(json => {\n      if(isMounted) setData(json);\n    });\n    return () => { isMounted = false; };\n  }, [url]);\n  return data;\n}\n\nexport default useFetch;\n```\nWhich design pattern is exemplified by the useFetch hook, and what is its primary advantage?",
        "options": [
            {
                "description": "Singleton Pattern; it ensures only one instance exists.",
                "isAnswerKey": false
            },
            {
                "description": "Custom Hook Pattern; it allows reusing asynchronous data fetching logic across components.",
                "isAnswerKey": true
            },
            {
                "description": "Factory Pattern; it creates components dynamically based on input.",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern; it listens for data changes.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "72",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following higher-order component snippet:\n```\nfunction withAuthorization(WrappedComponent) {\n  return function(props) {\n    const user = { role: \"admin\" }; // assume authorization logic here\n    return <WrappedComponent {...props} user={user} />;\n  };\n}\n```\nWhat design pattern is implemented in the above code and what problem does it solve?",
        "options": [
            {
                "description": "Render Props; it passes state as a prop.",
                "isAnswerKey": false
            },
            {
                "description": "Higher-Order Component (HOC); it injects additional props (e.g., user authorization) without modifying the wrapped component.",
                "isAnswerKey": true
            },
            {
                "description": "Decorator Pattern; it adds styling to components.",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern; it monitors user actions.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "73",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following middleware implementation for Redux:\n```\nconst loggerMiddleware = store => next => action => {\n  console.log('Dispatching', action);\n  let result = next(action);\n  console.log('Next state', store.getState());\n  return result;\n};\n\nexport default loggerMiddleware;\n```\nWhat is the primary benefit of the middleware pattern as demonstrated by loggerMiddleware in a Redux application?",
        "options": [
            {
                "description": "It allows synchronous updates to bypass reducers.",
                "isAnswerKey": false
            },
            {
                "description": "It enables action interception and processing (e.g., logging) without modifying reducer logic.",
                "isAnswerKey": true
            },
            {
                "description": "It replaces the need for React Router in the application.",
                "isAnswerKey": false
            },
            {
                "description": "It enforces immutability of the Redux state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "74",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following snippet:\n```\nimport React from 'react';\n\nconst ServiceContext = React.createContext();\n\nfunction ServiceProvider({ service, children }) {\n  return (\n    <ServiceContext.Provider value={service}>\n      {children}\n    </ServiceContext.Provider>\n  );\n}\n\nexport { ServiceProvider, ServiceContext };\n```\nWhich design pattern is illustrated here and what is its main advantage in managing dependencies?",
        "options": [
            {
                "description": "Dependency Injection; it allows components to receive services without hard-coded dependencies.",
                "isAnswerKey": true
            },
            {
                "description": "Singleton Pattern; it guarantees a single instance of a service.",
                "isAnswerKey": false
            },
            {
                "description": "Command Pattern; it encapsulates service requests as objects.",
                "isAnswerKey": false
            },
            {
                "description": "Strategy Pattern; it enables swapping of service implementations at runtime.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "75",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the code below:\n```\nclass EventEmitter {\n  constructor() {\n    this.listeners = [];\n  }\n  subscribe(fn) {\n    this.listeners.push(fn);\n    return () => this.listeners = this.listeners.filter(listener => listener !== fn);\n  }\n  emit(data) {\n    this.listeners.forEach(fn => fn(data));\n  }\n}\n\nconst emitter = new EventEmitter();\n\nfunction notify() {\n  emitter.emit(\"Event occurred\");\n}\n\nexport { emitter, notify };\n```\nWhat design pattern does the above code implement, and how can it benefit a large-scale React application?",
        "options": [
            {
                "description": "Singleton Pattern; it restricts instantiation to one object.",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern; it promotes decoupled communication between different parts of the application.",
                "isAnswerKey": true
            },
            {
                "description": "Factory Pattern; it manages component creation dynamically.",
                "isAnswerKey": false
            },
            {
                "description": "Proxy Pattern; it controls access to the event emitter.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "76",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following code snippet:\n\n```\nconst withAuth = (WrappedComponent) => {\n  return class extends React.Component {\n    render() {\n      const { isAuthenticated } = this.props;\n      if (!isAuthenticated) {\n        return <div>Please log in</div>;\n      }\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n};\n```\n\nWhich design pattern is being employed to enhance the component's behavior?",
        "options": [
            {
                "description": "React Hooks",
                "isAnswerKey": false
            },
            {
                "description": "Higher Order Component (HOC)",
                "isAnswerKey": true
            },
            {
                "description": "Render Props",
                "isAnswerKey": false
            },
            {
                "description": "Context API",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "77",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following snippet that demonstrates component composition:\n\n```\nfunction Tabs({ children }) {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n  return (\n    <div>\n      {React.Children.map(children, (child, index) =>\n        React.cloneElement(child, {\n          active: index === activeIndex,\n          onSelect: () => setActiveIndex(index)\n        })\n      )}\n    </div>\n  );\n}\n```\n\nWhat design pattern is exemplified by this implementation?",
        "options": [
            {
                "description": "Compound Components",
                "isAnswerKey": true
            },
            {
                "description": "Higher Order Component (HOC)",
                "isAnswerKey": false
            },
            {
                "description": "Render Props",
                "isAnswerKey": false
            },
            {
                "description": "Hooks API",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "78",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Given the following code snippet:\n\n```\nconst AppContext = React.createContext();\n\nfunction Provider({ children }) {\n  const value = { user: 'John' };\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n```\n\nWhich pattern is the above code utilizing for state sharing?",
        "options": [
            {
                "description": "Redux Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Context API",
                "isAnswerKey": true
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "79",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Analyze the following custom hook:\n\n```\nfunction useToggle(initial = false) {\n  const [state, setState] = React.useState(initial);\n  const toggle = () => setState(s => !s);\n  return { state, toggle };\n}\n```\n\nWhat architectural pattern does this custom hook represent for reusing component logic?",
        "options": [
            {
                "description": "Higher Order Component",
                "isAnswerKey": false
            },
            {
                "description": "Render Props",
                "isAnswerKey": false
            },
            {
                "description": "Custom Hook Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Compound Component",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "80",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following code snippet:\n\n```\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // Log error\n  }\n\n  render() {\n    return this.state.hasError ? <FallbackComponent /> : this.props.children;\n  }\n}\n```\n\nWhich pattern does the snippet above demonstrate in handling runtime errors?",
        "options": [
            {
                "description": "Container/Presentational Separation",
                "isAnswerKey": false
            },
            {
                "description": "Error Boundary Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Higher Order Component",
                "isAnswerKey": false
            },
            {
                "description": "Render Props",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "81",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following component code:\n\n```\nfunction SearchComponent({ query }) {\n  const [results, setResults] = React.useState([]);\n  React.useEffect(() => {\n    fetchResults(query).then(data => {\n      setResults(data);\n    });\n  }, [query]);\n  \n  return <div>{results.length} results found</div>;\n}\n```\n\nIf the 'query' prop changes rapidly, what potential issue might arise in this implementation?",
        "options": [
            {
                "description": "Memory leak due to unmounted component updates",
                "isAnswerKey": false
            },
            {
                "description": "Asynchronous race condition",
                "isAnswerKey": true
            },
            {
                "description": "Deadlock in JavaScript's event loop",
                "isAnswerKey": false
            },
            {
                "description": "Excessive re-rendering from state batching",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "82",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following component:\n\n```\nfunction DataFetcher() {\n  const [data, setData] = React.useState(null);\n  React.useEffect(() => {\n    let cancelled = false;\n    fetch('/api/data')\n      .then(response => response.json())\n      .then(json => {\n        if (!cancelled) {\n          setData(json);\n        }\n      });\n    // Note: No cleanup function provided\n  }, []);\n  return <div>{data ? data.value : 'Loading...'}</div>;\n}\n```\n\nWhat is the primary concern with this implementation?",
        "options": [
            {
                "description": "A race condition when multiple requests are sent",
                "isAnswerKey": false
            },
            {
                "description": "A memory leak due to missing cleanup on unmount",
                "isAnswerKey": true
            },
            {
                "description": "Improper error handling",
                "isAnswerKey": false
            },
            {
                "description": "Redundant network requests",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "83",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following Timer component:\n\n```\nfunction Timer() {\n  const [count, setCount] = React.useState(0);\n  React.useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    // Missing cleanup function\n  }, []);\n  return <div>{count}</div>;\n}\n```\n\nWhat issue does this component potentially suffer from?",
        "options": [
            {
                "description": "Race condition between state updates",
                "isAnswerKey": false
            },
            {
                "description": "Memory leak due to an uncleaned interval",
                "isAnswerKey": true
            },
            {
                "description": "Incorrect state initialization",
                "isAnswerKey": false
            },
            {
                "description": "Improper use of setInterval within useEffect",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "84",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following component that loads a user profile:\n\n```\nfunction UserProfile({ userId }) {\n  const [profile, setProfile] = React.useState(null);\n  React.useEffect(() => {\n    async function loadProfile() {\n      const response = await fetch(`/api/user/${userId}`);\n      const data = await response.json();\n      setProfile(data);\n    }\n    loadProfile();\n  }, [userId]);\n  \n  return profile ? <div>{profile.name}</div> : <div>Loading...</div>;\n}\n```\n\nWhat improvement would help prevent potential issues if the component unmounts before the fetch completes?",
        "options": [
            {
                "description": "Remove the dependency array",
                "isAnswerKey": false
            },
            {
                "description": "Utilize AbortController to cancel the fetch",
                "isAnswerKey": true
            },
            {
                "description": "Use setTimeout to delay the fetch",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the fetch in a try/catch block",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "85",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following component:\n\n```\nfunction Counter() {\n  const [count, setCount] = React.useState(0);\n  React.useEffect(() => {\n    setCount(c => c + 1);\n  }, []);\n  return <div>{count}</div>;\n}\n```\n\nIn React 18’s Strict Mode, what unexpected behavior might occur with this implementation, and what is its cause?",
        "options": [
            {
                "description": "No issues; the useEffect runs only once",
                "isAnswerKey": false
            },
            {
                "description": "The effect might run twice, causing a double increment due to Strict Mode in development",
                "isAnswerKey": true
            },
            {
                "description": "The state update may get lost due to batching",
                "isAnswerKey": false
            },
            {
                "description": "It will trigger an infinite loop of renders",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "86",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following custom state management function:\n\n```\nfunction createStore(initialState) {\n  let state = initialState;\n  const listeners = [];\n  \n  return {\n    subscribe: (listener) => {\n      listeners.push(listener);\n      return () => {\n        listeners.splice(listeners.indexOf(listener), 1);\n      };\n    },\n    getState: () => state,\n    dispatch: (action) => {\n      state = reducer(state, action);\n      listeners.forEach(l => l());\n    }\n  };\n}\n```\n\nWhich design pattern is primarily utilized in this state management implementation?",
        "options": [
            {
                "description": "Observer Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Flux Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Command Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "87",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following PluginManager implementation:\n\n```\nclass PluginManager {\n  constructor() {\n    this.plugins = [];\n  }\n  \n  register(plugin) {\n    if (typeof plugin.apply === 'function') {\n      this.plugins.push(plugin);\n    }\n  }\n  \n  run(context) {\n    this.plugins.forEach(plugin => plugin.apply(context));\n  }\n}\n```\n\nThis design is most closely associated with which architectural approach?",
        "options": [
            {
                "description": "Strategy Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Plugin Architecture with Inversion of Control",
                "isAnswerKey": true
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Facade Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "88",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following dynamic form builder component:\n\n```\nconst formConfig = [\n  { type: 'text', name: 'username', label: 'Username' },\n  { type: 'password', name: 'password', label: 'Password' }\n];\n\nfunction DynamicForm({ config }) {\n  return (\n    <form>\n      {config.map(field => {\n        const FieldComponent = field.type === 'text' ? TextInput : PasswordInput;\n        return <FieldComponent key={field.name} label={field.label} name={field.name} />;\n      })}\n    </form>\n  );\n}\n```\n\nWhich architectural approach does this DynamicForm component best illustrate?",
        "options": [
            {
                "description": "Component Composition and Configuration",
                "isAnswerKey": true
            },
            {
                "description": "Conditional Rendering",
                "isAnswerKey": false
            },
            {
                "description": "Render Props Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Higher Order Components Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "89",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following context provider implementation:\n\n```\nconst StateContext = React.createContext();\n\nfunction StateProvider({ reducer, initialState, children }) {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </StateContext.Provider>\n  );\n}\n```\n\nWhich architectural pattern does this component best demonstrate?",
        "options": [
            {
                "description": "Context API combined with a reducer (Flux-like architecture)",
                "isAnswerKey": true
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Compound Components Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "90",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "In a large, configurable system, consider the custom hook below:\n\n```\nfunction useBusinessLogic(config) {\n  // Performs complex operations based on config\n  const result = performComplexOperation(config);\n  return result;\n}\n```\n\nWhat is the primary advantage of encapsulating business logic in a custom hook like this?",
        "options": [
            {
                "description": "It promotes reusability and separation of concerns",
                "isAnswerKey": true
            },
            {
                "description": "It tightly couples the UI to the business logic",
                "isAnswerKey": false
            },
            {
                "description": "It forces the code to run synchronously",
                "isAnswerKey": false
            },
            {
                "description": "It bypasses React’s lifecycle methods",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "91",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following component for listing items:\n\n```\nfunction ItemList({ items }) {\n  return (\n    <ul>\n      {items.map(item => (\n        <li onClick={() => handleClick(item.id)} key={item.id}>\n          {item.name}\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\nWhat potential problem does this implementation have regarding re-render performance, and what is a recommended refactoring?",
        "options": [
            {
                "description": "Inline event handlers can cause unnecessary re-renders; move the handler definition outside the map callback",
                "isAnswerKey": true
            },
            {
                "description": "The key prop is incorrectly set",
                "isAnswerKey": false
            },
            {
                "description": "The component structure is too flat",
                "isAnswerKey": false
            },
            {
                "description": "Using arrow functions in JSX is best avoided for readability reasons only",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "92",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following code which uses lazy loading:\n\n```\nimport React, { Suspense, lazy } from 'react';\nconst HeavyComponent = lazy(() => import('./HeavyComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <HeavyComponent />\n    </Suspense>\n  );\n}\n```\n\nWhat refactoring technique is demonstrated here to improve load performance and modularity?",
        "options": [
            {
                "description": "Lazy Loading",
                "isAnswerKey": true
            },
            {
                "description": "Memoization",
                "isAnswerKey": false
            },
            {
                "description": "Error Boundary Implementation",
                "isAnswerKey": false
            },
            {
                "description": "Provider Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "93",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following pair of components with similar rendering logic:\n\n```\nfunction ListA({ items, onClick }) {\n  return items.map(item => <div onClick={() => onClick(item)} key={item.id}>{item}</div>);\n}\n\nfunction ListB({ items, onClick }) {\n  return items.map(item => <div onClick={() => onClick(item)} key={item.id}>{item}</div>);\n}\n```\n\nWhat refactoring strategy would best reduce code duplication in this scenario?",
        "options": [
            {
                "description": "Merge the two components into a single reusable List component",
                "isAnswerKey": true
            },
            {
                "description": "Keep them separate to ensure isolation",
                "isAnswerKey": false
            },
            {
                "description": "Use inheritance to share logic between components",
                "isAnswerKey": false
            },
            {
                "description": "Implement the render props pattern to differentiate behavior",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "94",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following legacy component:\n\n```\nclass LegacyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n  \n  increment() {\n    this.setState({ count: this.state.count + 1 });\n  }\n  \n  render() {\n    return <button onClick={() => this.increment()}>Increment</button>;\n  }\n}\n```\n\nWhat refactoring would best modernize this component for improved modularity and maintainability?",
        "options": [
            {
                "description": "Convert it to a functional component using React Hooks",
                "isAnswerKey": true
            },
            {
                "description": "Add more class methods to separate concerns",
                "isAnswerKey": false
            },
            {
                "description": "Wrap it within an ErrorBoundary",
                "isAnswerKey": false
            },
            {
                "description": "Extract the state logic into a higher-order component",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "95",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following component that performs an expensive calculation:\n\n```\nfunction ExpensiveComponent({ data }) {\n  const computed = expensiveCalculation(data);\n  return <div>{computed}</div>;\n}\n```\n\nWhich refactoring technique can optimize this component by preventing unnecessary recalculations when 'data' has not changed?",
        "options": [
            {
                "description": "Use React.memo along with useMemo to memoize the expensive calculation",
                "isAnswerKey": true
            },
            {
                "description": "Convert the component to a class component",
                "isAnswerKey": false
            },
            {
                "description": "Inline the calculation directly in the JSX",
                "isAnswerKey": false
            },
            {
                "description": "Remove the expensive logic altogether",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "96",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a complex, large-scale React application with inconsistent error handling among various modules, analyze the following Global Error Boundary implementation:\n\n```\nclass GlobalErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n  \n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n  \n  componentDidCatch(error, info) {\n    logErrorToService(error, info);\n  }\n  \n  render() {\n    return this.state.hasError ? <FallbackUI /> : this.props.children;\n  }\n}\n```\n\nWhat systemic improvement does adopting a Global Error Boundary provide in such an organization?",
        "options": [
            {
                "description": "Centralized error handling and a consistent fallback UI",
                "isAnswerKey": true
            },
            {
                "description": "Increased coupling among components",
                "isAnswerKey": false
            },
            {
                "description": "Performance degradation due to extra rendering",
                "isAnswerKey": false
            },
            {
                "description": "Elimination of all runtime errors",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "97",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider a legacy class component below suffering from inconsistent state management across a large codebase:\n\n```\nclass LegacyWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [] };\n  }\n  \n  componentDidMount() {\n    fetch('/api/items')\n      .then(res => res.json())\n      .then(data => this.setState({ items: data }));\n  }\n  \n  render() {\n    return this.state.items.map(item => <div key={item.id}>{item.name}</div>);\n  }\n}\n```\n\nWhich architectural decision would best address and standardize state management across teams in such a scenario?",
        "options": [
            {
                "description": "Adopt a unified state management solution like Redux or Context with Hooks",
                "isAnswerKey": true
            },
            {
                "description": "Allow each team to implement their preferred state management",
                "isAnswerKey": false
            },
            {
                "description": "Migrate entirely to class components",
                "isAnswerKey": false
            },
            {
                "description": "Remove state management from components altogether",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "98",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the following component which safely handles asynchronous data loading:\n\n```\nfunction DataLoader({ id }) {\n  const [data, setData] = React.useState(null);\n  React.useEffect(() => {\n    let active = true;\n    fetchData(id).then(result => {\n      if (active) setData(result);\n    });\n    return () => { active = false; };\n  }, [id]);\n  return <div>{data}</div>;\n}\n```\n\nWhile this implementation prevents race conditions, what systemic practice would you enforce to achieve consistent asynchronous handling across a large codebase?",
        "options": [
            {
                "description": "Standardize on a custom hook (e.g., useSafeAsync) that encapsulates cancellation logic",
                "isAnswerKey": true
            },
            {
                "description": "Mandate inline cleanup logic in every useEffect",
                "isAnswerKey": false
            },
            {
                "description": "Avoid asynchronous operations in components entirely",
                "isAnswerKey": false
            },
            {
                "description": "Rely solely on React’s built-in effect management",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "99",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following component with a direct state mutation issue:\n\n```\nfunction MyComponent() {\n  const [count, setCount] = React.useState(0);\n  // Incorrect state mutation\n  count++;\n  return <div>{count}</div>;\n}\n```\n\nWhat systemic measure would best help catch such issues and enforce best practices across teams?",
        "options": [
            {
                "description": "Implement strict ESLint rules and thorough code reviews to enforce immutability",
                "isAnswerKey": true
            },
            {
                "description": "Allow mutable state for performance reasons",
                "isAnswerKey": false
            },
            {
                "description": "Disable React state in favor of local variables",
                "isAnswerKey": false
            },
            {
                "description": "Rely solely on TypeScript to catch runtime mutations",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "100",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following Parent and Child components:\n\n```\nfunction Parent({ data }) {\n  const handleClick = () => console.log('clicked');\n  return <Child onClick={handleClick} data={data} />;\n}\n\nconst Child = React.memo(({ onClick, data }) => {\n  console.log('Child rendered');\n  return <button onClick={onClick}>Click me</button>;\n});\n```\n\nIn a large-scale application, repeated unnecessary re-renders (often due to inline function definitions) can degrade performance. What systemic solution would best address this issue across teams?",
        "options": [
            {
                "description": "Adopt consistent use of useCallback and memoization patterns to prevent unnecessary re-renders",
                "isAnswerKey": true
            },
            {
                "description": "Remove all memoization to simplify the components",
                "isAnswerKey": false
            },
            {
                "description": "Move state updates to the Parent component exclusively",
                "isAnswerKey": false
            },
            {
                "description": "Encourage re-renders to ensure data freshness",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "101",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Identify the syntax error in the following HTML snippet:\n```\n<html>\n  <head>\n    <title>Test Page</title>\n  </head>\n  <body>\n    <p>Welcome to the page\n  </body>\n</html>\n```",
        "options": [
            {
                "description": "Missing closing </p> tag",
                "isAnswerKey": true
            },
            {
                "description": "Missing closing </body> tag",
                "isAnswerKey": false
            },
            {
                "description": "Missing DOCTYPE declaration",
                "isAnswerKey": false
            },
            {
                "description": "Incorrect nesting of <head> and <body> tags",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "102",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following snippet and identify the error in the link tag:\n```\n<link rel=\"stylesheet\" \"styles.css\">\n```\nWhich of the following is the correct fix?",
        "options": [
            {
                "description": "```<link rel=\"stylesheet\" href=\"styles.css\">```",
                "isAnswerKey": true
            },
            {
                "description": "```<link rel=\"stylesheet\" src=\"styles.css\">```",
                "isAnswerKey": false
            },
            {
                "description": "```<link rel=\"link\" href=\"styles.css\">```",
                "isAnswerKey": false
            },
            {
                "description": "```<link href=\"styles.css\" rel=\"script\">```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "103",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following snippet. Which of the following HTML tags is self‐closing by default?\n```\n<img src=\"image.png\">\n<div>Content</div>\n<p>Text</p>\n<span>Inline text</span>\n```",
        "options": [
            {
                "description": "<div>",
                "isAnswerKey": false
            },
            {
                "description": "<img>",
                "isAnswerKey": true
            },
            {
                "description": "<p>",
                "isAnswerKey": false
            },
            {
                "description": "<span>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "104",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet. What is the purpose of the DOCTYPE declaration?\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Page Title</title>\n  </head>\n  <body>\n    <p>Content</p>\n  </body>\n</html>\n```",
        "options": [
            {
                "description": "To include meta information about the document",
                "isAnswerKey": false
            },
            {
                "description": "To define the HTML version and ensure standards mode rendering",
                "isAnswerKey": true
            },
            {
                "description": "To link external stylesheets",
                "isAnswerKey": false
            },
            {
                "description": "To declare JavaScript libraries",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "105",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which tag is used to insert a line break in HTML? Consider the snippet below:\n```\n<p>Hello<br>World</p>\n```",
        "options": [
            {
                "description": "<lb>",
                "isAnswerKey": false
            },
            {
                "description": "<br>",
                "isAnswerKey": true
            },
            {
                "description": "<break>",
                "isAnswerKey": false
            },
            {
                "description": "<hr>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "106",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following code snippet. How many list items will be displayed when rendered?\n```\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>\n```",
        "options": [
            {
                "description": "1",
                "isAnswerKey": false
            },
            {
                "description": "2",
                "isAnswerKey": false
            },
            {
                "description": "3",
                "isAnswerKey": true
            },
            {
                "description": "0",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "107",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following nested HTML snippet. Which statement correctly describes the parent-child relationship?\n```\n<div>\n  <p>\n    <span>Nested Text</span>\n  </p>\n</div>\n```",
        "options": [
            {
                "description": "The <div> is the parent of <p> and <span> is its child.",
                "isAnswerKey": false
            },
            {
                "description": "The <p> is the parent of <span> and <div> is the grandparent.",
                "isAnswerKey": true
            },
            {
                "description": "The <span> is the parent of both <div> and <p>.",
                "isAnswerKey": false
            },
            {
                "description": "The <div> and <p> are both children of <span>.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "108",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following ordered list. If the second item is removed, how many items will be rendered and how will they be numbered?\n```\n<ol>\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ol>\n```",
        "options": [
            {
                "description": "Two items rendered numbered as 1 and 3",
                "isAnswerKey": false
            },
            {
                "description": "Two items rendered, renumbered as 1 and 2",
                "isAnswerKey": true
            },
            {
                "description": "Three items with a gap in numbering",
                "isAnswerKey": false
            },
            {
                "description": "Only one item rendered",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "109",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Identify the missing attribute in the following image tag that is important for accessibility:\n```\n<img src=\"logo.png\">\n```",
        "options": [
            {
                "description": "title",
                "isAnswerKey": false
            },
            {
                "description": "alt",
                "isAnswerKey": true
            },
            {
                "description": "id",
                "isAnswerKey": false
            },
            {
                "description": "class",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "110",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which HTML element is used to embed a video as shown in the snippet below?\n```\n<video width=\"320\" height=\"240\" controls>\n  <source src=\"movie.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n```",
        "options": [
            {
                "description": "<source>",
                "isAnswerKey": false
            },
            {
                "description": "<embed>",
                "isAnswerKey": false
            },
            {
                "description": "<video>",
                "isAnswerKey": true
            },
            {
                "description": "<iframe>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "111",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following HTML snippet representing a navigation menu. Identify the structural improvement for better semantics and accessibility:\n```\n<div>\n  <a href=\"home.html\">Home</a>\n  <a href=\"about.html\">About</a>\n  <a href=\"contact.html\">Contact</a>\n</div>\n```",
        "options": [
            {
                "description": "Wrap the links in a <nav> element with an unordered list and list items",
                "isAnswerKey": true
            },
            {
                "description": "Change all <a> tags to <button> tags",
                "isAnswerKey": false
            },
            {
                "description": "Remove the container <div> element",
                "isAnswerKey": false
            },
            {
                "description": "Add a <header> element around the links",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "112",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the following form snippet and identify the labeling issue affecting accessibility:\n```\n<form>\n  <input type=\"text\" id=\"username\">\n  <label>Password:</label>\n  <input type=\"password\" id=\"password\">\n  <button type=\"submit\">Submit</button>\n</form>\n```",
        "options": [
            {
                "description": "The form is missing a submit button",
                "isAnswerKey": false
            },
            {
                "description": "The inputs are missing associated <label> tags with a 'for' attribute",
                "isAnswerKey": true
            },
            {
                "description": "The IDs of the inputs are incorrect",
                "isAnswerKey": false
            },
            {
                "description": "The <label> tags should be replaced with <span> tags",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "113",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following table markup and determine the improvement needed for better semantics in header cells:\n```\n<table>\n  <tr>\n    <td>Name</td>\n    <td>Age</td>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n</table>\n```",
        "options": [
            {
                "description": "Add a caption for the table",
                "isAnswerKey": false
            },
            {
                "description": "Replace the <td> tags in the first row with <th> tags",
                "isAnswerKey": true
            },
            {
                "description": "Remove the table borders",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the rows in <thead> and <tbody> elements",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "114",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following image snippet. Which modification would best improve its responsiveness on different devices?\n```\n<img src=\"image1.jpg\" width=\"600\" height=\"400\">\n```",
        "options": [
            {
                "description": "Add a CSS class that sets max-width: 100% and remove fixed width and height attributes",
                "isAnswerKey": true
            },
            {
                "description": "Change the file format from JPG to PNG",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the image in a <figure> tag",
                "isAnswerKey": false
            },
            {
                "description": "Add an 'alt' attribute to the image",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "115",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Identify the error in the inline style attribute in the following HTML snippet:\n```\n<p style=\"font-weight: bold font-size: 16px;\">Important text</p>\n```",
        "options": [
            {
                "description": "Missing a semicolon between the 'bold' value and 'font-size: 16px;'",
                "isAnswerKey": true
            },
            {
                "description": "Incorrect use of double quotes in the style attribute",
                "isAnswerKey": false
            },
            {
                "description": "The style attribute should be applied to a <div> instead of a <p>",
                "isAnswerKey": false
            },
            {
                "description": "font-weight should be written as 'font-weight:bold;'",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "116",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Given the following HTML snippet with a nested list, identify and fix the error causing improper rendering:\n```\n<ul>\n  <li>Home</li>\n  <li>About\n    <ul>\n      <li>Team</li>\n      <li>History</li>\n  </li>\n  <li>Contact</li>\n</ul>\n```",
        "options": [
            {
                "description": "The closing </ul> tag for the nested list is missing before the </li> tag",
                "isAnswerKey": true
            },
            {
                "description": "The <li> tags should be replaced with <div> tags",
                "isAnswerKey": false
            },
            {
                "description": "The outer <ul> tag should be closed inside the <li> element",
                "isAnswerKey": false
            },
            {
                "description": "The 'Contact' item should be nested within the last <ul>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "117",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following image tag and identify the error preventing the image from loading:\n```\n<img scr=\"logo.png\" alt=\"Company Logo\">\n```",
        "options": [
            {
                "description": "The 'alt' attribute is missing",
                "isAnswerKey": false
            },
            {
                "description": "The 'scr' attribute is misspelled; it should be 'src'",
                "isAnswerKey": true
            },
            {
                "description": "The image file name is incorrect",
                "isAnswerKey": false
            },
            {
                "description": "The tag should be self-closing with a '/' at the end",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "118",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following HTML form snippet. Identify the mistake that prevents the form from being submitted:\n```\n<form action=\"submit.html\" method=\"post\">\n  <input type=\"text\" name=\"username\">\n  <input type=\"button\" value=\"Submit\">\n</form>\n```",
        "options": [
            {
                "description": "The form is missing the 'name' attribute on the form tag",
                "isAnswerKey": false
            },
            {
                "description": "The input type for submitting should be 'submit' instead of 'button'",
                "isAnswerKey": true
            },
            {
                "description": "The action attribute value is incorrect",
                "isAnswerKey": false
            },
            {
                "description": "The method should be 'get' instead of 'post'",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "119",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following table markup. What accessibility issue is present in the code?\n```\n<table>\n  <tr>\n    <td>Header 1</td>\n    <td>Header 2</td>\n  </tr>\n  <tr>\n    <td>Data 1</td>\n    <td>Data 2</td>\n  </tr>\n</table>\n```",
        "options": [
            {
                "description": "The table lacks a caption",
                "isAnswerKey": false
            },
            {
                "description": "Header cells use <td> instead of <th>",
                "isAnswerKey": true
            },
            {
                "description": "The table is missing a summary attribute",
                "isAnswerKey": false
            },
            {
                "description": "The rows are not wrapped in a <tbody> element",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "120",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following iframe snippet intended to embed a YouTube video. Identify the error preventing the video from loading:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtub.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>\n```",
        "options": [
            {
                "description": "The iframe tag requires a closing </iframe> tag",
                "isAnswerKey": false
            },
            {
                "description": "The URL in the src attribute is misspelled; it should be 'youtube.com'",
                "isAnswerKey": true
            },
            {
                "description": "The width and height attributes are specified incorrectly",
                "isAnswerKey": false
            },
            {
                "description": "The allowfullscreen attribute is misused",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "121",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Given the following HTML document, what will be the rendered output in the browser?\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Test</title>\n  </head>\n  <body>\n    <p>Line 1<br>Line 2</p>\n  </body>\n</html>\n```",
        "options": [
            {
                "description": "The text 'Line 1 Line 2' on a single line",
                "isAnswerKey": false
            },
            {
                "description": "'Line 1' followed by a new line with 'Line 2'",
                "isAnswerKey": true
            },
            {
                "description": "The literal text 'Line 1<br>Line 2' is displayed",
                "isAnswerKey": false
            },
            {
                "description": "Only 'Line 1' is displayed",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "122",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the following HTML snippet. What behavior might occur on a mobile device due to the fixed width of the div?\n```\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <div style=\"width:500px; background-color:#ccc;\">Content</div>\n  </body>\n</html>\n```",
        "options": [
            {
                "description": "The div will scale down automatically to fit the screen",
                "isAnswerKey": false
            },
            {
                "description": "The div will maintain a width of 500px and may cause horizontal scrolling",
                "isAnswerKey": true
            },
            {
                "description": "The div will be hidden on smaller screens",
                "isAnswerKey": false
            },
            {
                "description": "The background color will not be rendered on mobile devices",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "123",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following HTML snippet. What is the display order of the elements when rendered in the browser?\n```\n<div>\n  <header>Header</header>\n  <section>\n    <article>Article 1</article>\n    <article>Article 2</article>\n  </section>\n  <footer>Footer</footer>\n</div>\n```",
        "options": [
            {
                "description": "Header, Footer, Article 1, Article 2",
                "isAnswerKey": false
            },
            {
                "description": "Header, Article 1, Article 2, Footer",
                "isAnswerKey": true
            },
            {
                "description": "Footer, Header, Article 1, Article 2",
                "isAnswerKey": false
            },
            {
                "description": "Article 1, Article 2, Header, Footer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "124",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following snippet designed for a modal dialog. What is the expected behavior if no CSS is applied to hide the modal by default?\n```\n<div id=\"modal\" style=\"position: fixed; top: 0; left: 0; width: 100%; height: 100%;\">\n  <div class=\"modal-content\">\n    <span class=\"close\">&times;</span>\n    <p>Modal Message</p>\n  </div>\n</div>\n```",
        "options": [
            {
                "description": "The modal will be hidden by default",
                "isAnswerKey": false
            },
            {
                "description": "The modal will be visible immediately, overlaying the page content",
                "isAnswerKey": true
            },
            {
                "description": "The modal will appear only after a user clicks a button",
                "isAnswerKey": false
            },
            {
                "description": "The modal will not render at all",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "125",
        "skill": "html",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet that uses a data attribute. What will be logged to the console when the function is invoked?\n```\n<html>\n  <body data-info=\"test\">\n    <script>\n      function getData() {\n        return document.body.getAttribute(\"data-info\");\n      }\n      console.log(getData());\n    </script>\n  </body>\n</html>\n```",
        "options": [
            {
                "description": "null",
                "isAnswerKey": false
            },
            {
                "description": "\"data-info\"",
                "isAnswerKey": false
            },
            {
                "description": "\"test\"",
                "isAnswerKey": true
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "126",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <p>Hello, World!</p>\n  </body>\n</html>\n```\nWhich tag is used to link an external stylesheet?",
        "options": [
            {
                "description": "<link>",
                "isAnswerKey": true
            },
            {
                "description": "<style>",
                "isAnswerKey": false
            },
            {
                "description": "<script>",
                "isAnswerKey": false
            },
            {
                "description": "<meta>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "127",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet:\n```\n<img src=\"logo.png\" alt=\"Company Logo\">\n```\nWhat is the main purpose of the alt attribute in the <img> tag?",
        "options": [
            {
                "description": "It provides alternative text if the image cannot be displayed.",
                "isAnswerKey": true
            },
            {
                "description": "It defines the image source.",
                "isAnswerKey": false
            },
            {
                "description": "It sets the image dimensions.",
                "isAnswerKey": false
            },
            {
                "description": "It links the image to a CSS style.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "128",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the meta tag in the snippet below:\n```\n<meta charset=\"UTF-8\">\n```\nWhat is the purpose of this meta tag?",
        "options": [
            {
                "description": "It defines the viewport settings.",
                "isAnswerKey": false
            },
            {
                "description": "It specifies the character encoding for the HTML document.",
                "isAnswerKey": true
            },
            {
                "description": "It links to an external stylesheet.",
                "isAnswerKey": false
            },
            {
                "description": "It indicates the document is written in HTML5.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "129",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review this script tag:\n```\n<script src=\"app.js\" defer></script>\n```\nWhat is the effect of the defer attribute?",
        "options": [
            {
                "description": "The script executes immediately as it is encountered.",
                "isAnswerKey": false
            },
            {
                "description": "The script’s execution is delayed until after the HTML document has been parsed.",
                "isAnswerKey": true
            },
            {
                "description": "The script is executed only when the user interacts with the page.",
                "isAnswerKey": false
            },
            {
                "description": "The script serves as a fallback for browsers that do not support JavaScript.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "130",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following snippet:\n```\n<a href=\"http://example.com\">Visit Example</a>\n```\nIn this anchor tag, what does the href attribute specify?",
        "options": [
            {
                "description": "It specifies the destination URL for the link.",
                "isAnswerKey": true
            },
            {
                "description": "It defines the tooltip text for the link.",
                "isAnswerKey": false
            },
            {
                "description": "It sets the text color of the link.",
                "isAnswerKey": false
            },
            {
                "description": "It attaches CSS styles to the link.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "131",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following HTML snippet for an input field:\n```\n<input type=\"text\" name=\"username\">\n```\nWhich of the following represents the correct HTML5 syntax for an input element?",
        "options": [
            {
                "description": "<input type=\"text\" name=\"username\"></input>",
                "isAnswerKey": false
            },
            {
                "description": "<input type=\"text\" name=\"username\" />",
                "isAnswerKey": false
            },
            {
                "description": "<input type=\"text\" name=\"username\">",
                "isAnswerKey": true
            },
            {
                "description": "<input type=\"text\" name=\"username\"></input></input>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "132",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the snippets below:\n```\n<!-- Option 1 -->\n<script href=\"app.js\"></script>\n\n<!-- Option 2 -->\n<script src=\"app.js\"></script>\n\n<!-- Option 3 -->\n<script name=\"app.js\"></script>\n```\nWhich option is the correct syntax for including an external JavaScript file?",
        "options": [
            {
                "description": "Option 1 is correct.",
                "isAnswerKey": false
            },
            {
                "description": "Option 2 is correct.",
                "isAnswerKey": true
            },
            {
                "description": "Option 3 is correct.",
                "isAnswerKey": false
            },
            {
                "description": "None of the above.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "133",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following HTML form:\n```\n<form action=\"/submit\" method=\"post\">\n  <input type=\"text\" name=\"username\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n```\nWhich attribute in the form tag indicates where the form data will be sent upon submission?",
        "options": [
            {
                "description": "action",
                "isAnswerKey": true
            },
            {
                "description": "method",
                "isAnswerKey": false
            },
            {
                "description": "enctype",
                "isAnswerKey": false
            },
            {
                "description": "target",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "134",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following comment style examples:\n```\n<!-- This is a comment -->\n```\n```\n/* This is a comment */\n```\n```\n<!-- This is a comment --->\n```\nWhich one correctly represents an HTML comment?",
        "options": [
            {
                "description": "`<!-- This is a comment -->`",
                "isAnswerKey": true
            },
            {
                "description": "`/* This is a comment */`",
                "isAnswerKey": false
            },
            {
                "description": "`<!-- This is a comment --->`",
                "isAnswerKey": false
            },
            {
                "description": "`// This is a comment`",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "135",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which of the following snippets correctly embeds a YouTube video using an iframe?\n```\n<iframe src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>\n```\n",
        "options": [
            {
                "description": "<iframe src=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"></iframe>",
                "isAnswerKey": false
            },
            {
                "description": "<iframe href=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"></iframe>",
                "isAnswerKey": false
            },
            {
                "description": "<iframe src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>",
                "isAnswerKey": true
            },
            {
                "description": "<iframe src=\"https://youtu.be/dQw4w9WgXcQ\"></iframe>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "136",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review this snippet:\n```\n<button onclick=\"submitForm()\">Submit</button>\n```\nWhich approach is more modular and maintainable than using an inline onclick handler?",
        "options": [
            {
                "description": "Attach an event listener via JavaScript’s addEventListener in an external script file.",
                "isAnswerKey": true
            },
            {
                "description": "Keep using inline event handlers for simplicity.",
                "isAnswerKey": false
            },
            {
                "description": "Embed the function call in multiple places within the HTML.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the event handler entirely.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "137",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following table snippet:\n```\n<table id=\"data-table\">\n  <thead>\n    <tr>\n      <th onclick=\"sortTable()\">Name</th>\n      <th onclick=\"sortTable()\">Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <!-- rows -->\n  </tbody>\n</table>\n```\nWhich change would improve the modularity of the sorting functionality?",
        "options": [
            {
                "description": "Replace inline onclick attributes with event listeners attached using JavaScript.",
                "isAnswerKey": true
            },
            {
                "description": "Duplicate the sortTable function for each table header.",
                "isAnswerKey": false
            },
            {
                "description": "Remove all interactive functionality from the table.",
                "isAnswerKey": false
            },
            {
                "description": "Embed the sorting logic directly within each <th> element.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "138",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following login form snippet with an inline event handler:\n```\n<form id=\"login-form\">\n  <input type=\"text\" name=\"username\">\n  <input type=\"password\" name=\"password\">\n  <button type=\"submit\">Login</button>\n</form>\n<script>\n  document.getElementById('login-form').onsubmit = function(e) {\n    e.preventDefault();\n    // login logic here\n  }\n</script>\n```\nHow can the code be refactored to improve modularity and reusability?",
        "options": [
            {
                "description": "Embed the login logic directly as an inline attribute.",
                "isAnswerKey": false
            },
            {
                "description": "Move the JavaScript code to an external file and bind the event using addEventListener.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the e.preventDefault call.",
                "isAnswerKey": false
            },
            {
                "description": "Assign separate event handlers for each input field.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "139",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider this snippet for toggling a menu:\n```\n<button onclick=\"toggleMenu()\">Menu</button>\n<div id=\"menu\" style=\"display: none;\">...</div>\n<script>\n  function toggleMenu() {\n    var menu = document.getElementById('menu');\n    menu.style.display = menu.style.display === 'none' ? 'block' : 'none';\n  }\n</script>\n```\nWhich modification would enhance modularity and separation of concerns in this code?",
        "options": [
            {
                "description": "Retain inline event handling and inline styles for simplicity.",
                "isAnswerKey": false
            },
            {
                "description": "Remove inline styles and attach the event listener via an external script while managing visibility with CSS classes.",
                "isAnswerKey": true
            },
            {
                "description": "Duplicate the toggleMenu function directly in the HTML.",
                "isAnswerKey": false
            },
            {
                "description": "Hardcode the display property in the HTML and avoid JavaScript.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "140",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following snippet for filtering a list:\n```\n<input type=\"text\" id=\"filter\" placeholder=\"Search...\">\n<ul id=\"list\">\n  <li>Apple</li>\n  <li>Banana</li>\n  <li>Cherry</li>\n</ul>\n<script>\n  document.getElementById('filter').addEventListener('input', function(e) {\n    var term = e.target.value.toLowerCase();\n    var items = document.getElementById('list').getElementsByTagName('li');\n    for (var i = 0; i < items.length; i++) {\n      items[i].style.display = items[i].textContent.toLowerCase().includes(term) ? '' : 'none';\n    }\n  });\n</script>\n```\nWhich refactoring step would best improve the modularity and reusability of the filtering logic?",
        "options": [
            {
                "description": "Convert the inline anonymous function into a named function in an external script file.",
                "isAnswerKey": true
            },
            {
                "description": "Hardcode the filter term directly in the HTML.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the event listener entirely.",
                "isAnswerKey": false
            },
            {
                "description": "Inline the filtering logic within the input element.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "141",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following snippet intended to log the alt attribute of an image:\n```\n<html>\n  <head>\n    <title>Test</title>\n  </head>\n  <body>\n    <img src=\"image.jpg\" alt=\"Image\">\n    <script>\n      var img = document.getElementById('image');\n      console.log(img.alt);\n    </script>\n  </body>\n</html>\n```\nWhy does this code fail to log the alt attribute?",
        "options": [
            {
                "description": "Because the img element is missing an id attribute that matches the JavaScript selector.",
                "isAnswerKey": true
            },
            {
                "description": "Because the alt attribute is not a valid JavaScript property.",
                "isAnswerKey": false
            },
            {
                "description": "Because the src attribute is specified incorrectly.",
                "isAnswerKey": false
            },
            {
                "description": "Because the script is written in the wrong section of the document.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "142",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review this snippet:\n```\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n  </head>\n  <body>\n    <div>\n      <p>Welcome!</p>\n    </div>\n    <footer>\n      <p>Footer content</p>\n    </footer>\n    <script>\n      var footer = document.getElementById('footer');\n      console.log(footer.textContent);\n    </script>\n  </body>\n</html>\n```\nWhy does the script fail to log the footer content?",
        "options": [
            {
                "description": "Because the footer element does not have an id attribute, so getElementById returns null.",
                "isAnswerKey": true
            },
            {
                "description": "Because the meta tag is misplaced in the document.",
                "isAnswerKey": false
            },
            {
                "description": "Because the div element interferes with the footer.",
                "isAnswerKey": false
            },
            {
                "description": "Because getElementById is no longer supported.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "143",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following code intended to change the text color on click:\n```\n<html>\n  <body>\n    <ul id=\"menu\">\n      <li>Home</li>\n      <li>About</li>\n      <li>Contact</li>\n    </ul>\n    <script>\n      var items = document.querySelectorAll('#menu li');\n      items.forEach(function(item) {\n         item.addEventListener('click', function() {\n            this.style.color = red;\n         });\n      });\n    </script>\n  </body>\n</html>\n```\nWhat is the error in the code?",
        "options": [
            {
                "description": "The color value red should be a string (e.g., 'red').",
                "isAnswerKey": true
            },
            {
                "description": "querySelectorAll should be replaced with querySelector.",
                "isAnswerKey": false
            },
            {
                "description": "The forEach method is not supported with querySelectorAll.",
                "isAnswerKey": false
            },
            {
                "description": "List items cannot have click event listeners attached.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "144",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review this anchor tag snippet intended to open a link in a new tab:\n```\n<html>\n  <body>\n    <a href=\"http://example.com\" target=\"blank\">Visit Example</a>\n  </body>\n</html>\n```\nWhy does the link not open in a new tab as expected?",
        "options": [
            {
                "description": "Because the target attribute value should be '_blank' (with an underscore).",
                "isAnswerKey": true
            },
            {
                "description": "Because the href attribute is missing the proper protocol.",
                "isAnswerKey": false
            },
            {
                "description": "Because the anchor tag is misconfigured.",
                "isAnswerKey": false
            },
            {
                "description": "Because a rel attribute is required to open in a new tab.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "145",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following snippet:\n```\n<html>\n  <head>\n    <style>\n      .hidden { display: none; }\n    </style>\n  </head>\n  <body>\n    <div id=\"content\" hidden>Content here</div>\n    <script>\n      var content = document.getElementById('content');\n      if (content.classList.contains('hidden')) {\n        content.removeAttribute('hidden');\n      }\n      console.log(content.style.display);\n    </script>\n  </body>\n</html>\n```\nWhy might the intended style change not reveal the element as expected?",
        "options": [
            {
                "description": "Because the element uses both the HTML hidden attribute and a CSS class, causing conflicting behaviors.",
                "isAnswerKey": true
            },
            {
                "description": "Because classList.contains is not supported in modern browsers.",
                "isAnswerKey": false
            },
            {
                "description": "Because removeAttribute is incorrectly used here.",
                "isAnswerKey": false
            },
            {
                "description": "Because console.log interferes with the style rendering.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "146",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following snippet with multiple buttons using inline event handlers:\n```\n<html>\n  <body>\n    <button onclick=\"handleClick(1)\">Button 1</button>\n    <button onclick=\"handleClick(2)\">Button 2</button>\n    <button onclick=\"handleClick(3)\">Button 3</button>\n    <script>\n      function handleClick(id) {\n         alert('Button ' + id + ' clicked!');\n      }\n    </script>\n  </body>\n</html>\n```\nWhich refactoring best improves DRY and maintainability?",
        "options": [
            {
                "description": "Attach event listeners using addEventListener in an external script after the DOM loads.",
                "isAnswerKey": true
            },
            {
                "description": "Duplicate the handleClick function for each button.",
                "isAnswerKey": false
            },
            {
                "description": "Inline the alert messages directly within each button element.",
                "isAnswerKey": false
            },
            {
                "description": "Remove all event handlers and rely on default browser behavior.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "147",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the snippet below which toggles a paragraph's text color:\n```\n<html>\n  <head>\n    <style>\n      .red { color: red; }\n      .green { color: green; }\n    </style>\n  </head>\n  <body>\n    <p id=\"text\" class=\"red\">This text changes color.</p>\n    <script>\n      function toggleColor() {\n        var element = document.getElementById('text');\n        if (element.classList.contains('red')) {\n          element.classList.remove('red');\n          element.classList.add('green');\n        } else {\n          element.classList.remove('green');\n          element.classList.add('red');\n        }\n      }\n      toggleColor();\n      toggleColor();\n    </script>\n  </body>\n</html>\n```\nAfter the two calls to toggleColor, what is the final color of the text and which coding practice does this demonstrate?",
        "options": [
            {
                "description": "The text remains red; the function encapsulates toggling logic, promoting code reuse and adherence to the DRY principle.",
                "isAnswerKey": true
            },
            {
                "description": "The text becomes green; the function is a pure function without side effects.",
                "isAnswerKey": false
            },
            {
                "description": "The text remains red; the function unnecessarily duplicates code.",
                "isAnswerKey": false
            },
            {
                "description": "The text becomes green; the function fails to separate concerns.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "148",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following snippet intended for displaying an image:\n```\n<html>\n  <body>\n    <img src=\"photo.jpg\">\n  </body>\n</html>\n```\nWhat modification best follows good coding practices to improve accessibility?",
        "options": [
            {
                "description": "Add an alt attribute with descriptive text to the <img> tag.",
                "isAnswerKey": true
            },
            {
                "description": "Add a title attribute to the <img> tag.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the <img> tag in a <figure> element.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the <img> tag from the document.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "149",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine this snippet with an inline onclick handler:\n```\n<html>\n  <body>\n    <button id=\"btn\" onclick=\"document.getElementById('msg').innerHTML='Hello!'\">Click Me</button>\n    <p id=\"msg\"></p>\n  </body>\n</html>\n```\nWhich refactoring change would best improve code clarity and maintainability?",
        "options": [
            {
                "description": "Remove the inline onclick attribute and bind the click event to the button via an external script.",
                "isAnswerKey": true
            },
            {
                "description": "Inline more JavaScript directly within the button element.",
                "isAnswerKey": false
            },
            {
                "description": "Add a second inline onclick attribute to the paragraph.",
                "isAnswerKey": false
            },
            {
                "description": "Change the button element to a div.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "150",
        "skill": "html",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following snippet with duplicate header sections:\n```\n<html>\n  <body>\n    <div id=\"header\">\n      <h1>Title</h1>\n    </div>\n    <div id=\"header\">\n      <h1>Title</h1>\n    </div>\n  </body>\n</html>\n```\nWhat is the primary issue with this code, and how does refactoring it demonstrate a good coding practice?",
        "options": [
            {
                "description": "Duplicate IDs cause conflicts in the DOM; refactoring by using unique IDs or a single component adheres to the DRY principle.",
                "isAnswerKey": true
            },
            {
                "description": "The <h1> tag is misused and should be replaced with a <p> tag.",
                "isAnswerKey": false
            },
            {
                "description": "The div tags should be replaced with <section> tags for semantic accuracy.",
                "isAnswerKey": false
            },
            {
                "description": "Duplicating the header improves emphasis and readability.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "151",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet:\n```\n<video width=\"320\" height=\"240\" controls>\n  <source src=\"movie.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n```\n\nWhat is the purpose of the 'controls' attribute in the video tag?",
        "options": [
            {
                "description": "It disables all browser playback controls.",
                "isAnswerKey": false
            },
            {
                "description": "It displays the default video playback controls.",
                "isAnswerKey": true
            },
            {
                "description": "It loads a custom control library automatically.",
                "isAnswerKey": false
            },
            {
                "description": "It sets the playback speed of the video.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "152",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following HTML snippet:\n```\n<a href=\"https://example.com\" target=\"_blank\">Visit Example</a>\n```\n\nWhat functionality does the target=\"_blank\" attribute provide?",
        "options": [
            {
                "description": "It opens the link in the current tab.",
                "isAnswerKey": false
            },
            {
                "description": "It opens the link in a new window or tab.",
                "isAnswerKey": true
            },
            {
                "description": "It prevents the link from being followed.",
                "isAnswerKey": false
            },
            {
                "description": "It displays the link without any underline.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "153",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following HTML input element:\n```\n<input type=\"text\" name=\"username\" required>\n```\n\nWhat is the effect of the 'required' attribute?",
        "options": [
            {
                "description": "It provides default placeholder text.",
                "isAnswerKey": false
            },
            {
                "description": "It makes the field optional during form submission.",
                "isAnswerKey": false
            },
            {
                "description": "It forces the user to fill out the field before submitting the form.",
                "isAnswerKey": true
            },
            {
                "description": "It auto-fills the input with a predefined value.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "154",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet:\n```\n<link rel=\"stylesheet\" href=\"styles.css\">\n<script src=\"app.js\" defer></script>\n```\n\nWhat is the function of the 'defer' attribute in the script tag?",
        "options": [
            {
                "description": "It loads the script asynchronously without blocking HTML parsing.",
                "isAnswerKey": false
            },
            {
                "description": "It delays script execution until after the HTML document has been fully parsed.",
                "isAnswerKey": true
            },
            {
                "description": "It prevents the script from executing until a user interaction.",
                "isAnswerKey": false
            },
            {
                "description": "It immediately executes the script as soon as it is encountered.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "155",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following HTML document structure:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Test</title>\n  </head>\n  <body>\n    <p>Sample text</p>\n  </body>\n</html>\n```\n\nWhat is the significance of the lang=\"en\" attribute in the <html> tag?",
        "options": [
            {
                "description": "It sets the text encoding to English.",
                "isAnswerKey": false
            },
            {
                "description": "It informs browsers and assistive technologies that the document is in English.",
                "isAnswerKey": true
            },
            {
                "description": "It automatically applies English styling rules.",
                "isAnswerKey": false
            },
            {
                "description": "It loads English language packages for additional fonts.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "156",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet for a navigation bar:\n```\n<div id=\"navbar\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/contact\">Contact</a></li>\n  </ul>\n</div>\n```\n\nWhich change would improve its semantic structure and accessibility?",
        "options": [
            {
                "description": "Replace the <div> with a <header> element.",
                "isAnswerKey": false
            },
            {
                "description": "Replace the <div> with a <nav> element.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the id attribute for cleaner code.",
                "isAnswerKey": false
            },
            {
                "description": "Add inline styles to visually reformat the navigation.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "157",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following SVG snippet:\n```\n<svg width=\"24\" height=\"24\">\n  <use xlink:href=\"#icon-search\"></use>\n</svg>\n```\n\nWhat is the purpose of the <use> element in this SVG?",
        "options": [
            {
                "description": "It defines a new SVG graphic.",
                "isAnswerKey": false
            },
            {
                "description": "It reuses an existing SVG graphic defined elsewhere.",
                "isAnswerKey": true
            },
            {
                "description": "It applies animation to the SVG.",
                "isAnswerKey": false
            },
            {
                "description": "It specifies the fill color for the SVG element.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "158",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Compare the implementations below for an email input field:\n\nImplementation A:\n```\n<input type=\"email\" name=\"userEmail\">\n```\n\nImplementation B:\n```\n<input type=\"email\" name=\"userEmail\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\">\n```\n\nWhich implementation offers enhanced validation?",
        "options": [
            {
                "description": "Implementation A",
                "isAnswerKey": false
            },
            {
                "description": "Implementation B",
                "isAnswerKey": true
            },
            {
                "description": "Both are functionally equivalent.",
                "isAnswerKey": false
            },
            {
                "description": "Neither provides any additional validation.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "159",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following HTML snippet for an image element:\n```\n<img src=\"photo.jpg\" alt=\"\">\n```\n\nWhat improvement is recommended to enhance accessibility?",
        "options": [
            {
                "description": "Remove the alt attribute entirely.",
                "isAnswerKey": false
            },
            {
                "description": "Add a descriptive alt text that conveys the image content.",
                "isAnswerKey": true
            },
            {
                "description": "Change the src attribute to a more descriptive filename.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the image in a <figure> element.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "160",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet using data attributes:\n```\n<div data-toggle=\"dropdown\" class=\"dropdown\">\n  Dropdown Content\n</div>\n```\n\nWhat is one primary advantage of using data attributes in HTML?",
        "options": [
            {
                "description": "They directly apply CSS styling without extra classes.",
                "isAnswerKey": false
            },
            {
                "description": "They allow storage of custom data accessible via JavaScript without affecting the layout.",
                "isAnswerKey": true
            },
            {
                "description": "They enforce strict type-checking in the HTML document.",
                "isAnswerKey": false
            },
            {
                "description": "They automatically trigger interactive dropdown behavior.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "161",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following two-file setup for a webpage:\n\nHTML file:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Page</title>\n  <script src=\"app.js\"></script>\n</head>\n<body>\n  <div id=\"content\"></div>\n</body>\n</html>\n```\n\napp.js:\n```\ndocument.getElementById('content').innerHTML = \"Hello, World!\";\n```\n\nIf the content is not updated as expected, what is the most likely issue?",
        "options": [
            {
                "description": "The div id is misspelled in the HTML file.",
                "isAnswerKey": false
            },
            {
                "description": "The script runs before the DOM is fully parsed.",
                "isAnswerKey": true
            },
            {
                "description": "The JavaScript file is missing from the server.",
                "isAnswerKey": false
            },
            {
                "description": "The browser does not support the innerHTML property.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "162",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following multi-file setup for form validation:\n\nHTML file:\n```\n<!DOCTYPE html>\n<html>\n<body>\n  <form id=\"login-form\">\n    <input type=\"text\" id=\"username\">\n    <button type=\"submit\">Login</button>\n  </form>\n  <script src=\"validate.js\"></script>\n</body>\n</html>\n```\n\nvalidate.js:\n```\ndocument.getElementById('loginForm').addEventListener('submit', function(e) {\n  if (document.getElementById('username').value === '') {\n    alert('Username required');\n    e.preventDefault();\n  }\n});\n```\n\nWhy is the form validation not functioning correctly?",
        "options": [
            {
                "description": "The event listener is attached to the wrong form id due to a naming mismatch.",
                "isAnswerKey": true
            },
            {
                "description": "The input type should be 'text' instead of 'email'.",
                "isAnswerKey": false
            },
            {
                "description": "The preventDefault method is used inappropriately.",
                "isAnswerKey": false
            },
            {
                "description": "The script tag should be placed in the head section.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "163",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the following code for embedding external content:\n\nHTML file:\n```\n<!DOCTYPE html>\n<html>\n<body>\n  <iframe src=\"content.html\" width=\"600\" height=\"400\"></iframe>\n</body>\n</html>\n```\n\ncontent.html:\n```\n<!DOCTYPE html>\n<html>\n<body>\n  <p>Embedded Content</p>\n</body>\n</html>\n```\n\nIf the iframe does not scale well on different devices, what improvement can be made?",
        "options": [
            {
                "description": "Replace the iframe with an image element.",
                "isAnswerKey": false
            },
            {
                "description": "Use responsive attributes or CSS (e.g., percentages or media queries) to allow scalable dimensions.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the width and height attributes completely.",
                "isAnswerKey": false
            },
            {
                "description": "Switch the iframe to a <div> element for better responsiveness.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "164",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following two-file project where CSS is not applied as expected:\n\nHTML file:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <p>Hello world</p>\n  </div>\n</body>\n</html>\n```\n\nstyle.css:\n```\n.contaner {\n  padding: 20px;\n  background: #f0f0f0;\n}\n```\n\nWhat is causing the styling issue?",
        "options": [
            {
                "description": "There is an error with the CSS property names.",
                "isAnswerKey": false
            },
            {
                "description": "A typo in the CSS class name ('.contaner' instead of '.container').",
                "isAnswerKey": true
            },
            {
                "description": "The HTML file is missing a proper DOCTYPE declaration.",
                "isAnswerKey": false
            },
            {
                "description": "The <link> tag is placed in the body instead of the head.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "165",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following code setup:\n\nHTML file:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Test</title>\n</head>\n<body>\n  <p id=\"text\">Old Text</p>\n  <script src=\"update.js\"></script>\n</body>\n</html>\n```\n\nupdate.js:\n```\ndocument.getElementById(\"txt\").innerText = \"New Text\";\n```\n\nWhy is the paragraph text not updating as expected?",
        "options": [
            {
                "description": "The script file 'update.js' is not correctly linked.",
                "isAnswerKey": false
            },
            {
                "description": "The element id referenced in the script ('txt') does not match the actual id ('text') in the HTML.",
                "isAnswerKey": true
            },
            {
                "description": "The <p> tag is not a valid HTML element.",
                "isAnswerKey": false
            },
            {
                "description": "The innerText property is not supported in this browser.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "166",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following HTML snippet with inline styles:\n```\n<div style=\"margin: 10px; padding: 5px; background-color: #fff;\">\n  <p style=\"font-size: 14px; color: #333;\">Content</p>\n</div>\n```\n\nWhich refactoring approach would improve maintainability?",
        "options": [
            {
                "description": "Keep inline styles for faster rendering.",
                "isAnswerKey": false
            },
            {
                "description": "Move all inline styles to an external CSS file using classes.",
                "isAnswerKey": true
            },
            {
                "description": "Increase the use of inline styles to override external CSS.",
                "isAnswerKey": false
            },
            {
                "description": "Embed CSS within a <style> tag in the body.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "167",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following HTML snippet using a table for layout:\n```\n<table width=\"100%\">\n  <tr>\n    <td width=\"50%\">Left Content</td>\n    <td width=\"50%\">Right Content</td>\n  </tr>\n</table>\n```\n\nWhat refactoring would modernize this layout for enhanced responsiveness and semantics?",
        "options": [
            {
                "description": "Retain the table layout but remove width attributes.",
                "isAnswerKey": false
            },
            {
                "description": "Replace the table with <div> elements styled using CSS Flexbox.",
                "isAnswerKey": true
            },
            {
                "description": "Use inline-block elements inside the table cells.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the table in a responsive <section> element.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "168",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the markup for a navigation menu below:\n```\n<ul>\n  <li><a href=\"/home\" style=\"color: blue;\">Home</a></li>\n  <li><a href=\"/about\" style=\"color: blue;\">About</a></li>\n  <li><a href=\"/contact\" style=\"color: blue;\">Contact</a></li>\n</ul>\n```\n\nWhat refactoring is recommended to improve reusability and maintainability?",
        "options": [
            {
                "description": "Replace the <ul> element with a <nav> element.",
                "isAnswerKey": false
            },
            {
                "description": "Move the inline styles to an external CSS class applied to the <a> tags.",
                "isAnswerKey": true
            },
            {
                "description": "Duplicate the inline styles in each menu item for clarity.",
                "isAnswerKey": false
            },
            {
                "description": "Integrate JavaScript to dynamically apply the styles.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "169",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following HTML form snippet:\n```\n<form>\n  <label>Name: <input type=\"text\" name=\"name\"></label><br>\n  <label>Email: <input type=\"email\" name=\"email\"></label><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\nWhat change would enhance accessibility and maintainability?",
        "options": [
            {
                "description": "Remove the <br> tags and let the browser handle spacing automatically.",
                "isAnswerKey": false
            },
            {
                "description": "Associate each <label> with its corresponding input using the 'for' attribute and matching ids.",
                "isAnswerKey": true
            },
            {
                "description": "Wrap each input in a <div> without modifying the labels.",
                "isAnswerKey": false
            },
            {
                "description": "Add inline CSS to improve the layout.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "170",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Inspect the following head section in an HTML document:\n```\n<head>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <meta charset=\"UTF-8\">\n</head>\n```\n\nWhat is the recommended refactoring step to optimize this code?",
        "options": [
            {
                "description": "Remove one of the duplicate meta viewport tags.",
                "isAnswerKey": true
            },
            {
                "description": "Change the charset value to 'UTF-16'.",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate the charset meta tag for redundancy.",
                "isAnswerKey": false
            },
            {
                "description": "Add additional meta tags for mobile optimization.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "171",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following custom web component definition:\n```\n<template id=\"my-card\">\n  <style>\n    .card { border: 1px solid #ccc; padding: 16px; }\n  </style>\n  <div class=\"card\">\n    <h3></h3>\n    <p></p>\n  </div>\n</template>\n\n<script>\n  class MyCard extends HTMLElement {\n    constructor() {\n      super();\n      const template = document.getElementById('my-card').content;\n      this.attachShadow({ mode: 'open' }).appendChild(template.cloneNode(true));\n    }\n    connectedCallback() {\n      this.shadowRoot.querySelector('h3').innerText = this.getAttribute('title') || 'Default Title';\n      this.shadowRoot.querySelector('p').innerText = this.getAttribute('content') || 'Default Content';\n    }\n  }\n  customElements.define('my-card', MyCard);\n</script>\n```\n\nHow does this component exemplify a reusable design pattern in HTML?",
        "options": [
            {
                "description": "It mixes content and styling in the global scope.",
                "isAnswerKey": false
            },
            {
                "description": "It encapsulates structure, styles, and behavior using Shadow DOM, enabling reuse across the application.",
                "isAnswerKey": true
            },
            {
                "description": "It requires multiple modifications for each individual use.",
                "isAnswerKey": false
            },
            {
                "description": "It prevents dynamic updates by hardcoding content.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "172",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following dashboard layout using web components:\n```\n<dashboard-layout>\n  <metrics-widget data-source=\"metrics.json\"></metrics-widget>\n  <activity-feed data-source=\"feed.json\"></activity-feed>\n  <notification-panel data-source=\"notifications.json\"></notification-panel>\n</dashboard-layout>\n```\n\nWhich design principle is illustrated by this structure?",
        "options": [
            {
                "description": "Tight coupling of all page elements.",
                "isAnswerKey": false
            },
            {
                "description": "Component-based design with encapsulation and reusability.",
                "isAnswerKey": true
            },
            {
                "description": "A monolithic architecture with no separation of concerns.",
                "isAnswerKey": false
            },
            {
                "description": "Reliance on inline styling for component interactions.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "173",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review this modal dialog implementation:\n```\n<button id=\"openModal\">Open Modal</button>\n<dialog id=\"myDialog\">\n  <p>Modal Content</p>\n  <button id=\"closeModal\">Close</button>\n</dialog>\n<script>\n  const dialog = document.getElementById('myDialog');\n  document.getElementById('openModal').addEventListener('click', () => dialog.showModal());\n  document.getElementById('closeModal').addEventListener('click', () => dialog.close());\n</script>\n```\n\nHow can this modal component be further enhanced for reusability and scalability?",
        "options": [
            {
                "description": "By converting it into a custom web component with configurable attributes and internal encapsulation using Shadow DOM.",
                "isAnswerKey": true
            },
            {
                "description": "By removing the <dialog> element to simplify the structure.",
                "isAnswerKey": false
            },
            {
                "description": "By using inline JavaScript to hardcode functionality for each instance.",
                "isAnswerKey": false
            },
            {
                "description": "By solely relying on external libraries for modal behavior.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "174",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following HTML template:\n```\n<template id=\"content-template\">\n  <article>\n    <header><h2></h2></header>\n    <section></section>\n    <footer></footer>\n  </article>\n</template>\n```\n\nWhich design pattern best describes the method of cloning and inserting this template into the DOM for dynamic content rendering?",
        "options": [
            {
                "description": "Factory Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Decorator Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "175",
        "skill": "html",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Evaluate the following snippet that leverages HTML imports for component reuse:\n```\n<link rel=\"import\" href=\"header.html\">\n<div class=\"content\">\n  <p>Main content here</p>\n</div>\n<link rel=\"import\" href=\"footer.html\">\n```\n\nWhat is the primary architectural benefit of using HTML imports (or similar component inclusion techniques) in a large-scale web application?",
        "options": [
            {
                "description": "It directly improves SEO rankings.",
                "isAnswerKey": false
            },
            {
                "description": "It accelerates image rendering on the page.",
                "isAnswerKey": false
            },
            {
                "description": "It facilitates modularity and separation of concerns by encapsulating reusable components.",
                "isAnswerKey": true
            },
            {
                "description": "It automatically applies unique styling to each component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "176",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following code snippet:\n```\n<html>\n  <head>\n    <title>Page Title</title>\n  </head>\n  <body>\n    <div id=\"content\">\n      <h1>Welcome</h1>\n      <p>This is a sample page.</p>\n    </div>\n  </body>\n</html>\n```\nWhich HTML5 semantic element would be most appropriate to replace the `<div id=\"content\">` in order to improve the document structure?",
        "options": [
            {
                "description": "<section>",
                "isAnswerKey": false
            },
            {
                "description": "<main>",
                "isAnswerKey": true
            },
            {
                "description": "<article>",
                "isAnswerKey": false
            },
            {
                "description": "<aside>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "177",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following snippet:\n```\n<figure>\n  <img src=\"scenery.jpg\" alt=\"A beautiful scenery\">\n  <figcaption>A beautiful scenery</figcaption>\n</figure>\n```\nWhat best describes the purpose of the `<figure>` element in HTML5?",
        "options": [
            {
                "description": "It groups navigation links together.",
                "isAnswerKey": false
            },
            {
                "description": "It is used for self-contained content, often with an optional caption, that can be moved independently.",
                "isAnswerKey": true
            },
            {
                "description": "It defines a section of highlighted text.",
                "isAnswerKey": false
            },
            {
                "description": "It is a container for tabular data.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "178",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following HTML snippet:\n```\n<div id=\"header\">\n  <h1>Site Title</h1>\n</div>\n```\nWhich HTML5 element would be semantically more appropriate to replace `<div id=\"header\">`?",
        "options": [
            {
                "description": "<header>",
                "isAnswerKey": true
            },
            {
                "description": "<footer>",
                "isAnswerKey": false
            },
            {
                "description": "<nav>",
                "isAnswerKey": false
            },
            {
                "description": "<section>",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "179",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the code snippet below:\n```\n<p>Please click <b>here</b> to continue.</p>\n```\nWhat is the primary difference between the `<b>` and `<strong>` tags in HTML5?",
        "options": [
            {
                "description": "`<b>` applies bold formatting without conveying extra importance, whereas `<strong>` indicates that its contents have strong importance.",
                "isAnswerKey": true
            },
            {
                "description": "Both tags convey the same meaning; they are completely interchangeable.",
                "isAnswerKey": false
            },
            {
                "description": "`<b>` is used for emphasis while `<strong>` is only for styling.",
                "isAnswerKey": false
            },
            {
                "description": "There is no visual difference between the two.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "180",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following HTML snippet for a navigation element:\n```\n<nav>\n  <ul>\n    <li><a href=\"/home\">Home</a></li>\n    <li><a href=\"/about\">About</a></li>\n  </ul>\n</nav>\n```\nWhich enhancement would further improve the accessibility of this navigation structure?",
        "options": [
            {
                "description": "Adding a `data-nav` attribute.",
                "isAnswerKey": false
            },
            {
                "description": "Including an `aria-label` attribute (e.g., `aria-label=\"Main Navigation\"`).",
                "isAnswerKey": true
            },
            {
                "description": "Introducing a `<header>` element inside `<nav>`.",
                "isAnswerKey": false
            },
            {
                "description": "Embedding inline styles for visual cues.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "181",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following HTML snippet that loads a JavaScript file synchronously:\n```\n<html>\n  <head>\n    <script src=\"app.js\"></script>\n  </head>\n  <body>\n    <!-- content -->\n  </body>\n</html>\n```\nWhich attribute should be added to the `<script>` tag to minimize render-blocking without compromising script execution order (when DOM access is required)?",
        "options": [
            {
                "description": "async",
                "isAnswerKey": false
            },
            {
                "description": "defer",
                "isAnswerKey": true
            },
            {
                "description": "module",
                "isAnswerKey": false
            },
            {
                "description": "noModule",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "182",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Inspect the following HTML snippet:\n```\n<img src=\"photo.jpg\">\n```\nWhat modification should be made to adhere to web accessibility standards?",
        "options": [
            {
                "description": "Add a `title` attribute.",
                "isAnswerKey": false
            },
            {
                "description": "Add an `alt` attribute describing the image.",
                "isAnswerKey": true
            },
            {
                "description": "Wrap the image in a `<figure>` element.",
                "isAnswerKey": false
            },
            {
                "description": "Change the `<img>` tag to a `<picture>` tag.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "183",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following code snippet using an inline event handler:\n```\n<button onclick=\"alert('Clicked!')\">Click Me</button>\n```\nWhat is a primary drawback of using inline event handlers like this in production code?",
        "options": [
            {
                "description": "They improve code maintainability.",
                "isAnswerKey": false
            },
            {
                "description": "They couple behavior with markup, reducing maintainability and potentially exposing security risks.",
                "isAnswerKey": true
            },
            {
                "description": "They ensure cross-browser compatibility.",
                "isAnswerKey": false
            },
            {
                "description": "They enforce strict separation of concerns.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "184",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review this HTML snippet:\n```\n<iframe src=\"external.html\"></iframe>\n```\nWhich attribute, when added to the `<iframe>` tag, would enhance security by restricting the framed content?",
        "options": [
            {
                "description": "referrerpolicy",
                "isAnswerKey": false
            },
            {
                "description": "sandbox",
                "isAnswerKey": true
            },
            {
                "description": "loading",
                "isAnswerKey": false
            },
            {
                "description": "srcdoc",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "185",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following code snippet:\n```\n<html>\n  <head>\n    <script>\n      document.getElementById('myDiv').style.color = 'red';\n    </script>\n  </head>\n  <body>\n    <div id=\"myDiv\">Hello</div>\n  </body>\n</html>\n```\nWhat is the likely issue with this code in a production environment?",
        "options": [
            {
                "description": "The script incorrectly targets the element before it exists in the DOM, leading to a null reference error.",
                "isAnswerKey": true
            },
            {
                "description": "The inline script causes a blocking CSS download.",
                "isAnswerKey": false
            },
            {
                "description": "There is a conflict between the script and external libraries.",
                "isAnswerKey": false
            },
            {
                "description": "The element ID is not unique, causing unpredictable styling.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "186",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following code snippet that defines a custom element using the Shadow DOM:\n```\n<template id=\"my-element-template\">\n  <style>\n    p { color: blue; }\n  </style>\n  <p><slot></slot></p>\n</template>\n\n<script>\n  class MyElement extends HTMLElement {\n    constructor() {\n      super();\n      const template = document.getElementById('my-element-template');\n      const templateContent = template.content;\n      const shadowRoot = this.attachShadow({mode: 'open'});\n      shadowRoot.appendChild(templateContent.cloneNode(true));\n    }\n  }\n  customElements.define('my-element', MyElement);\n</script>\n```\nWhat is the correct way to instantiate and use this custom element in the HTML body?",
        "options": [
            {
                "description": "By including `<div is=\"my-element\">Content</div>` in the body.",
                "isAnswerKey": false
            },
            {
                "description": "By writing `<my-element>Content</my-element>` in the body.",
                "isAnswerKey": true
            },
            {
                "description": "By calling `new MyElement()` directly in the HTML.",
                "isAnswerKey": false
            },
            {
                "description": "By including `<template id=\"my-element\">Content</template>` in the body.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "187",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following snippet using Microdata:\n```\n<div itemscope itemtype=\"http://schema.org/Person\">\n  <span itemprop=\"name\">John Doe</span>\n  <span itemprop=\"jobTitle\">Software Engineer</span>\n</div>\n```\nWhich attribute in the snippet defines the type of the item for semantic enrichment?",
        "options": [
            {
                "description": "itemscope",
                "isAnswerKey": false
            },
            {
                "description": "itemtype",
                "isAnswerKey": true
            },
            {
                "description": "itemprop",
                "isAnswerKey": false
            },
            {
                "description": "data-type",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "188",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following code snippet for responsive images:\n```\n<picture>\n  <source media=\"(min-width: 800px)\" srcset=\"large.jpg\">\n  <source media=\"(min-width: 400px)\" srcset=\"medium.jpg\">\n  <img src=\"small.jpg\" alt=\"A scenic view\">\n</picture>\n```\nIn this `<picture>` element, which tag serves as the fallback for browsers that do not support the `<picture>` element?",
        "options": [
            {
                "description": "The first `<source>` element.",
                "isAnswerKey": false
            },
            {
                "description": "The `<img>` element.",
                "isAnswerKey": true
            },
            {
                "description": "The `<picture>` element itself.",
                "isAnswerKey": false
            },
            {
                "description": "None; the image will not display.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "189",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the following semantic HTML used for a blog post:\n```\n<article>\n  <header>\n    <h2>Post Title</h2>\n    <p>By Author</p>\n  </header>\n  <section>\n    <p>Content of the blog post...</p>\n  </section>\n  <footer>\n    <p>Posted on 2023-10-01</p>\n  </footer>\n</article>\n```\nWhich modification would best improve both SEO and accessibility?",
        "options": [
            {
                "description": "Replace the publication date `<p>` with a `<time>` element that includes a proper datetime attribute.",
                "isAnswerKey": true
            },
            {
                "description": "Insert a `<meta>` tag inside the `<article>` element.",
                "isAnswerKey": false
            },
            {
                "description": "Use `<div>` elements instead of semantic tags.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the entire article in a `<section>` for additional context.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "190",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "A development team is designing a reusable blog component. They want the main content to be dynamically injected while maintaining semantic HTML. Which of the following best describes how to achieve this using the `<slot>` element in a Web Component?",
        "options": [
            {
                "description": "Hard-code the content inside the shadow DOM.",
                "isAnswerKey": false
            },
            {
                "description": "Place `<slot></slot>` in the shadow DOM to allow light DOM content to be projected into the component.",
                "isAnswerKey": true
            },
            {
                "description": "Replace `<slot>` with `<div>` for better styling.",
                "isAnswerKey": false
            },
            {
                "description": "Use JavaScript to replace the `<slot>` element at runtime.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "191",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following duplicated navigation sections within an HTML file:\n```\n<div class=\"nav\">\n  <ul>\n    <li><a href=\"/home\">Home</a></li>\n    <li><a href=\"/about\">About</a></li>\n    <li><a href=\"/contact\">Contact</a></li>\n  </ul>\n</div>\n<div class=\"nav\">\n  <ul>\n    <li><a href=\"/home\">Home</a></li>\n    <li><a href=\"/about\">About</a></li>\n    <li><a href=\"/contact\">Contact</a></li>\n  </ul>\n</div>\n```\nWhich refactoring technique would best improve maintainability in this scenario?",
        "options": [
            {
                "description": "Manually remove one of the duplicate sections.",
                "isAnswerKey": false
            },
            {
                "description": "Extract the navigation into a reusable component or template.",
                "isAnswerKey": true
            },
            {
                "description": "Rename the CSS classes to differentiate them.",
                "isAnswerKey": false
            },
            {
                "description": "Inline the styles to reduce dependency on external files.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "192",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following HTML snippet that makes heavy use of inline styles:\n```\n<div style=\"color: red; font-size: 16px;\">Text</div>\n<div style=\"color: red; font-size: 16px;\">More text</div>\n```\nWhat refactoring strategy would best improve performance and maintainability?",
        "options": [
            {
                "description": "Convert inline styles into external CSS classes and apply those classes to the elements.",
                "isAnswerKey": true
            },
            {
                "description": "Increase the specificity of the inline styles.",
                "isAnswerKey": false
            },
            {
                "description": "Embed all styles directly within the HTML using `<style>` tags in each element.",
                "isAnswerKey": false
            },
            {
                "description": "Retain inline styles but add more inline JavaScript to manage state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "193",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine this legacy HTML snippet that uses outdated tags:\n```\n<center>\n  <font color=\"blue\">Welcome</font>\n</center>\n```\nWhat is the recommended refactoring approach to modernize this code?",
        "options": [
            {
                "description": "Replace the `<center>` and `<font>` tags with CSS-based styling and semantic HTML elements.",
                "isAnswerKey": true
            },
            {
                "description": "Wrap the existing code in a `<div>` with the same inline styles.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the tags to their modern equivalents `<header>` and `<strong>`.",
                "isAnswerKey": false
            },
            {
                "description": "Retain the code to ensure backward compatibility with older browsers.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "194",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Analyze the following HTML snippet that uses inline event handlers:\n```\n<ul>\n  <li onclick=\"selectItem(this)\">Item 1</li>\n  <li onclick=\"selectItem(this)\">Item 2</li>\n  <li onclick=\"selectItem(this)\">Item 3</li>\n</ul>\n```\nWhich refactoring approach would best decouple behavior from markup?",
        "options": [
            {
                "description": "Attach the event listeners via JavaScript using methods like `addEventListener`.",
                "isAnswerKey": true
            },
            {
                "description": "Keep using inline event handlers for simplicity.",
                "isAnswerKey": false
            },
            {
                "description": "Embed all event logic in the HTML using data attributes.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the event handlers and hard-code the behavior in CSS.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "195",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following code snippet that mixes content and presentation:\n```\n<div class=\"post\">\n  <h2 style=\"font-size: 24px;\">Title</h2>\n  <p style=\"line-height: 1.6;\">Content</p>\n</div>\n```\nWhat is the best refactoring strategy to enhance code reusability and readability?",
        "options": [
            {
                "description": "Move all inline styles to an external CSS file and assign semantic classes to the elements.",
                "isAnswerKey": true
            },
            {
                "description": "Merge the `<h2>` and `<p>` elements into a single tag.",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate the inline styles in a separate `<style>` block in the same document.",
                "isAnswerKey": false
            },
            {
                "description": "Embed inline JavaScript to handle styling dynamically.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "196",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "A multinational development team is facing issues due to inconsistent HTML markup patterns across projects, which negatively impacts accessibility and SEO. Consider the following inconsistent components:\n```\n<!-- Component A -->\n<div class=\"header\">\n  <h1>Welcome</h1>\n</div>\n\n<!-- Component B -->\n<header>\n  <h1>Welcome</h1>\n</header>\n```\nWhat systemic strategy would best address these consistency issues?",
        "options": [
            {
                "description": "Rely solely on manual code reviews to catch inconsistencies.",
                "isAnswerKey": false
            },
            {
                "description": "Implement a linting tool and adopt a comprehensive HTML style guide across the team.",
                "isAnswerKey": true
            },
            {
                "description": "Allow each team to maintain their own coding standards independently.",
                "isAnswerKey": false
            },
            {
                "description": "Remove semantic elements entirely to simplify the markup.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "197",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following server-side generated HTML that intermingles business logic with markup:\n```\n<html>\n  <head>\n    <title><?php echo $pageTitle; ?></title>\n  </head>\n  <body>\n    <?php if($userLoggedIn): ?>\n      <div>Welcome, <?php echo $username; ?></div>\n    <?php else: ?>\n      <div>Please log in.</div>\n    <?php endif; ?>\n  </body>\n</html>\n```\nWhich architectural improvement would most effectively enforce separation of concerns in this scenario?",
        "options": [
            {
                "description": "Adopt a templating engine that separates logic from presentation.",
                "isAnswerKey": true
            },
            {
                "description": "Embed additional PHP code directly into the HTML.",
                "isAnswerKey": false
            },
            {
                "description": "Increase the use of inline styles and scripts.",
                "isAnswerKey": false
            },
            {
                "description": "Hard-code static content to avoid dynamic logic.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "198",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "A project using Web Components faces widespread inconsistencies in shadow DOM usage. Consider the following two component definitions:\n```\n<!-- Component using open shadow DOM -->\n<script>\n  class OpenComponent extends HTMLElement {\n    constructor() {\n      super();\n      this.attachShadow({ mode: 'open' });\n    }\n  }\n  customElements.define('open-comp', OpenComponent);\n</script>\n\n<!-- Component using closed shadow DOM -->\n<script>\n  class ClosedComponent extends HTMLElement {\n    constructor() {\n      super();\n      this.attachShadow({ mode: 'closed' });\n    }\n  }\n  customElements.define('closed-comp', ClosedComponent);\n</script>\n```\nHow should the team address this systemic inconsistency to mitigate styling and encapsulation issues?",
        "options": [
            {
                "description": "Allow each component to use its own shadow DOM mode without standardization.",
                "isAnswerKey": false
            },
            {
                "description": "Standardize on a single shadow DOM mode that suits the project requirements and document the guidelines.",
                "isAnswerKey": true
            },
            {
                "description": "Remove shadow DOM entirely from all components.",
                "isAnswerKey": false
            },
            {
                "description": "Switch to using inline styles to override shadow DOM limitations.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "199",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "A legacy application comprises thousands of pages with inconsistent meta tag implementations, which affects SEO. Consider this basic page structure:\n```\n<html>\n  <head>\n    <title>Page Title</title>\n  </head>\n  <body>\n    Content here.\n  </body>\n</html>\n```\nWhat systemic change would most effectively improve SEO consistency across the entire application?",
        "options": [
            {
                "description": "Manually update each page with new meta tags.",
                "isAnswerKey": false
            },
            {
                "description": "Implement a templating system that automatically injects standardized meta tags into every page.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the `<head>` section from all pages.",
                "isAnswerKey": false
            },
            {
                "description": "Increase the size of the `<title>` tag on each page.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "200",
        "skill": "html",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a large-scale application, dynamic content loaded via AJAX has led to incomplete HTML structures, causing browser rendering issues. Consider the following snippet of dynamically loaded content:\n```\n<div class=\"modal\">\n  <div class=\"content\">\n    <p>Loading...</p>\n  <!-- Missing closing tags -->\n```\nWhat systemic approach should be taken to prevent such issues across the codebase?",
        "options": [
            {
                "description": "Switch to concatenating HTML strings without using templates.",
                "isAnswerKey": false
            },
            {
                "description": "Adopt a framework or library that enforces template validation and proper component encapsulation.",
                "isAnswerKey": true
            },
            {
                "description": "Disable AJAX content loading entirely.",
                "isAnswerKey": false
            },
            {
                "description": "Rely solely on manual testing to catch HTML structure errors.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "201",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following CSS snippet and identify the syntax error:\n```\n p {\n   color: red\n   font-size: 16px;\n }\n```",
        "options": [
            {
                "description": "Missing semicolon after 'color: red'",
                "isAnswerKey": true
            },
            {
                "description": "Incorrect property name 'color'",
                "isAnswerKey": false
            },
            {
                "description": "Extra semicolon after 'font-size: 16px;'",
                "isAnswerKey": false
            },
            {
                "description": "Improper use of curly braces",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "202",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following snippet using CSS variables and choose the error in its usage:\n```\n div {\n   background-color: var(primary-color);\n }\n```",
        "options": [
            {
                "description": "The CSS variable should be prefixed with '--' inside the var() function",
                "isAnswerKey": true
            },
            {
                "description": "The property name 'background-color' is invalid",
                "isAnswerKey": false
            },
            {
                "description": "A semicolon is missing after var(primary-color)",
                "isAnswerKey": false
            },
            {
                "description": "CSS variables cannot be used for background properties",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "203",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Identify the error in the following CSS snippet:\n```\n div {\n   margin: 10abc;\n }\n```",
        "options": [
            {
                "description": "Invalid CSS unit 'abc' used for margin",
                "isAnswerKey": true
            },
            {
                "description": "Missing semicolon at the end of the rule",
                "isAnswerKey": false
            },
            {
                "description": "Incorrect property name 'margin'",
                "isAnswerKey": false
            },
            {
                "description": "The colon should be replaced by an equal sign",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "204",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Given the following HTML snippet:\n```\n<ul class=\"menu\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>\n```\nWhich CSS selector correctly targets all li elements that are direct children of an element with class \"menu\"?",
        "options": [
            {
                "description": ".menu li",
                "isAnswerKey": false
            },
            {
                "description": ".menu > li",
                "isAnswerKey": true
            },
            {
                "description": "li.menu",
                "isAnswerKey": false
            },
            {
                "description": "ul li.menu",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "205",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What effect does the following CSS rule have?\n```\n h1 {\n   color: blue;\n }\n```",
        "options": [
            {
                "description": "Sets the background color of all h1 elements to blue",
                "isAnswerKey": false
            },
            {
                "description": "Changes the text color of all h1 elements to blue",
                "isAnswerKey": true
            },
            {
                "description": "Increases the font size of all h1 elements",
                "isAnswerKey": false
            },
            {
                "description": "Adds a blue border to all h1 elements",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "206",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following media query:\n```\n @media (max-width: 600px) {\n   body {\n     background-color: lightblue;\n   }\n }\n```\nWhen will the rule inside the media query be applied?",
        "options": [
            {
                "description": "When the viewport width is greater than 600px",
                "isAnswerKey": false
            },
            {
                "description": "When the viewport width is exactly 600px only",
                "isAnswerKey": false
            },
            {
                "description": "When the viewport width is less than or equal to 600px",
                "isAnswerKey": true
            },
            {
                "description": "When the viewport height is less than 600px",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "207",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following CSS rules:\n```\n p {\n   color: green;\n }\n p {\n   color: red;\n }\n```\nWhat will be the text color of a <p> element, and why?",
        "options": [
            {
                "description": "Green, because the first rule has higher specificity",
                "isAnswerKey": false
            },
            {
                "description": "Red, because the last rule in the cascade overrides previous rules",
                "isAnswerKey": true
            },
            {
                "description": "Both green and red depending on the browser",
                "isAnswerKey": false
            },
            {
                "description": "The second rule is ignored by the browser",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "208",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following CSS selectors:\n```\n #header .menu li a {\n   color: black;\n }\n .menu a {\n   color: white;\n }\n```\nWhat will be the text color for an <a> element inside an element with id \"header\" and class \"menu\"?",
        "options": [
            {
                "description": "Black, because the first selector has higher specificity",
                "isAnswerKey": true
            },
            {
                "description": "White, because the second rule comes later",
                "isAnswerKey": false
            },
            {
                "description": "It will inherit the color from its parent",
                "isAnswerKey": false
            },
            {
                "description": "The styles conflict, so the browser picks one arbitrarily",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "209",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following CSS snippet:\n```\n button:hover {\n   background-color: yellow;\n }\n```\nWhen does the background color change to yellow for a button element?",
        "options": [
            {
                "description": "When the button is clicked",
                "isAnswerKey": false
            },
            {
                "description": "When the button is hovered by the mouse pointer",
                "isAnswerKey": true
            },
            {
                "description": "When the button is focused",
                "isAnswerKey": false
            },
            {
                "description": "When the button is disabled",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "210",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following animation-related CSS:\n```\n @keyframes fadeIn {\n   from { opacity: 0; }\n   to { opacity: 1; }\n }\n .box {\n   animation: fadeIn 2s ease-in;\n }\n```\nWhat effect does the animation have on elements with class \"box\"?",
        "options": [
            {
                "description": "It gradually reduces the element's opacity from 1 to 0",
                "isAnswerKey": false
            },
            {
                "description": "It toggles the display property of the element over 2 seconds",
                "isAnswerKey": false
            },
            {
                "description": "It gradually increases the element's opacity from 0 to 1",
                "isAnswerKey": true
            },
            {
                "description": "It rotates the element over 2 seconds",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "211",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the CSS snippet below:\n```\n .box {\n   width: calc(50% - 10px);\n   padding: 5px;\n }\n```\nWhich of the following best describes the purpose of the calc() function in this snippet?",
        "options": [
            {
                "description": "It dynamically calculates the gap between two fixed widths",
                "isAnswerKey": false
            },
            {
                "description": "It computes the value by subtracting 10px from 50% of the parent's width",
                "isAnswerKey": true
            },
            {
                "description": "It multiplies 50% with 10px",
                "isAnswerKey": false
            },
            {
                "description": "It sets the width to a fixed value of 10px less than 50px",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "212",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the use of CSS variables in the following snippet:\n```\n :root {\n   --main-color: #3498db;\n }\n .header {\n   background-color: var(--main-color);\n }\n```\nWhat is the primary benefit of using CSS variables as shown here?",
        "options": [
            {
                "description": "They allow dynamic theming and easier maintenance by centralizing common values",
                "isAnswerKey": true
            },
            {
                "description": "They improve rendering performance in the browser",
                "isAnswerKey": false
            },
            {
                "description": "They automatically generate vendor prefixes",
                "isAnswerKey": false
            },
            {
                "description": "They enable the execution of JavaScript within CSS",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "213",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following CSS rules:\n```\n div {\n   border: 1px solid black;\n   border-left: 5px dotted red;\n }\n```\nWhat will be the final border-left style of the div element?",
        "options": [
            {
                "description": "1px solid black",
                "isAnswerKey": false
            },
            {
                "description": "5px dotted red",
                "isAnswerKey": true
            },
            {
                "description": "1px dotted red",
                "isAnswerKey": false
            },
            {
                "description": "5px solid black",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "214",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the CSS snippet below:\n```\n a {\n   color: blue;\n   text-decoration: none;\n }\n a:visited {\n   color: purple;\n }\n```\nWhat color will a visited link display?",
        "options": [
            {
                "description": "Blue",
                "isAnswerKey": false
            },
            {
                "description": "Purple",
                "isAnswerKey": true
            },
            {
                "description": "Red",
                "isAnswerKey": false
            },
            {
                "description": "Black",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "215",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the CSS selector in the snippet below:\n```\n .container > .item {\n   margin-bottom: 15px;\n }\n```\nWhich statement best describes this selector?",
        "options": [
            {
                "description": "It selects all .item elements that are direct children of .container",
                "isAnswerKey": true
            },
            {
                "description": "It selects .container elements that are direct children of .item",
                "isAnswerKey": false
            },
            {
                "description": "It selects all elements having both .container and .item classes",
                "isAnswerKey": false
            },
            {
                "description": "It selects .item elements that are any descendants of .container",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "216",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following CSS snippet and identify the issue:\n```\n button {\n   background: #008CBA;\n   color: white;\n }\n\n button:hover {\n   color: #fff;\n   background-color: #006f9a\n }\n```\nWhat is the problem with the above code?",
        "options": [
            {
                "description": "Missing semicolon at the end of the background-color property in button:hover",
                "isAnswerKey": true
            },
            {
                "description": "Incorrect use of the 'background' property",
                "isAnswerKey": false
            },
            {
                "description": "Invalid color value for white",
                "isAnswerKey": false
            },
            {
                "description": "The button selector is written incorrectly",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "217",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "A developer intended the total width of a container to be 100px. Consider the following CSS:\n```\n .container {\n   width: 100px;\n   padding: 10px;\n   border: 5px solid black;\n   box-sizing: content-box;\n }\n```\nWhat change would achieve the intended total width?",
        "options": [
            {
                "description": "Change box-sizing to border-box",
                "isAnswerKey": true
            },
            {
                "description": "Remove the padding",
                "isAnswerKey": false
            },
            {
                "description": "Remove the border",
                "isAnswerKey": false
            },
            {
                "description": "Change width to 100%",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "218",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following CSS rule for a banner:\n```\n .banner {\n   background: linear-gradient(red, blue\n }\n```\nIdentify the error in this rule.",
        "options": [
            {
                "description": "Missing closing parenthesis for the linear-gradient function",
                "isAnswerKey": true
            },
            {
                "description": "Incorrect color names used",
                "isAnswerKey": false
            },
            {
                "description": "The 'background' property cannot accept gradients",
                "isAnswerKey": false
            },
            {
                "description": "A semicolon is missing after the color blue",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "219",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following CSS snippet:\n```\n p {\n   line-height: 1.5px;\n }\n```\nWhat is the likely issue regarding the use of line-height here?",
        "options": [
            {
                "description": "Using 'px' with line-height may result in inconsistent spacing; a unitless value is preferred",
                "isAnswerKey": true
            },
            {
                "description": "line-height must always be an integer",
                "isAnswerKey": false
            },
            {
                "description": "line-height does not accept any unit values",
                "isAnswerKey": false
            },
            {
                "description": "The specified value is too small for proper readability",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "220",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following CSS selectors:\n```\n #nav ul li {\n   color: black;\n }\n .nav ul li {\n   color: blue;\n }\n```\nIf an element in the HTML has both id=\"nav\" and class=\"nav\", what will be the text color of its list items?",
        "options": [
            {
                "description": "Blue, because the .nav rule comes later",
                "isAnswerKey": false
            },
            {
                "description": "Black, because the ID selector has higher specificity",
                "isAnswerKey": true
            },
            {
                "description": "It will be undefined due to the conflicting rules",
                "isAnswerKey": false
            },
            {
                "description": "It will inherit the color from the body element",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "221",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Given the CSS below, what is the total width of a div?\n```\n div {\n   width: 200px;\n   padding: 20px;\n   border: 5px solid black;\n   box-sizing: border-box;\n }\n```\nAssume no margin is applied.",
        "options": [
            {
                "description": "200px",
                "isAnswerKey": true
            },
            {
                "description": "250px",
                "isAnswerKey": false
            },
            {
                "description": "210px",
                "isAnswerKey": false
            },
            {
                "description": "240px",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "222",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following CSS for links:\n```\n a {\n   color: blue;\n }\n a:link {\n   color: green;\n }\n a:visited {\n   color: purple;\n }\n a:hover {\n   color: orange;\n }\n a:active {\n   color: red;\n }\n```\nFor an unvisited link that is not hovered or active, what color will be displayed?",
        "options": [
            {
                "description": "Blue",
                "isAnswerKey": false
            },
            {
                "description": "Green",
                "isAnswerKey": true
            },
            {
                "description": "Purple",
                "isAnswerKey": false
            },
            {
                "description": "Orange",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "223",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following media query and rule:\n```\n @media (min-width: 500px) and (max-width: 1000px) {\n   .responsive {\n     font-size: 1.2rem;\n   }\n }\n .responsive {\n   font-size: 1rem;\n }\n```\nWhat font-size will an element with class \"responsive\" have when the viewport width is 750px?",
        "options": [
            {
                "description": "1rem",
                "isAnswerKey": false
            },
            {
                "description": "1.2rem",
                "isAnswerKey": true
            },
            {
                "description": "Depends on the browser default",
                "isAnswerKey": false
            },
            {
                "description": "0.8rem",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "224",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the following CSS transition:\n```\n .box {\n   background-color: yellow;\n   transition: background-color 0.5s ease-in-out;\n }\n .box:hover {\n   background-color: green;\n }\n```\nHow long does it take for the background color transition to complete when hovering over .box?",
        "options": [
            {
                "description": "0.25 seconds",
                "isAnswerKey": false
            },
            {
                "description": "0.5 seconds",
                "isAnswerKey": true
            },
            {
                "description": "1 second",
                "isAnswerKey": false
            },
            {
                "description": "Instantly",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "225",
        "skill": "css",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following CSS animation:\n```\n @keyframes moveRight {\n   0% { transform: translateX(0); }\n   100% { transform: translateX(100px); }\n }\n .animated {\n   animation: moveRight 2s linear infinite;\n }\n```\nWhat behavior will an element with the class \"animated\" exhibit?",
        "options": [
            {
                "description": "It moves 100px to the right once and stops",
                "isAnswerKey": false
            },
            {
                "description": "It continuously moves 100px to the right and then resets instantly",
                "isAnswerKey": false
            },
            {
                "description": "It continuously moves right 100px in 2 seconds, then repeats, creating infinite motion",
                "isAnswerKey": true
            },
            {
                "description": "It oscillates back and forth",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "226",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following CSS rule:\n\n```\n.box {\n  background-color: #f0f0f0;\n}\n```\n\nWhat does the property `background-color` do in this rule?",
        "options": [
            {
                "description": "It sets a background image.",
                "isAnswerKey": false
            },
            {
                "description": "It sets the background color.",
                "isAnswerKey": true
            },
            {
                "description": "It changes the text color.",
                "isAnswerKey": false
            },
            {
                "description": "It defines the border color.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "227",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following CSS snippet:\n\n```\n.container {\n  margin: 10px 20px;\n}\n```\n\nWhat do the values `10px 20px` specify for the margins of the `.container` element?",
        "options": [
            {
                "description": "Top and left margins are 10px; bottom and right margins are 20px.",
                "isAnswerKey": false
            },
            {
                "description": "Top and bottom margins are 10px; left and right margins are 20px.",
                "isAnswerKey": true
            },
            {
                "description": "All margins are set to 10px and 20px alternately.",
                "isAnswerKey": false
            },
            {
                "description": "Top margin is 10px and all other margins are 20px.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "228",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following CSS snippet:\n\n```\n.text {\n  color: blue;\n}\n```\n\nWhat aspect of the element does the `color` property affect?",
        "options": [
            {
                "description": "The element's background color.",
                "isAnswerKey": false
            },
            {
                "description": "The text color.",
                "isAnswerKey": true
            },
            {
                "description": "The border color.",
                "isAnswerKey": false
            },
            {
                "description": "The font size.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "229",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine this CSS snippet:\n\n```\np {\n  font-size: 16px;\n}\n```\n\nWhat does the `font-size` property control?",
        "options": [
            {
                "description": "The size of the element's margin.",
                "isAnswerKey": false
            },
            {
                "description": "The size of the text.",
                "isAnswerKey": true
            },
            {
                "description": "The weight of the font.",
                "isAnswerKey": false
            },
            {
                "description": "The spacing between letters.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "230",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following code snippets demonstrates the correct way to add a comment in a CSS file?",
        "options": [
            {
                "description": "```// This is a comment```",
                "isAnswerKey": false
            },
            {
                "description": "```/* This is a comment */```",
                "isAnswerKey": true
            },
            {
                "description": "```<!-- This is a comment -->```",
                "isAnswerKey": false
            },
            {
                "description": "```# This is a comment```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "231",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the HTML snippet below:\n\n```\n<ul class=\"menu\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>\n```\n\nWhich CSS selector correctly targets only the direct `<li>` children of the element with class `menu`?",
        "options": [
            {
                "description": "`.menu li`",
                "isAnswerKey": false
            },
            {
                "description": "`.menu > li`",
                "isAnswerKey": true
            },
            {
                "description": "`.menu + li`",
                "isAnswerKey": false
            },
            {
                "description": "`.menu ~ li`",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "232",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following HTML element:\n\n```\n<div class=\"active highlight\">Content</div>\n```\n\nWhich CSS selector correctly targets this element by requiring both the `active` and `highlight` classes?",
        "options": [
            {
                "description": "`.active, .highlight`",
                "isAnswerKey": false
            },
            {
                "description": "`.active.highlight`",
                "isAnswerKey": true
            },
            {
                "description": "`.active .highlight`",
                "isAnswerKey": false
            },
            {
                "description": "`.active + .highlight`",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "233",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "You want to provide a fallback for a background property using a solid color before applying an advanced background definition. Which of the following code snippets is correctly ordered to achieve this?",
        "options": [
            {
                "description": "```\n.box {\n  background: linear-gradient(red, blue);\n  background-color: red;\n}\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\n.box {\n  background-color: red;\n  background: linear-gradient(red, blue);\n}\n```",
                "isAnswerKey": true
            },
            {
                "description": "```\n.box {\n  background: red, linear-gradient(red, blue);\n}\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\n.box {\n  background: fallback(red);\n  background: linear-gradient(red, blue);\n}\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "234",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following CSS rule:\n\n```\nul > li {\n  list-style: none;\n}\n```\n\nWhat does the `>` combinator specify in this selector?",
        "options": [
            {
                "description": "It selects all `<li>` elements anywhere in the document.",
                "isAnswerKey": false
            },
            {
                "description": "It selects `<li>` elements that are direct children of a `<ul>`.",
                "isAnswerKey": true
            },
            {
                "description": "It selects sibling `<li>` elements.",
                "isAnswerKey": false
            },
            {
                "description": "It selects `<li>` elements that come immediately after a `<ul>`.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "235",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which CSS property is used to create rounded corners on an element? See the example below:\n\n```\n.box {\n  border-radius: 5px;\n}\n```\n",
        "options": [
            {
                "description": "corner-radius",
                "isAnswerKey": false
            },
            {
                "description": "border-radius",
                "isAnswerKey": true
            },
            {
                "description": "radius",
                "isAnswerKey": false
            },
            {
                "description": "round-corner",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "236",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following CSS code with redundant declarations:\n\n```\n.btn-primary {\n  background-color: blue;\n  color: white;\n  padding: 10px;\n}\n\n.btn-secondary {\n  background-color: gray;\n  color: white;\n  padding: 10px;\n}\n```\n\nWhich refactored version best applies the DRY principle?",
        "options": [
            {
                "description": "```\n.btn {\n  color: white;\n  padding: 10px;\n}\n.btn-primary {\n  background-color: blue;\n}\n.btn-secondary {\n  background-color: gray;\n}\n```",
                "isAnswerKey": true
            },
            {
                "description": "```\n.btn-primary, .btn-secondary {\n  background-color: blue;\n  color: white;\n  padding: 10px;\n}\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\n.btn-primary {\n  background-color: blue;\n}\n.btn-secondary {\n  background-color: gray;\n}\n.btn {\n  color: white;\n  padding: 10px;\n}\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\n.btn-primary { background: blue; }\n.btn-secondary { background: gray; }\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "237",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following CSS code for a navigation item:\n\n```\n.nav-item {\n  font-size: 16px;\n  padding: 10px;\n  display: inline-block;\n  margin: 0;\n  color: black;\n}\n\n.nav-item:hover {\n  font-size: 16px;\n  padding: 10px;\n  display: inline-block;\n  margin: 0;\n  color: blue;\n}\n```\n\nWhat is the best way to refactor this code to adhere to DRY principles?",
        "options": [
            {
                "description": "```\n.nav-item {\n  font-size: 16px;\n  padding: 10px;\n  display: inline-block;\n  margin: 0;\n  color: black;\n}\n\n.nav-item:hover {\n  color: blue;\n}\n```",
                "isAnswerKey": true
            },
            {
                "description": "Merge both rules into one selector.",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate the entire set of properties in both selectors for consistency.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the hover state altogether.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "238",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following CSS snippet for a card component:\n\n```\n.card {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 15px;\n  margin: 10px;\n  box-shadow: 2px 2px 5px rgba(0,0,0,0.1);\n}\n```\n\nHow can you refactor this code to improve modular reusability?",
        "options": [
            {
                "description": "```\n:root {\n  --card-border: 1px solid #ccc;\n  --card-border-radius: 4px;\n  --card-padding: 15px;\n  --card-margin: 10px;\n  --card-shadow: 2px 2px 5px rgba(0,0,0,0.1);\n}\n\n.card {\n  border: var(--card-border);\n  border-radius: var(--card-border-radius);\n  padding: var(--card-padding);\n  margin: var(--card-margin);\n  box-shadow: var(--card-shadow);\n}\n```",
                "isAnswerKey": true
            },
            {
                "description": "Remove the box-shadow to simplify the code.",
                "isAnswerKey": false
            },
            {
                "description": "Combine margin and padding into a single shorthand property.",
                "isAnswerKey": false
            },
            {
                "description": "Replace the fixed values with percentage-based values.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "239",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following SASS code snippet:\n\n```\n$primary-color: blue;\n\n.button {\n  background-color: $primary-color;\n  &:hover {\n    background-color: darken($primary-color, 10%);\n  }\n}\n```\n\nWhich preprocessor language is illustrated in this snippet?",
        "options": [
            {
                "description": "LESS",
                "isAnswerKey": false
            },
            {
                "description": "SASS",
                "isAnswerKey": true
            },
            {
                "description": "Stylus",
                "isAnswerKey": false
            },
            {
                "description": "PostCSS",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "240",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following CSS snippet for rotating an element:\n\n```\n.box {\n  -webkit-transform: rotate(45deg);\n  -moz-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n```\n\nWhich tool is best suited to automate the addition of vendor prefixes like `-webkit-` and `-moz-`?",
        "options": [
            {
                "description": "CSSLint",
                "isAnswerKey": false
            },
            {
                "description": "Autoprefixer",
                "isAnswerKey": true
            },
            {
                "description": "Normalize.css",
                "isAnswerKey": false
            },
            {
                "description": "Stylelint",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "241",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following CSS rule:\n\n```\n.header {\n  font-wieght: bold;\n}\n```\n\nWhat is the bug in this code?",
        "options": [
            {
                "description": "The property name is misspelled; it should be `font-weight`.",
                "isAnswerKey": true
            },
            {
                "description": "The value 'bold' is not valid for any font property.",
                "isAnswerKey": false
            },
            {
                "description": "The selector `.header` is invalid in CSS.",
                "isAnswerKey": false
            },
            {
                "description": "There is no semicolon after the property value.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "242",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the media query below:\n\n```\n@media screen and (max-device-width: 600px) {\n  .responsive {\n    display: block;\n  }\n}\n```\n\nWhat potential issue might affect this media query's behavior on modern devices?",
        "options": [
            {
                "description": "Using `max-device-width` may lead to inconsistent behavior; `max-width` is generally preferred.",
                "isAnswerKey": true
            },
            {
                "description": "The query should use `min-device-width` instead.",
                "isAnswerKey": false
            },
            {
                "description": "The keyword `screen` is not supported.",
                "isAnswerKey": false
            },
            {
                "description": "The breakpoint value is too high for modern devices.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "243",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following flex container code:\n\n```\n.flex-container {\n  display: flex;\n  justify-content: center;\n  align-item: center;\n}\n```\n\nIdentify the error in this flexbox declaration.",
        "options": [
            {
                "description": "The `display` property should be set to `block`.",
                "isAnswerKey": false
            },
            {
                "description": "The property `align-item` is incorrect and should be `align-items`.",
                "isAnswerKey": true
            },
            {
                "description": "The `justify-content` value is invalid.",
                "isAnswerKey": false
            },
            {
                "description": "The flex container requires a width declaration.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "244",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Analyze the CSS rules below:\n\n```\n.btn {\n  background-color: red;\n}\n\n#container .btn {\n  background-color: green;\n}\n```\n\nIf an element with class `btn` is inside an element with id `container`, what will be its background color?",
        "options": [
            {
                "description": "Red",
                "isAnswerKey": false
            },
            {
                "description": "Green",
                "isAnswerKey": true
            },
            {
                "description": "It will alternate between red and green.",
                "isAnswerKey": false
            },
            {
                "description": "None, because the rules conflict.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "245",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following CSS animation code:\n\n```\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to   { opacity: 1; }\n}\n\n.animate {\n  animation-name: fadein;\n  animation-duration: 2s;\n}\n```\n\nIdentify the error that prevents the animation from working as intended.",
        "options": [
            {
                "description": "The `animation-duration` value is in the wrong unit.",
                "isAnswerKey": false
            },
            {
                "description": "The animation name is case-sensitive; `fadein` should be `fadeIn`.",
                "isAnswerKey": true
            },
            {
                "description": "The `@keyframes` rule is missing a semicolon.",
                "isAnswerKey": false
            },
            {
                "description": "The property `animation-name` is deprecated.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "246",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following CSS snippet for a button:\n\n```\n.button {\n  background: #008CBA;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n```\n\nWhat refactoring approach would improve reusability when creating multiple button styles?",
        "options": [
            {
                "description": "Create a base button class with shared properties and extend it for specific button types.",
                "isAnswerKey": true
            },
            {
                "description": "Duplicate the same styles for each different button.",
                "isAnswerKey": false
            },
            {
                "description": "Remove all styling to avoid conflicts.",
                "isAnswerKey": false
            },
            {
                "description": "Inline all styles into the HTML elements.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "247",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the CSS snippet below applied to various form inputs:\n\n```\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"password\"] {\n  border: 1px solid #ccc;\n  padding: 10px;\n  font-size: 14px;\n}\n```\n\nWhich coding practice is demonstrated in this snippet?",
        "options": [
            {
                "description": "Using inline styles for each input.",
                "isAnswerKey": false
            },
            {
                "description": "Combining selectors to reduce redundancy and apply DRY principles.",
                "isAnswerKey": true
            },
            {
                "description": "Overriding default browser styles with excessive specificity.",
                "isAnswerKey": false
            },
            {
                "description": "Using JavaScript to dynamically style form elements.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "248",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following CSS code that uses BEM naming conventions:\n\n```\n.button--primary {\n  background: blue;\n  color: white;\n}\n\n.button--secondary {\n  background: gray;\n  color: white;\n}\n```\n\nWhat is a key benefit of using the BEM naming convention as illustrated above?",
        "options": [
            {
                "description": "It makes the CSS less modular and harder to maintain.",
                "isAnswerKey": false
            },
            {
                "description": "It enhances modularity and reusability by clearly separating base styles from modifiers.",
                "isAnswerKey": true
            },
            {
                "description": "It increases the number of selectors and makes the code more complex.",
                "isAnswerKey": false
            },
            {
                "description": "It prevents the use of CSS variables.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "249",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following CSS snippet using custom properties:\n\n```\n:root {\n  --primary-color: #3498db;\n  --secondary-color: #2ecc71;\n}\n\n.header {\n  background-color: var(--primary-color);\n  color: white;\n}\n\n.footer {\n  background-color: var(--secondary-color);\n  color: white;\n}\n```\n\nWhat good coding practice is exemplified by using CSS variables here?",
        "options": [
            {
                "description": "Hardcoding all values directly into each rule.",
                "isAnswerKey": false
            },
            {
                "description": "Using CSS variables for consistency and ease of maintenance.",
                "isAnswerKey": true
            },
            {
                "description": "Using inline styles over external stylesheets.",
                "isAnswerKey": false
            },
            {
                "description": "Minimizing the use of custom properties to increase performance.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "250",
        "skill": "css",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following CSS hover effect:\n\n```\n.scale-up {\n  transform: scale(1);\n  transition: transform 0.3s ease;\n}\n.scale-up:hover {\n  transform: scale(1.2);\n}\n```\n\nWhat will be the behavior of an element with the class `scale-up` when it is hovered over?",
        "options": [
            {
                "description": "It will instantly jump to 1.2 times its size.",
                "isAnswerKey": false
            },
            {
                "description": "It will gradually scale up to 1.2 times its original size over 0.3 seconds.",
                "isAnswerKey": true
            },
            {
                "description": "It will scale down to 1.2 times its size.",
                "isAnswerKey": false
            },
            {
                "description": "There will be no noticeable effect.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "251",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following CSS property declarations correctly sets an element's background color to blue?\n\n```css\n/* Option examples */\n```",
        "options": [
            {
                "description": "```css\nbg-color: blue;\n```",
                "isAnswerKey": false
            },
            {
                "description": "```css\nbackground-color: blue;\n```",
                "isAnswerKey": true
            },
            {
                "description": "```css\nbackground: {blue};\n```",
                "isAnswerKey": false
            },
            {
                "description": "```css\nbackground: [blue];\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "252",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "In CSS, what does the selector `.my-class` target?",
        "options": [
            {
                "description": "Elements with id=\"my-class\"",
                "isAnswerKey": false
            },
            {
                "description": "Elements with class=\"my-class\"",
                "isAnswerKey": true
            },
            {
                "description": "Elements of type <my-class>",
                "isAnswerKey": false
            },
            {
                "description": "Elements with an attribute named my-class",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "253",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following code snippet:\n\n```css\nh1, h2, h3 {\n   font-family: 'Arial', sans-serif;\n}\n```\n\nWhich of the following best describes the above selector grouping?",
        "options": [
            {
                "description": "It applies the font-family to h1, h2, and h3 elements.",
                "isAnswerKey": true
            },
            {
                "description": "It applies the font-family to h1 elements only.",
                "isAnswerKey": false
            },
            {
                "description": "It applies the style to a single heading element that matches h1, h2, or h3 simultaneously.",
                "isAnswerKey": false
            },
            {
                "description": "It applies styles to nested h2 and h3 elements inside an h1.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "254",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following CSS code snippet and identify the syntax error:\n\n```css\n#header {\n    color red;\n    background-color: black;\n}\n```\n\nWhich statement correctly identifies the error?",
        "options": [
            {
                "description": "The 'color' property is missing a colon before the value.",
                "isAnswerKey": true
            },
            {
                "description": "The 'background-color' property is missing a semicolon.",
                "isAnswerKey": false
            },
            {
                "description": "The '#' in the selector is not allowed.",
                "isAnswerKey": false
            },
            {
                "description": "There is no error in the code.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "255",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which syntax correctly represents a comment in CSS?",
        "options": [
            {
                "description": "<!-- This is a comment -->",
                "isAnswerKey": false
            },
            {
                "description": "// This is a comment",
                "isAnswerKey": false
            },
            {
                "description": "/* This is a comment */",
                "isAnswerKey": true
            },
            {
                "description": "# This is a comment",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "256",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following CSS selectors:\n\n```css\nul li a { color: blue; }\n.navbar .nav-link { color: green; }\n```\n\nFor an anchor element inside an element with class 'navbar', which selector has higher specificity?",
        "options": [
            {
                "description": "ul li a",
                "isAnswerKey": false
            },
            {
                "description": ".navbar .nav-link",
                "isAnswerKey": true
            },
            {
                "description": "Both have equal specificity.",
                "isAnswerKey": false
            },
            {
                "description": "Specificity cannot be determined from the given selectors.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "257",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Identify the error in the following media query CSS code:\n\n```css\n@media only screen and (min-width: 600px) {\n   .responsive {\n      width: 50px\n      padding: 10px;\n   }\n}\n```\n",
        "options": [
            {
                "description": "Missing semicolon after the 'width' property.",
                "isAnswerKey": true
            },
            {
                "description": "Incorrect media query syntax.",
                "isAnswerKey": false
            },
            {
                "description": "Missing unit for the width property.",
                "isAnswerKey": false
            },
            {
                "description": "No error; the code is correct.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "258",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "In the following CSS Flexbox snippet:\n\n```css\n.container {\n   display: flex;\n   justify-content: center;\n   align-items: center;\n}\n```\n\nWhich property is responsible for aligning items on the cross axis?",
        "options": [
            {
                "description": "justify-content",
                "isAnswerKey": false
            },
            {
                "description": "align-items",
                "isAnswerKey": true
            },
            {
                "description": "flex-direction",
                "isAnswerKey": false
            },
            {
                "description": "align-content",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "259",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the CSS snippet below:\n\n```css\na:hover {\n  text-decoration: underline;\n}\n```\n\nWhich pseudo-class in the snippet is used to style the element when a user hovers over it?",
        "options": [
            {
                "description": ":active",
                "isAnswerKey": false
            },
            {
                "description": ":hover",
                "isAnswerKey": true
            },
            {
                "description": ":focus",
                "isAnswerKey": false
            },
            {
                "description": ":visited",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "260",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following multi-file CSS code:\n\nFile1.css:\n```css\n.primary {\n   color: blue;\n}\n```\n\nFile2.css:\n```css\n.primary {\n   color: red;\n}\n```\n\nIf File1.css is loaded before File2.css, what will be the final text color of an element with class \"primary\"?",
        "options": [
            {
                "description": "Blue",
                "isAnswerKey": false
            },
            {
                "description": "Red",
                "isAnswerKey": true
            },
            {
                "description": "Depends on browser",
                "isAnswerKey": false
            },
            {
                "description": "Undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "261",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "A developer is using vendor prefixes for a gradient. Examine the following CSS snippet:\n\n```css\n.header {\n   background: linear-gradient(to right, #ff0000, #0000ff);\n   background: -moz-linear-gradient(to right, #ff0000, #0000ff);\n   background: -webkit-linear-gradient(to right, #ff0000, #0000ff);\n}\n```\n\nIn older Firefox versions, the gradient does not render correctly. What is the likely issue?",
        "options": [
            {
                "description": "Older Firefox versions require the direction to be specified without the 'to' keyword.",
                "isAnswerKey": true
            },
            {
                "description": "The hex color codes are not supported in Firefox.",
                "isAnswerKey": false
            },
            {
                "description": "The order of the background declarations is incorrect.",
                "isAnswerKey": false
            },
            {
                "description": "A missing -o-linear-gradient vendor prefix is causing the issue.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "262",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Refactor the following CSS selector for better performance. Original CSS:\n\n```css\ndiv.container > ul.menu li.menu-item a {\n   color: #333;\n}\n```\n\nWhich refactored selector is more efficient while still targeting the same elements?",
        "options": [
            {
                "description": ".container .menu-item a",
                "isAnswerKey": true
            },
            {
                "description": "div > ul > li > a",
                "isAnswerKey": false
            },
            {
                "description": ".container > .menu > li > a",
                "isAnswerKey": false
            },
            {
                "description": "#container .menu-item a",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "263",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following repetitive CSS code:\n\n```css\n.header { font-size: 24px; font-weight: bold; }\n.footer { font-size: 24px; font-weight: bold; }\n.sidebar { font-size: 24px; font-weight: bold; }\n```\n\nWhich refactoring approach best reduces code duplication?",
        "options": [
            {
                "description": "Merge shared styles into a common class and apply it to the elements.",
                "isAnswerKey": true
            },
            {
                "description": "Use inline styles for each element.",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate the styles in a separate file.",
                "isAnswerKey": false
            },
            {
                "description": "Apply styles only to the first element and inherit them.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "264",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following Flexbox CSS snippet for a responsive layout:\n\n```css\n.container {\n    display: flex;\n}\n.item {\n    flex: 1 1 200px;\n}\n```\n\nIf the layout breaks on smaller screens, which change is most likely to fix the issue?",
        "options": [
            {
                "description": "Add 'flex-wrap: wrap;' to '.container'.",
                "isAnswerKey": true
            },
            {
                "description": "Change 'flex: 1 1 200px;' to 'flex: 1;'.",
                "isAnswerKey": false
            },
            {
                "description": "Remove 'display: flex;' from '.container'.",
                "isAnswerKey": false
            },
            {
                "description": "Set '.item' to 'display: block;'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "265",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "A modal element is styled as follows:\n\n```css\n.modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n```\n\nIf the modal is not centered on the screen, what is the most likely cause?",
        "options": [
            {
                "description": "The modal is not a direct child of the body, and a positioned parent is interfering.",
                "isAnswerKey": true
            },
            {
                "description": "The transform property is incorrectly applied.",
                "isAnswerKey": false
            },
            {
                "description": "Absolute positioning must be replaced with fixed positioning.",
                "isAnswerKey": false
            },
            {
                "description": "CSS absolute positioning is not supported in all browsers.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "266",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "A developer wants to refactor the following float-based layout to use Flexbox:\n\n```css\n.container > .row > .col-6 {\n  float: left;\n  width: 50%;\n}\n.container > .row > .col-4 {\n  float: left;\n  width: 33.33%;\n}\n```\n\nWhich refactored Flexbox code achieves the same layout?",
        "options": [
            {
                "description": "```css\n.row {\n  display: flex;\n}\n.row > .col-6 {\n  flex: 0 0 50%;\n}\n.row > .col-4 {\n  flex: 0 0 33.33%;\n}\n```",
                "isAnswerKey": true
            },
            {
                "description": "```css\n.row { display: block; }\n.col-6, .col-4 { display: inline-block; }\n```",
                "isAnswerKey": false
            },
            {
                "description": "```css\n.container { display: flex; }\n.container > div { flex: 1; }\n```",
                "isAnswerKey": false
            },
            {
                "description": "```css\n.row { display: grid; grid-template-columns: repeat(2, 1fr); }\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "267",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Analyze the following CSS rules:\n\n```css\n/* Base styles */\n.menu li a {\n  color: black;\n}\n\n/* Highlight style */\n#nav .menu li a.active {\n  color: red;\n}\n```\n\nIf later in the cascade the following rule appears:\n\n```css\na {\n  color: blue !important;\n}\n```\n\nWhat color will an anchor element with class \"active\" inside '#nav .menu li' display?",
        "options": [
            {
                "description": "Black",
                "isAnswerKey": false
            },
            {
                "description": "Red",
                "isAnswerKey": false
            },
            {
                "description": "Blue",
                "isAnswerKey": true
            },
            {
                "description": "It depends on the cascade order",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "268",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "A developer writes the following CSS animation:\n\n```css\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n.element {\n  animation: fadeIn 2s ease-in;\n}\n```\n\nHowever, the animation does not run in some browsers. What modification ensures cross-browser support?",
        "options": [
            {
                "description": "Add vendor-prefixed versions like '-webkit-keyframes' and '-webkit-animation'.",
                "isAnswerKey": true
            },
            {
                "description": "Change 'ease-in' to 'linear'.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the 'animation' property altogether.",
                "isAnswerKey": false
            },
            {
                "description": "Replace '@keyframes' with '@animation-keyframes'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "269",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following CSS code causing performance issues due to layout reflow:\n\n```css\n.results {\n   height: 500px;\n   overflow: auto;\n}\n.item {\n   margin: 20px 0;\n}\n```\n\nWhich refactoring strategy can improve scrolling performance?",
        "options": [
            {
                "description": "Apply 'will-change: transform;' to '.item' to enable GPU acceleration.",
                "isAnswerKey": true
            },
            {
                "description": "Replace 'margin' with 'padding' on '.item'.",
                "isAnswerKey": false
            },
            {
                "description": "Remove 'overflow: auto' from '.results'.",
                "isAnswerKey": false
            },
            {
                "description": "Set a fixed height for '.item'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "270",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following CSS for a navigation bar:\n\n```css\n.navbar ul li {\n   display: inline-block;\n}\n.navbar ul li a {\n   color: #333;\n   text-decoration: none;\n}\n```\n\nWhat refactoring strategy improves maintainability for nested navigation menus?",
        "options": [
            {
                "description": "Utilize a CSS preprocessor's nested rules.",
                "isAnswerKey": true
            },
            {
                "description": "Replace 'inline-block' with 'float: left'.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the nested selectors and use only inline styles.",
                "isAnswerKey": false
            },
            {
                "description": "Increase specificity by adding more classes.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "271",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the following CSS snippet following the BEM naming convention:\n\n```css\n.button {\n   background-color: blue;\n}\n.button--large {\n   padding: 10px 20px;\n}\n.button__icon {\n   margin-right: 5px;\n}\n```\n\nWhich statement best describes the BEM methodology illustrated above?",
        "options": [
            {
                "description": "It uses Block, Element, Modifier structure.",
                "isAnswerKey": true
            },
            {
                "description": "It separates styles by HTML element type.",
                "isAnswerKey": false
            },
            {
                "description": "It relies on nesting and inheritance in CSS.",
                "isAnswerKey": false
            },
            {
                "description": "It eliminates the need for responsive design.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "272",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a large-scale application, consider the following global CSS rule:\n\n```css\n* {\n  box-sizing: border-box;\n}\n```\n\nTo better encapsulate styles and reduce unintended cascading effects, which design pattern is most appropriate?",
        "options": [
            {
                "description": "Using Shadow DOM for style encapsulation.",
                "isAnswerKey": true
            },
            {
                "description": "Applying inline styles to every component.",
                "isAnswerKey": false
            },
            {
                "description": "Using !important on all rules.",
                "isAnswerKey": false
            },
            {
                "description": "Removing the global reset.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "273",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the deeply nested selector:\n\n```css\n#app .header .nav .menu .menu-item a {\n  color: #555;\n}\n```\n\nWhich refactoring approach best mitigates specificity issues and enhances maintainability?",
        "options": [
            {
                "description": "Adopt a flatter class naming strategy like BEM.",
                "isAnswerKey": true
            },
            {
                "description": "Increase specificity by adding more unique IDs.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the selector to use element selectors only.",
                "isAnswerKey": false
            },
            {
                "description": "Inline the styles directly in the HTML.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "274",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "A developer is troubleshooting persistent CSS issues where component styles are conflicting across files. Given the following:\n\nFile A:\n```css\n.component {\n   background: white;\n}\n```\n\nFile B:\n```css\n.component {\n   background: transparent;\n}\n```\n\nWhich architectural solution best addresses these conflicts?",
        "options": [
            {
                "description": "Implement a namespace convention to isolate component styles.",
                "isAnswerKey": true
            },
            {
                "description": "Merge File A and File B into a single stylesheet.",
                "isAnswerKey": false
            },
            {
                "description": "Use inline styles to override both files.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the background property from File B.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "275",
        "skill": "css",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following CSS snippet with repeated style rules:\n\n```css\n.header, .footer, .sidebar, .content {\n  margin: 0;\n  padding: 0;\n  font-family: Arial, sans-serif;\n}\n```\n\nWhich advanced methodology can be applied to manage such repeated rules in a scalable manner?",
        "options": [
            {
                "description": "Utilize CSS Variables with a component-based architecture.",
                "isAnswerKey": true
            },
            {
                "description": "Increase the specificity of each selector.",
                "isAnswerKey": false
            },
            {
                "description": "Manually remove duplicate rules.",
                "isAnswerKey": false
            },
            {
                "description": "Inline styles for each component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "276",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "For a large-scale application requiring maintainable, reusable CSS code with minimal specificity conflicts, which of the following architectural patterns is most suitable? Consider the code snippet below.\n```css\n.button {\n  background: blue;\n  color: white;\n  padding: 10px;\n}\n.button--primary {\n  background: green;\n}\n```",
        "options": [
            {
                "description": "BEM (Block, Element, Modifier)",
                "isAnswerKey": true
            },
            {
                "description": "OOCSS (Object-Oriented CSS)",
                "isAnswerKey": false
            },
            {
                "description": "Atomic CSS",
                "isAnswerKey": false
            },
            {
                "description": "CSS-in-JS",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "277",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following CSS snippet. Which naming convention does it represent and what advantage does this provide in a production environment?\n```css\n.card {\n  border: 1px solid #ccc;\n}\n.card__header {\n  font-size: 20px;\n}\n.card__header--highlighted {\n  background: yellow;\n}\n```",
        "options": [
            {
                "description": "BEM (Block, Element, Modifier) – Enhances readability and minimizes style collisions",
                "isAnswerKey": true
            },
            {
                "description": "SMACSS – For modular architecture but not directly addressing naming specificity",
                "isAnswerKey": false
            },
            {
                "description": "OOCSS – Focuses on object reuse, not naming",
                "isAnswerKey": false
            },
            {
                "description": "Atomic CSS – Emphasizes single-purpose classes with low specificity",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "278",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the SCSS snippet below. Which CSS preprocessor strategy is being used to modularize styles and prevent naming collisions?\n```scss\n// Button.scss\n.button {\n  @extend %base-button;\n  background-color: $primary-color;\n}\n```",
        "options": [
            {
                "description": "Using Sass placeholder selectors with @extend",
                "isAnswerKey": true
            },
            {
                "description": "Implementing a BEM naming convention",
                "isAnswerKey": false
            },
            {
                "description": "Adopting CSS Modules",
                "isAnswerKey": false
            },
            {
                "description": "Incorporating inline styling",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "279",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the snippet below. When dynamic theming is required in an enterprise-level application, which CSS feature does this approach demonstrate?\n```css\n:root {\n  --main-bg-color: #ffffff;\n}\n.theme-dark {\n  --main-bg-color: #000000;\n}\n```",
        "options": [
            {
                "description": "Utilizing CSS Custom Properties for theme management",
                "isAnswerKey": true
            },
            {
                "description": "Implementing the BEM methodology",
                "isAnswerKey": false
            },
            {
                "description": "Applying OOCSS principles",
                "isAnswerKey": false
            },
            {
                "description": "Relying on SMACSS for layout organization",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "280",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Identify the methodology depicted in the following code snippet and its benefit in a large-scale codebase:\n```css\n.navbar {}\n.navbar__item {}\n.navbar__item--active {}\n```",
        "options": [
            {
                "description": "BEM (Block, Element, Modifier) – Facilitates predictable component styling",
                "isAnswerKey": true
            },
            {
                "description": "OOCSS – Focuses on separating structure from skin",
                "isAnswerKey": false
            },
            {
                "description": "Atomic CSS – Uses utility classes for granular control",
                "isAnswerKey": false
            },
            {
                "description": "Inline CSS – Embeds styles directly into HTML",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "281",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following CSS code that triggers an unexpected layout repaint, what is the primary technical issue?\n```css\n.item {\n  width: calc(100% - 20px);\n  transition: width 0.5s;\n}\n.item:hover {\n  width: calc(100% - 10px);\n  margin: 5px;\n}\n```",
        "options": [
            {
                "description": "Changing properties that trigger reflow (e.g., margin adjustments alongside width transitions)",
                "isAnswerKey": true
            },
            {
                "description": "The use of calc() functions causing arithmetic errors",
                "isAnswerKey": false
            },
            {
                "description": "Improper use of pseudo-classes",
                "isAnswerKey": false
            },
            {
                "description": "Missing vendor prefixes for transitions",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "282",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following CSS animation code, which causes performance issues on mobile devices. What is the likely performance bottleneck?\n```css\n.animated-box {\n  animation: expand 2s infinite;\n}\n\n@keyframes expand {\n  0% { width: 100px; }\n  50% { width: 200px; }\n  100% { width: 100px; }\n}\n```",
        "options": [
            {
                "description": "Animating the width property, which forces layout recalculations",
                "isAnswerKey": true
            },
            {
                "description": "Using an infinite loop in the animation",
                "isAnswerKey": false
            },
            {
                "description": "Not using vendor prefixes for animation",
                "isAnswerKey": false
            },
            {
                "description": "The keyframe percentage steps are too few",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "283",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Inspect the following CSS rules. What is the bug that might cause unexpected style overrides in a production environment?\n```css\n.container .header {\n  color: blue;\n}\n\n.header {\n  color: red !important;\n}\n```",
        "options": [
            {
                "description": "The use of !important in the second rule overrides the specificity of the first",
                "isAnswerKey": true
            },
            {
                "description": "Missing a descendant combinator in the first rule",
                "isAnswerKey": false
            },
            {
                "description": "The rules are written in the wrong order",
                "isAnswerKey": false
            },
            {
                "description": "Using !important lowers the rule's precedence",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "284",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the selector below. What performance drawback might this cause in a large DOM tree?\n```css\nhtml body div.main ul li a.active {\n  color: green;\n}\n```",
        "options": [
            {
                "description": "Overly specific selectors can slow down the browser's matching process",
                "isAnswerKey": true
            },
            {
                "description": "Element selectors are always more performant than class selectors",
                "isAnswerKey": false
            },
            {
                "description": "The use of multiple levels of specificity has no impact on performance",
                "isAnswerKey": false
            },
            {
                "description": "The active state is not properly defined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "285",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "A parallax effect seems janky during scrolling. Analyze the following CSS and identify the likely issue:\n```css\n.parallax {\n  background-image: url('large-image.jpg');\n  background-attachment: scroll;\n  background-size: cover;\n}\n```\n",
        "options": [
            {
                "description": "The large, unoptimized background image causes excessive resource usage",
                "isAnswerKey": true
            },
            {
                "description": "Using background-attachment: scroll instead of fixed, causing repaints",
                "isAnswerKey": false
            },
            {
                "description": "background-size: cover is not supported on mobile devices",
                "isAnswerKey": false
            },
            {
                "description": "Missing hardware acceleration triggers janky scrolling",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "286",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following SCSS snippet that implements a responsive grid system using a mixin. Which improvement would make the system more scalable and maintainable?\n```scss\n@mixin grid-column($columns) {\n  width: (100% / $columns);\n}\n\n.container {\n  @include grid-column(3);\n}\n```",
        "options": [
            {
                "description": "Replace hard-coded calculations with a Sass function that supports dynamic gutters",
                "isAnswerKey": true
            },
            {
                "description": "Convert the mixin to inline styles to reduce complexity",
                "isAnswerKey": false
            },
            {
                "description": "Hard-code widths for each container instead of using mixins",
                "isAnswerKey": false
            },
            {
                "description": "Eliminate mixins to simplify the stylesheet",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "287",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the CSS-in-JS snippet for a button component below. Which refactoring would improve reusability and themability in a large codebase?\n```jsx\nconst Button = styled.button`\n  background-color: ${props => props.primary ? 'blue' : 'gray'};\n  color: white;\n  padding: 10px 20px;\n`;\n```",
        "options": [
            {
                "description": "Extract static values into a centralized theme object",
                "isAnswerKey": true
            },
            {
                "description": "Inline all styles within the component for quick fixes",
                "isAnswerKey": false
            },
            {
                "description": "Remove the conditional styling to simplify the component",
                "isAnswerKey": false
            },
            {
                "description": "Hardcode the values directly so that they cannot change",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "288",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the following CSS for a reusable card component. Which modification will help prevent style leakage and unintended inheritance across components?\n```css\n.card {\n  background: #fff;\n  padding: 1rem;\n}\n.card h2 {\n  font-size: 1.5rem;\n}\n```",
        "options": [
            {
                "description": "Scope the styles using component-specific classes or CSS Modules",
                "isAnswerKey": true
            },
            {
                "description": "Remove all styling from child elements to avoid inheritance",
                "isAnswerKey": false
            },
            {
                "description": "Merge the selectors to apply universal styling",
                "isAnswerKey": false
            },
            {
                "description": "Rely solely on global styles for a unified look",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "289",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "You need to refactor a monolithic CSS file into a more modular system. Given the snippet below, what technique will best reduce duplication?\n```css\n/* styles.css */\n.header { background: #333; color: white; }\n.footer { background: #333; color: white; }\n```",
        "options": [
            {
                "description": "Extract common styles into a shared mixin or variable",
                "isAnswerKey": true
            },
            {
                "description": "Increase selector specificity to isolate each component",
                "isAnswerKey": false
            },
            {
                "description": "Convert the styles into inline CSS",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate rules in separate files for redundancy",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "290",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following SCSS snippet for theme configuration, which refactor would enhance its configurability in a large-scale application?\n```scss\n$primary-color: blue;\n$secondary-color: gray;\n\n.button {\n  background-color: $primary-color;\n  &:hover {\n    background-color: $secondary-color;\n  }\n}\n```",
        "options": [
            {
                "description": "Utilize a map for theme colors to allow dynamic theme switching",
                "isAnswerKey": true
            },
            {
                "description": "Replace variables with hardcoded values",
                "isAnswerKey": false
            },
            {
                "description": "Eliminate nesting to flatten the structure",
                "isAnswerKey": false
            },
            {
                "description": "Convert the SCSS to plain CSS",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "291",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "While refactoring a large-scale stylesheet, you find that the following reordered rules are causing unintended style overrides. What refactoring strategy would best resolve this issue?\n```css\n/* Original */\n.sidebar { width: 250px; color: black; }\n.main { color: blue; }\n\n/* Refactored */\n.main { color: blue; }\n.sidebar { width: 250px; color: black; }\n```",
        "options": [
            {
                "description": "Adopt a consistent naming convention and enforce minimum specificity rules",
                "isAnswerKey": true
            },
            {
                "description": "Rely solely on the order of declarations without a clear architecture",
                "isAnswerKey": false
            },
            {
                "description": "Remove one of the conflicting rules altogether",
                "isAnswerKey": false
            },
            {
                "description": "Randomize component declaration order",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "292",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Inspect the following CSS transformation in a legacy codebase that is causing unintended layout shifts. Which refactoring strategy would best address the technical debt?\n```css\n.element {\n  transform: translate(10px, 20px);\n  position: relative;\n  top: 5px;\n}\n```",
        "options": [
            {
                "description": "Consolidate offset rules by removing redundant positioning properties",
                "isAnswerKey": true
            },
            {
                "description": "Add more transform functions to enhance the effect",
                "isAnswerKey": false
            },
            {
                "description": "Increase the transition duration to smooth out the shifts",
                "isAnswerKey": false
            },
            {
                "description": "Replace transform with margin adjustments entirely",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "293",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following code where multiple @media rules are scattered throughout the file, making maintenance difficult. What refactoring strategy would improve clarity and performance?\n```css\n@media (max-width: 768px) {\n  .header { font-size: 16px; }\n}\n@media (max-width: 768px) {\n  .footer { font-size: 14px; }\n}\n```",
        "options": [
            {
                "description": "Consolidate media queries by grouping selectors under a single @media block",
                "isAnswerKey": true
            },
            {
                "description": "Remove media queries to simplify the stylesheet",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate media queries for each individual selector",
                "isAnswerKey": false
            },
            {
                "description": "Increase the number of breakpoints for better responsiveness",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "294",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "In the process of a system-wide CSS refactor, you notice duplicated rules increasing maintenance overhead. Which refactoring pattern will reduce duplication and enforce style consistency?\n```css\n.button { padding: 10px; border-radius: 5px; }\n.btn { padding: 10px; border-radius: 5px; }\n```",
        "options": [
            {
                "description": "Use a common class or extend mechanism to share styles",
                "isAnswerKey": true
            },
            {
                "description": "Separate the styles into different files for each component",
                "isAnswerKey": false
            },
            {
                "description": "Increase the specificity of one selector to override the other",
                "isAnswerKey": false
            },
            {
                "description": "Rename one of the classes arbitrarily",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "295",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "The following SCSS code uses deep nesting, making maintenance difficult and potentially causing specificity issues. How would you refactor it for clarity?\n```scss\n.nav {\n  ul {\n    li {\n      a {\n        color: red;\n      }\n    }\n  }\n}\n```",
        "options": [
            {
                "description": "Flatten the selectors by adopting BEM conventions",
                "isAnswerKey": true
            },
            {
                "description": "Increase nesting further to encapsulate styles",
                "isAnswerKey": false
            },
            {
                "description": "Replace nested selectors with inline styles for each element",
                "isAnswerKey": false
            },
            {
                "description": "Use more complex selectors to forcibly increase specificity",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "296",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Evaluate the following advanced CSS snippet that employs custom properties, mixins, and media queries. Which change would most significantly enforce design consistency and reduce side-effects across modules?\n```scss\n:root {\n  --spacing: 16px;\n}\n\n@mixin spacing {\n  margin: var(--spacing);\n}\n\n.component {\n  @include spacing;\n  padding: var(--spacing);\n}\n\n@media (max-width: 600px) {\n  .component {\n    --spacing: 8px;\n  }\n}\n```",
        "options": [
            {
                "description": "Refactor to use a centralized theme provider that dynamically updates spacing values across the app",
                "isAnswerKey": true
            },
            {
                "description": "Hardcode spacing values in each component to avoid variable conflicts",
                "isAnswerKey": false
            },
            {
                "description": "Increase the nesting of media queries to scope the changes",
                "isAnswerKey": false
            },
            {
                "description": "Remove mixins and use inline styles exclusively",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "297",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a scenario where multiple teams share a common CSS framework that suffers from specificity conflicts and maintenance challenges, review the code snippet below. Which architectural improvement would most effectively standardize behavior across teams?\n```css\n/* Global styles */\n.button,\n.btn {\n  background: #007bff;\n  color: white;\n}\n```",
        "options": [
            {
                "description": "Consolidate naming conventions using a strict BEM or Atomic CSS approach enforced via linting",
                "isAnswerKey": true
            },
            {
                "description": "Allow each team to define its own naming conventions",
                "isAnswerKey": false
            },
            {
                "description": "Remove global styles and rely solely on inline styling",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate styles for each team to meet their individual needs",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "298",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the following SCSS structure for theme switching implemented across several modules. What systemic issue might this cause at scale?\n```scss\n// theme.scss\n$theme-colors: (\n  primary: blue,\n  secondary: gray\n);\n.component {\n  background-color: map-get($theme-colors, primary);\n}\n```",
        "options": [
            {
                "description": "The lack of dynamic reactivity prevents runtime theme changes without a rebuild",
                "isAnswerKey": true
            },
            {
                "description": "SCSS maps inherently increase selector specificity",
                "isAnswerKey": false
            },
            {
                "description": "Using maps conflicts with CSS Custom Properties directly",
                "isAnswerKey": false
            },
            {
                "description": "The code automatically updates themes on the fly without issues",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "299",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a cross-team refactor, you observe that inconsistent usage of vendor prefixing is leading to redundant CSS. Examine the snippet below. Which architectural improvement would best address this systemic issue?\n```css\n.old-module {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n```",
        "options": [
            {
                "description": "Migrate to a PostCSS setup with Autoprefixer to standardize vendor prefixing",
                "isAnswerKey": true
            },
            {
                "description": "Manually add more vendor prefixes for all properties",
                "isAnswerKey": false
            },
            {
                "description": "Replace flex display with block-level elements",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate the rule in each module for consistency",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "300",
        "skill": "css",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the advanced SCSS configuration intended for a global style guide. Which modification will most effectively enforce a consistent design system and mitigate future technical debt?\n```scss\n$colors: (\n  primary: #007bff,\n  secondary: #6c757d,\n  success: #28a745,\n  danger: #dc3545\n);\n\n.button {\n  background-color: map-get($colors, primary);\n  &:hover {\n    background-color: darken(map-get($colors, primary), 10%);\n  }\n}\n```",
        "options": [
            {
                "description": "Integrate a design token system that centralizes values across both CSS and JavaScript",
                "isAnswerKey": true
            },
            {
                "description": "Hardcode color values directly into the CSS for quick fixes",
                "isAnswerKey": false
            },
            {
                "description": "Increase the number of individualized color maps for each component",
                "isAnswerKey": false
            },
            {
                "description": "Remove hover states to simplify the design system",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "301",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following code snippets correctly declares a variable named 'x' with the value 10?",
        "options": [
            {
                "description": "```x := 10;```",
                "isAnswerKey": false
            },
            {
                "description": "```var x = 10;```",
                "isAnswerKey": true
            },
            {
                "description": "```const x =;```",
                "isAnswerKey": false
            },
            {
                "description": "```let x == 10;```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "302",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nvar flag = true;\nconsole.log(typeof flag);\n```",
        "options": [
            {
                "description": "\"string\"",
                "isAnswerKey": false
            },
            {
                "description": "\"boolean\"",
                "isAnswerKey": true
            },
            {
                "description": "\"object\"",
                "isAnswerKey": false
            },
            {
                "description": "\"undefined\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "303",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "The following code snippet has a syntax error. Which option correctly fixes the error?\n\n```\nif(true {\n   console.log(\"Hello\");\n}\n```",
        "options": [
            {
                "description": "```if true { console.log(\"Hello\"); }```",
                "isAnswerKey": false
            },
            {
                "description": "```if(true) { console.log(\"Hello\"); }```",
                "isAnswerKey": true
            },
            {
                "description": "```if(true { console.log(\"Hello\"); });```",
                "isAnswerKey": false
            },
            {
                "description": "```if(true) console.log(\"Hello\"){}```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "304",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which snippet correctly uses a template literal to output the string 'Hello John'?",
        "options": [
            {
                "description": "```\nconst name = \"John\";\nconsole.log(\"Hello \" + name);\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\nconst name = \"John\";\nconsole.log(`Hello ${name}`);\n```",
                "isAnswerKey": true
            },
            {
                "description": "```\nconst name = \"John\";\nconsole.log(\"Hello ${name}\");\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\nconst name = \"John\";\nconsole.log('Hello ' + name);\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "305",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following code snippets demonstrates the correct syntax for creating an object literal?",
        "options": [
            {
                "description": "```\nconst obj = (name: \"Alice\", age: 25);\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\nconst obj = { name: \"Alice\", age: 25 };\n```",
                "isAnswerKey": true
            },
            {
                "description": "```\nconst obj = { name = \"Alice\", age = 25 };\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\nconst obj = [name: \"Alice\", age: 25];\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "306",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nlet result = 0;\nfor (let i = 1; i <= 3; i++) {\n  result += i;\n}\nconsole.log(result);\n```",
        "options": [
            {
                "description": "\"5\"",
                "isAnswerKey": false
            },
            {
                "description": "\"6\"",
                "isAnswerKey": true
            },
            {
                "description": "\"9\"",
                "isAnswerKey": false
            },
            {
                "description": "\"7\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "307",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nlet x = 10;\nif (x > 5) {\n  console.log(\"High\");\n} else {\n  console.log(\"Low\");\n}\n```",
        "options": [
            {
                "description": "\"Low\"",
                "isAnswerKey": false
            },
            {
                "description": "\"High\"",
                "isAnswerKey": true
            },
            {
                "description": "\"undefined\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Error\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "308",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nfunction checkNumber(n) {\n  let result = \"\";\n  if (n % 2 === 0) {\n    result = \"even\";\n  } else {\n    result = \"odd\";\n  }\n  return result;\n}\nconsole.log(checkNumber(7));\n```",
        "options": [
            {
                "description": "\"even\"",
                "isAnswerKey": false
            },
            {
                "description": "\"odd\"",
                "isAnswerKey": true
            },
            {
                "description": "\"NaN\"",
                "isAnswerKey": false
            },
            {
                "description": "\"null\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "309",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nconst status = (15 > 10) ? \"Active\" : \"Inactive\";\nconsole.log(status);\n```",
        "options": [
            {
                "description": "\"Inactive\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Active\"",
                "isAnswerKey": true
            },
            {
                "description": "\"Error\"",
                "isAnswerKey": false
            },
            {
                "description": "\"undefined\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "310",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nlet sum = 0;\nfor (let i = 1; i < 4; i++) {\n  if (i % 2 === 0) {\n    sum += i;\n  }\n}\nconsole.log(sum);\n```",
        "options": [
            {
                "description": "\"1\"",
                "isAnswerKey": false
            },
            {
                "description": "\"2\"",
                "isAnswerKey": true
            },
            {
                "description": "\"3\"",
                "isAnswerKey": false
            },
            {
                "description": "\"4\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "311",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What does the following function return when passed the array [1, 2, 3]?\n\n```\nfunction multiplyByTwo(arr) {\n  return arr.map(n => n * 2);\n}\nconsole.log(multiplyByTwo([1,2,3]));\n```",
        "options": [
            {
                "description": "\"[1,2,3]\"",
                "isAnswerKey": false
            },
            {
                "description": "\"[2,4,6]\"",
                "isAnswerKey": true
            },
            {
                "description": "\"[2,2,2]\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Error\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "312",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nfunction getFullName(person) {\n  return person.firstName + \" \" + person.lastName;\n}\nconsole.log(getFullName({firstName: \"Jane\", lastName: \"Doe\"}));\n```",
        "options": [
            {
                "description": "\"JaneDoe\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Jane Doe\"",
                "isAnswerKey": true
            },
            {
                "description": "\"Doe Jane\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Error\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "313",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the output of the following recursive function when called with 4?\n\n```\nfunction factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\nconsole.log(factorial(4));\n```",
        "options": [
            {
                "description": "\"4\"",
                "isAnswerKey": false
            },
            {
                "description": "\"24\"",
                "isAnswerKey": true
            },
            {
                "description": "\"Factorial\"",
                "isAnswerKey": false
            },
            {
                "description": "\"undefined\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "314",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nfunction sumArray(arr) {\n  return arr.reduce((acc, val) => acc + val, 0);\n}\nconsole.log(sumArray([5, 10, 15]));\n```",
        "options": [
            {
                "description": "\"25\"",
                "isAnswerKey": false
            },
            {
                "description": "\"30\"",
                "isAnswerKey": true
            },
            {
                "description": "\"35\"",
                "isAnswerKey": false
            },
            {
                "description": "\"50\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "315",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What does the following function return when passed the array [1, 2, 3, 4, 5]?\n\n```\nfunction filterEven(numbers) {\n  return numbers.filter(num => num % 2 === 0);\n}\nconsole.log(filterEven([1,2,3,4,5]));\n```",
        "options": [
            {
                "description": "\"[1,3,5]\"",
                "isAnswerKey": false
            },
            {
                "description": "\"[2,4]\"",
                "isAnswerKey": true
            },
            {
                "description": "\"[2,3,4]\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Error\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "316",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "The following code snippet produces an extra undefined value in the output. Which modification correctly fixes the bug?\n\n```\nfunction printElements(arr) {\n  for (let i = 0; i <= arr.length; i++) {\n    console.log(arr[i]);\n  }\n}\nprintElements([1, 2, 3]);\n```",
        "options": [
            {
                "description": "Change the loop condition to `i <= arr.length - 1`.",
                "isAnswerKey": false
            },
            {
                "description": "Change the loop condition to `i < arr.length`.",
                "isAnswerKey": true
            },
            {
                "description": "Initialize `i` to 1 instead of 0.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the loop altogether.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "317",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "The following code snippet throws a reference error. Which correction fixes the issue?\n\n```\nfunction checkPositive(num) {\n  if (num > 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nconsole.log(chekPositive(10));\n```",
        "options": [
            {
                "description": "Rename the function to `chekPositive`.",
                "isAnswerKey": false
            },
            {
                "description": "Change the function call to `checkPositive(10)`.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the function altogether.",
                "isAnswerKey": false
            },
            {
                "description": "Change the parameter name.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "318",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Identify the fix needed for the bug in the following code snippet which causes the loop body to execute incorrectly:\n\n```\nfunction findIndex(arr, target) {\n  for (let i = 0; i < arr.length; i++);\n    if(arr[i] === target) {\n      return i;\n    }\n  return -1;\n}\nconsole.log(findIndex([1,2,3], 2));\n```",
        "options": [
            {
                "description": "Add a semicolon after the if statement.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the semicolon after the for loop.",
                "isAnswerKey": true
            },
            {
                "description": "Modify the if condition.",
                "isAnswerKey": false
            },
            {
                "description": "Initialize `i` to 1.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "319",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "The function below is intended to return the middle element of an array but returns the wrong element. Which change fixes the issue?\n\n```\nfunction getMiddle(arr) {\n  return arr[Math.round(arr.length / 2)];\n}\nconsole.log(getMiddle([1,2,3,4,5]));\n```",
        "options": [
            {
                "description": "Change `Math.round` to `Math.ceil`.",
                "isAnswerKey": false
            },
            {
                "description": "Change `Math.round` to `Math.floor`.",
                "isAnswerKey": true
            },
            {
                "description": "Add 1 to the index.",
                "isAnswerKey": false
            },
            {
                "description": "Subtract 1 from `arr.length`.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "320",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "The following code snippet produces a runtime error due to a variable name mismatch. Which correction fixes the error?\n\n```\nfunction greet(name) {\n  return \"Hello, \" + username;\n}\nconsole.log(greet(\"Alice\"));\n```",
        "options": [
            {
                "description": "Replace the function name `greet` with `hello`.",
                "isAnswerKey": false
            },
            {
                "description": "Replace `username` with `name`.",
                "isAnswerKey": true
            },
            {
                "description": "Rename the parameter to `username`.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the parameter altogether.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "321",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is the output of the following function call?\n\n```\nfunction computeScore(score) {\n  if(score >= 90) {\n    return \"A\";\n  } else if(score >= 80) {\n    return \"B\";\n  } else if(score >= 70) {\n    return \"C\";\n  } else if(score >= 60) {\n    return \"D\";\n  } else {\n    return \"F\";\n  }\n}\nconsole.log(computeScore(85));\n```",
        "options": [
            {
                "description": "\"A\"",
                "isAnswerKey": false
            },
            {
                "description": "\"B\"",
                "isAnswerKey": true
            },
            {
                "description": "\"C\"",
                "isAnswerKey": false
            },
            {
                "description": "\"D\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "322",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nfunction getDayName(num) {\n  switch(num) {\n    case 1: return \"Monday\";\n    case 2: return \"Tuesday\";\n    case 3: return \"Wednesday\";\n    default: return \"Invalid\";\n  }\n}\nconsole.log(getDayName(2));\n```",
        "options": [
            {
                "description": "\"Monday\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Tuesday\"",
                "isAnswerKey": true
            },
            {
                "description": "\"Wednesday\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Invalid\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "323",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nfunction generatePattern(n) {\n  let result = \"\";\n  for(let i = 0; i < n; i++) {\n    for(let j = 0; j <= i; j++) {\n      result += \"*\";\n    }\n    if(i < n - 1) result += \"\\n\";\n  }\n  return result;\n}\nconsole.log(generatePattern(3));\n```\n*(Newlines are present in the output)",
        "options": [
            {
                "description": "```\n*\n**\n**\n```",
                "isAnswerKey": false
            },
            {
                "description": "```\n*\n**\n***\n```",
                "isAnswerKey": true
            },
            {
                "description": "```\n***\n**\n*\n```",
                "isAnswerKey": false
            },
            {
                "description": "\"Error\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "324",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nfunction getMessage(num) {\n  return num > 0 ?\n      (num % 2 === 0 ? \"Positive Even\" : \"Positive Odd\")\n      : \"Non-positive\";\n}\nconsole.log(getMessage(0));\n```",
        "options": [
            {
                "description": "\"Positive Even\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Non-positive\"",
                "isAnswerKey": true
            },
            {
                "description": "\"Positive Odd\"",
                "isAnswerKey": false
            },
            {
                "description": "\"Error\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "325",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is the output of the following code snippet?\n\n```\nfunction findFirstEven(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      return arr[i];\n    }\n  }\n  return null;\n}\nconsole.log(findFirstEven([1,3,7,8,9]));\n```",
        "options": [
            {
                "description": "\"null\"",
                "isAnswerKey": false
            },
            {
                "description": "\"8\"",
                "isAnswerKey": true
            },
            {
                "description": "\"1\"",
                "isAnswerKey": false
            },
            {
                "description": "\"7\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "326",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the code snippet below:\n```\nconst data = JSON.parse('{\"name\": \"John\", \"age\": 30}');\nconsole.log(typeof data);\n```\nWhat will be the output of the typeof operator on variable data?",
        "options": [
            {
                "description": "object",
                "isAnswerKey": true
            },
            {
                "description": "string",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            },
            {
                "description": "null",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "327",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the snippet below:\n```\nconst arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst merged = arr1.concat(arr2);\n```\nWhich built-in array method is used to merge the two arrays?",
        "options": [
            {
                "description": "Array.prototype.push",
                "isAnswerKey": false
            },
            {
                "description": "Array.prototype.concat",
                "isAnswerKey": true
            },
            {
                "description": "Array.prototype.merge",
                "isAnswerKey": false
            },
            {
                "description": "Array.prototype.assign",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "328",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the code snippet:\n```\nconsole.log(\"Hello\");\nsetTimeout(() => console.log(\"World\"), 1000);\n```\nWhat will be the output order when this code runs?",
        "options": [
            {
                "description": "\"Hello\" followed by \"World\"",
                "isAnswerKey": true
            },
            {
                "description": "\"World\" followed by \"Hello\"",
                "isAnswerKey": false
            },
            {
                "description": "Both strings printed simultaneously",
                "isAnswerKey": false
            },
            {
                "description": "Only \"World\" gets printed",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "329",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Given the snippet:\n```\nconst nums = [1, 2, 3, 4, 5];\nconst evenNums = nums.filter(n => n % 2 === 0);\n```\nWhat does the filter method do in this example?",
        "options": [
            {
                "description": "Modifies each element of the original array",
                "isAnswerKey": false
            },
            {
                "description": "Sorts the array in ascending order",
                "isAnswerKey": false
            },
            {
                "description": "Returns a new array containing only the elements that satisfy the condition",
                "isAnswerKey": true
            },
            {
                "description": "Deletes non-matching elements from the original array",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "330",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following code snippet:\n```\nconst arr = ['apple', 'banana', 'cherry'];\nconst fruits = arr.join(', ');\n```\nWhat does the join method do in the context above?",
        "options": [
            {
                "description": "Splits the array into individual characters",
                "isAnswerKey": false
            },
            {
                "description": "Converts the array into a single string by joining its elements with a comma and a space",
                "isAnswerKey": true
            },
            {
                "description": "Sorts the array alphabetically",
                "isAnswerKey": false
            },
            {
                "description": "Filters the array to remove duplicates",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "331",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the arrow function snippet below:\n```\nconst multiply = (a, b) => a * b;\nconsole.log(multiply(2, 3));\n```\nWhich of the following is the equivalent function declaration using the function keyword?",
        "options": [
            {
                "description": "function multiply(a, b) { return a * b; }",
                "isAnswerKey": true
            },
            {
                "description": "const multiply = (a, b) { return a * b; }",
                "isAnswerKey": false
            },
            {
                "description": "function multiply(a, b) => return a * b;",
                "isAnswerKey": false
            },
            {
                "description": "let multiply = (a, b) => { a * b; }",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "332",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following code:\n```\nlet value = 10;\nlet result = (value > 5) ? 'High' : 'Low';\nconsole.log(result);\n```\nWhat will be printed to the console?",
        "options": [
            {
                "description": "Low",
                "isAnswerKey": false
            },
            {
                "description": "Undefined",
                "isAnswerKey": false
            },
            {
                "description": "High",
                "isAnswerKey": true
            },
            {
                "description": "Error",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "333",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the snippet below which computes the sum of an array:\n```\nconst arr = [1, 2, 3];\nlet sum = 0;\nfor(let i = 0; i < arr.length; i++){\n  sum += arr[i];\n}\nconsole.log(sum);\n```\nWhat is the output of the code?",
        "options": [
            {
                "description": "6",
                "isAnswerKey": true
            },
            {
                "description": "7",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "3",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "334",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following loop:\n```\nlet count = 0;\nfor(let i = 1; i < 5; i++){\n  count += i;\n}\nconsole.log(count);\n```\nWhat value is printed to the console?",
        "options": [
            {
                "description": "6",
                "isAnswerKey": false
            },
            {
                "description": "10",
                "isAnswerKey": true
            },
            {
                "description": "9",
                "isAnswerKey": false
            },
            {
                "description": "7",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "335",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze this while loop code snippet:\n```\nlet i = 0;\nlet output = '';\nwhile(i < 3) {\n  output += i;\n  i++;\n}\nconsole.log(output);\n```\nWhat is printed to the console?",
        "options": [
            {
                "description": "\"012\"",
                "isAnswerKey": true
            },
            {
                "description": "\"123\"",
                "isAnswerKey": false
            },
            {
                "description": "\"0123\"",
                "isAnswerKey": false
            },
            {
                "description": "\"ABC\"",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "336",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "You have the following function that filters even numbers from an array:\n```\nfunction processNumbers(nums) {\n  let evens = [];\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] % 2 === 0){\n       evens.push(nums[i]);\n    }\n  }\n  return evens;\n}\n```\nWhich refactored version best uses Array.prototype.filter to achieve the same functionality in a pure and modular way?",
        "options": [
            {
                "description": "const processNumbers = nums => {\n  return nums.filter(num => num % 2 === 0);\n};",
                "isAnswerKey": true
            },
            {
                "description": "const processNumbers = nums => {\n  nums.filter(num => num % 2 === 0);\n};",
                "isAnswerKey": false
            },
            {
                "description": "function processNumbers(nums) {\n  return nums.map(num => num % 2 === 0);\n}",
                "isAnswerKey": false
            },
            {
                "description": "function processNumbers(nums) {\n  return nums.reduce((acc, num) => { if(num % 2 === 0) acc.push(num); return acc; }, []);\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "337",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider a function that sorts an array of numbers. The original function mutates the input array:\n```\nfunction sortNumbers(nums) {\n  nums.sort((a, b) => a - b);\n  return nums;\n}\n```\nWhich refactored version ensures that the original array is not mutated?",
        "options": [
            {
                "description": "function sortNumbers(nums) {\n  return [...nums].sort((a, b) => a - b);\n}",
                "isAnswerKey": true
            },
            {
                "description": "function sortNumbers(nums) {\n  return nums.sort((a, b) => b - a);\n}",
                "isAnswerKey": false
            },
            {
                "description": "const sortNumbers = nums => nums.sort((a, b) => a - b);",
                "isAnswerKey": false
            },
            {
                "description": "const sortNumbers = nums => { nums.sort((a, b) => a - b); return nums; }",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "338",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "The following code uses a callback to return data asynchronously:\n```\nfunction fetchData(callback) {\n  setTimeout(() => {\n    callback(\"data\");\n  }, 1000);\n}\n```\nWhich of the following refactored versions returns a Promise instead, improving modularity?",
        "options": [
            {
                "description": "function fetchData() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(\"data\");\n    }, 1000);\n  });\n}",
                "isAnswerKey": true
            },
            {
                "description": "function fetchData() {\n  setTimeout(() => {\n    return \"data\";\n  }, 1000);\n}",
                "isAnswerKey": false
            },
            {
                "description": "const fetchData = async () => {\n  setTimeout(() => {\n    return \"data\";\n  }, 1000);\n};",
                "isAnswerKey": false
            },
            {
                "description": "function fetchData(callback) {\n  return new Promise(callback);\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "339",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Observe the following function that processes an array:\n```\nfunction processAndLog(items) {\n  for(let item of items) {\n    console.log(item);\n  }\n  return items.length;\n}\n```\nWhich refactored version most effectively separates the responsibilities to enhance modularity and reusability?",
        "options": [
            {
                "description": "function logItems(items) {\n  items.forEach(item => console.log(item));\n}\n\nfunction countItems(items) {\n  return items.length;\n}\n\nfunction processAndLog(items) {\n  logItems(items);\n  return countItems(items);\n}",
                "isAnswerKey": true
            },
            {
                "description": "function processAndLog(items) {\n  for(let item of items) {\n    console.log(item);\n  }\n  return items.length;\n}",
                "isAnswerKey": false
            },
            {
                "description": "function processAndLog(items) {\n  console.log(items);\n  return items.length;\n}",
                "isAnswerKey": false
            },
            {
                "description": "function processAndLog(items) {\n  logItems(items);\n  return items;\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "340",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the function below that capitalizes every word in a sentence:\n```\nfunction capitalizeWords(sentence) {\n  return sentence.split(' ')\n    .map(word => word[0].toUpperCase() + word.slice(1))\n    .join(' ');\n}\n```\nWhich refactored version introduces a helper function to improve readability without altering functionality?",
        "options": [
            {
                "description": "function capitalize(word) {\n  return word[0].toUpperCase() + word.slice(1);\n}\n\nfunction capitalizeWords(sentence) {\n  return sentence.split(' ')\n    .map(capitalize)\n    .join(' ');\n}",
                "isAnswerKey": true
            },
            {
                "description": "function capitalizeWords(sentence) {\n  const words = sentence.split(' ');\n  for(let i=0; i<words.length; i++){\n    words[i] = words[i][0].toUpperCase() + words[i].slice(1);\n  }\n  return words.join(' ');\n}",
                "isAnswerKey": false
            },
            {
                "description": "function capitalizeWords(sentence) {\n  return sentence.toUpperCase();\n}",
                "isAnswerKey": false
            },
            {
                "description": "function capitalizeWords(sentence) {\n  return sentence.split(' ')\n    .reduce((acc, word) => acc + capitalize(word), '');\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "341",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the recursive function below intended to calculate a factorial:\n```\nfunction factorial(n) {\n  if(n === 0) return 1;\n  return n * factorial(n--);\n}\nconsole.log(factorial(5));\n```\nWhat is the bug in this code?",
        "options": [
            {
                "description": "The recursive call uses 'n--' which returns the current value before decrementing, potentially causing infinite recursion",
                "isAnswerKey": true
            },
            {
                "description": "The base case should check for n < 1 instead of n === 0",
                "isAnswerKey": false
            },
            {
                "description": "The multiplication operator is used incorrectly in the recursion",
                "isAnswerKey": false
            },
            {
                "description": "It should use the increment operator instead of decrement",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "342",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following asynchronous function:\n```\nfunction getData() {\n  let data;\n  setTimeout(() => {\n    data = 'Hello';\n  }, 1000);\n  return data;\n}\nconsole.log(getData());\n```\nWhy does getData() return undefined?",
        "options": [
            {
                "description": "Because setTimeout is asynchronous, the function returns before data is assigned",
                "isAnswerKey": true
            },
            {
                "description": "The callback inside setTimeout is missing error handling",
                "isAnswerKey": false
            },
            {
                "description": "setTimeout is not supported in JavaScript",
                "isAnswerKey": false
            },
            {
                "description": "The variable data is not properly declared",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "343",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the code snippet intended to square each number in an array:\n```\nconst squared = [1, 2, 3].map(num => { num * num });\nconsole.log(squared);\n```\nWhy does the above code return an array of undefined values?",
        "options": [
            {
                "description": "Because the arrow function uses curly braces without an explicit return statement",
                "isAnswerKey": true
            },
            {
                "description": "Because 'num * num' is not valid syntax",
                "isAnswerKey": false
            },
            {
                "description": "The map function is incorrectly used",
                "isAnswerKey": false
            },
            {
                "description": "There is no bug; the code should work as intended",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "344",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Analyze this snippet that prints numbers after a delay:\n```\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 100);\n}\n```\nWhat is the bug and how can it be fixed?",
        "options": [
            {
                "description": "Change 'var' to 'let' to create block-scoped variables for each iteration",
                "isAnswerKey": true
            },
            {
                "description": "Wrap the setTimeout call in an immediately invoked function expression (IIFE)",
                "isAnswerKey": false
            },
            {
                "description": "Increase the delay in setTimeout to a higher value",
                "isAnswerKey": false
            },
            {
                "description": "Call clearTimeout inside the loop to stop the incorrect behavior",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "345",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following function intended to return the current year:\n```\nfunction getCurrentYear() {\n  return new Date().getFullYear;\n}\nconsole.log(getCurrentYear());\n```\nWhat is the bug in this code?",
        "options": [
            {
                "description": "The getFullYear method is not invoked properly; it should be called as getFullYear()",
                "isAnswerKey": true
            },
            {
                "description": "new Date() should be declared outside of the function",
                "isAnswerKey": false
            },
            {
                "description": "The function should use Date.now() instead",
                "isAnswerKey": false
            },
            {
                "description": "console.log is used incorrectly",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "346",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Which of the following implementations of a function to calculate a total price including tax best follows good coding practices by being pure and highly reusable?",
        "options": [
            {
                "description": "let taxRate = 0.1;\nfunction calculateTotal(price) {\n  return price + (price * taxRate);\n}",
                "isAnswerKey": false
            },
            {
                "description": "function calculateTotal(price, taxRate) {\n  return price + (price * taxRate);\n}",
                "isAnswerKey": true
            },
            {
                "description": "function calculateTotal(price, taxRate) {\n  console.log(price);\n  return price + (price * taxRate);\n}",
                "isAnswerKey": false
            },
            {
                "description": "function calculateTotal(price) {\n  return price + (price * 0.1);\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "347",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Given the two functions below that operate on a user object:\n```\nfunction getUserFullName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nfunction getUserInitials(user) {\n  return user.firstName.charAt(0) + user.lastName.charAt(0);\n}\n```\nWhich refactored version best applies the DRY principle by extracting common functionality?",
        "options": [
            {
                "description": "function getUserFullName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nfunction getUserInitials(user) {\n  return getUserFullName(user).split(' ').map(name => name.charAt(0)).join('');\n}",
                "isAnswerKey": false
            },
            {
                "description": "function getUserNames(user) {\n  return { first: user.firstName, last: user.lastName };\n}\n\nfunction getUserFullName(user) {\n  const names = getUserNames(user);\n  return names.first + ' ' + names.last;\n}\n\nfunction getUserInitials(user) {\n  const names = getUserNames(user);\n  return names.first.charAt(0) + names.last.charAt(0);\n}",
                "isAnswerKey": true
            },
            {
                "description": "function getUserFullName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nfunction getUserInitials(user) {\n  return user.firstName[0] + user.lastName[0];\n}",
                "isAnswerKey": false
            },
            {
                "description": "function getUserData(user) {\n  return [user.firstName, user.lastName];\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "348",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Which of the following implementations updates a user object's name without mutating the original object, thereby following good coding practices?",
        "options": [
            {
                "description": "function updateUserName(user, newName) {\n  return { ...user, name: newName };\n}",
                "isAnswerKey": true
            },
            {
                "description": "function updateUserName(user, newName) {\n  user.name = newName;\n  return user;\n}",
                "isAnswerKey": false
            },
            {
                "description": "const updateUserName = (user, newName) => { user.name = newName; return user; }",
                "isAnswerKey": false
            },
            {
                "description": "function updateUserName(user, newName) {\n  let userCopy = user;\n  userCopy.name = newName;\n  return userCopy;\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "349",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the code snippet below for processing an order:\n```\nfunction calculateDiscount(price, discount) {\n  return price - (price * discount);\n}\n\nfunction processOrder(order) {\n  order.total = calculateDiscount(order.price, order.discount);\n  // further processing ...\n  return order;\n}\n```\nWhich refactored version best enhances modularity and reusability by separating concerns?",
        "options": [
            {
                "description": "function applyDiscount(price, discount) {\n  return price * (1 - discount);\n}\n\nfunction processOrder(order, discountFn) {\n  return { ...order, total: discountFn(order.price, order.discount) };\n}\n\nconst order = { price: 100, discount: 0.1 };\nconsole.log(processOrder(order, applyDiscount));",
                "isAnswerKey": true
            },
            {
                "description": "function processOrder(order) {\n  order.total = order.price - (order.price * order.discount);\n  return order;\n}",
                "isAnswerKey": false
            },
            {
                "description": "const calculateDiscount = (order) => order.price - (order.price * order.discount);\nfunction processOrder(order) {\n  order.total = calculateDiscount(order);\n  return order;\n}",
                "isAnswerKey": false
            },
            {
                "description": "function applyDiscount(price, discount) {\n  return price - discount;\n}\n\nfunction processOrder(order) {\n  order.total = applyDiscount(order.price, order.discount);\n  return order;\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "350",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following function that creates a user object:\n```\nfunction createUser(name, age) {\n  age = age || 18;\n  return { name, age };\n}\n```\nWhich refactored version uses modern JavaScript best practices for handling default parameters?",
        "options": [
            {
                "description": "function createUser(name, age = 18) {\n  return { name, age };\n}",
                "isAnswerKey": true
            },
            {
                "description": "function createUser(name, age) {\n  age = age || 18;\n  return { name, age };\n}",
                "isAnswerKey": false
            },
            {
                "description": "function createUser(name, age) {\n  if(age === undefined) {\n    age = 18;\n  }\n  return { name, age };\n}",
                "isAnswerKey": false
            },
            {
                "description": "const createUser = (name, age) => {\n  return { name, age };\n}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "351",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following Express middleware function:\n```\nfunction logger(req, res, next) {\n  console.log(`${req.method} ${req.url}`);\n  next();\n}\napp.use(logger);\n```\nWhat is the primary purpose of this middleware?",
        "options": [
            {
                "description": "Logging incoming HTTP requests",
                "isAnswerKey": true
            },
            {
                "description": "Handling errors passed via next(err)",
                "isAnswerKey": false
            },
            {
                "description": "Routing requests to appropriate handlers",
                "isAnswerKey": false
            },
            {
                "description": "Serving static files",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "352",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following React functional component:\n```\nimport React from 'react';\n\nconst Greeting = ({ name }) => {\n  return <h1>Hello, {name}!</h1>;\n}\n\nexport default Greeting;\n```\nWhat will be rendered when the component is used as <Greeting name='Alice' />?",
        "options": [
            {
                "description": "Hello, undefined!",
                "isAnswerKey": false
            },
            {
                "description": "Hello, Alice!",
                "isAnswerKey": true
            },
            {
                "description": "An error due to missing props declaration",
                "isAnswerKey": false
            },
            {
                "description": "Nothing, because no state is provided",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "353",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following Express error-handling middleware:\n```\nfunction errorHandler(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n}\napp.use(errorHandler);\n```\nWhat is the role of this middleware?",
        "options": [
            {
                "description": "Logging all incoming requests",
                "isAnswerKey": false
            },
            {
                "description": "Handling errors passed via next(err)",
                "isAnswerKey": true
            },
            {
                "description": "Routing requests to proper endpoints",
                "isAnswerKey": false
            },
            {
                "description": "Serving static files based on the URL",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "354",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following Node.js HTTP server code:\n```\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('OK');\n});\nserver.listen(3000);\n```\nWhat does this code accomplish?",
        "options": [
            {
                "description": "Creates an HTTP client that connects to port 3000",
                "isAnswerKey": false
            },
            {
                "description": "Sets up an HTTP server on port 3000 that responds with 'OK'",
                "isAnswerKey": true
            },
            {
                "description": "Creates a TCP server that listens for socket connections",
                "isAnswerKey": false
            },
            {
                "description": "Sets up a WebSocket server for real-time communication",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "355",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following ES module code snippet:\n```\nexport function add(a, b) {\n  return a + b;\n}\n```\nWhat is the effect of this code?",
        "options": [
            {
                "description": "Declares a local function without exporting it",
                "isAnswerKey": false
            },
            {
                "description": "Exports the function so it can be imported into other modules",
                "isAnswerKey": true
            },
            {
                "description": "Imports a function from another module",
                "isAnswerKey": false
            },
            {
                "description": "Declares a global function accessible anywhere",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "356",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "In designing a feature that requires request interceptors, consider the following code snippet:\n```\naxios.interceptors.request.use(config => {\n  // modify config\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n```\nWhich library does this code snippet belong to?",
        "options": [
            {
                "description": "fetch",
                "isAnswerKey": false
            },
            {
                "description": "axios",
                "isAnswerKey": true
            },
            {
                "description": "superagent",
                "isAnswerKey": false
            },
            {
                "description": "request",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "357",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following reducer snippet:\n```\nconst initialState = { count: 0 };\nfunction counterReducer(state = initialState, action) {\n  switch(action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n}\n```\nWhich state management pattern does this code demonstrate?",
        "options": [
            {
                "description": "Flux",
                "isAnswerKey": false
            },
            {
                "description": "Redux",
                "isAnswerKey": true
            },
            {
                "description": "MobX",
                "isAnswerKey": false
            },
            {
                "description": "RxJS",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "358",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the utility function below:\n```\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n```\nWhat is the main benefit of using async/await when integrating delay() in asynchronous code?",
        "options": [
            {
                "description": "It forces synchronous execution",
                "isAnswerKey": false
            },
            {
                "description": "It improves code readability and error handling",
                "isAnswerKey": true
            },
            {
                "description": "It speeds up code execution",
                "isAnswerKey": false
            },
            {
                "description": "It optimizes memory usage",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "359",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following module import statements:\n```\nconst math = require('./math');\n```\n\nand\n\n```\nimport * as math from './math';\n```\nWhich of the following is an advantage of using the ES6 import syntax as shown in the second statement?",
        "options": [
            {
                "description": "It uses the CommonJS module system",
                "isAnswerKey": false
            },
            {
                "description": "It allows static analysis and tree shaking",
                "isAnswerKey": true
            },
            {
                "description": "It loads modules dynamically at runtime",
                "isAnswerKey": false
            },
            {
                "description": "It is not supported in modern browsers",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "360",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following RxJS code snippet:\n```\nimport { of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nof('Hello').pipe(delay(1000)).subscribe(console.log);\n```\nWhich advantage of using RxJS Observables is best demonstrated here?",
        "options": [
            {
                "description": "They can emit multiple values over time",
                "isAnswerKey": true
            },
            {
                "description": "They simplify debugging of asynchronous code",
                "isAnswerKey": false
            },
            {
                "description": "They execute code faster than promises",
                "isAnswerKey": false
            },
            {
                "description": "They automatically manage unsubscriptions",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "361",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "File: counter.js\n```\nlet count = 0;\nmodule.exports.increment = function() {\n  count++;\n  return count;\n};\n```\nFile: app.js\n```\nconst counter = require('./counter');\nconsole.log(counter.increment());\nconsole.log(counter.increment());\n```\nIf the module 'counter.js' is imported in multiple files, what potential issue might arise from this pattern?",
        "options": [
            {
                "description": "Each import creates a separate instance of count",
                "isAnswerKey": false
            },
            {
                "description": "The counter state is shared across files, possibly leading to unintended side effects",
                "isAnswerKey": true
            },
            {
                "description": "The increment function will not work as intended",
                "isAnswerKey": false
            },
            {
                "description": "An error will be thrown upon multiple imports",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "362",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "File: dataFetcher.js\n```\nlet dataCache = null;\nmodule.exports.fetchData = function(callback) {\n  if(dataCache) {\n    callback(dataCache);\n  } else {\n    setTimeout(() => {\n      dataCache = { value: 42 };\n      callback(dataCache);\n    }, 100);\n  }\n};\n```\nFile: app.js\n```\nconst { fetchData } = require('./dataFetcher');\nfetchData(data => console.log(data.value));\nfetchData(data => console.log(data.value));\n```\nWhat potential issue does this caching approach present in a concurrent environment?",
        "options": [
            {
                "description": "The first call may return stale data",
                "isAnswerKey": false
            },
            {
                "description": "The second call might receive undefined",
                "isAnswerKey": false
            },
            {
                "description": "Multiple concurrent calls could trigger redundant fetches leading to race conditions",
                "isAnswerKey": true
            },
            {
                "description": "The setTimeout callback will only execute once",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "363",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "File: eventBus.js\n```\nconst events = {};\nmodule.exports.on = function(event, listener) {\n  events[event] = events[event] || [];\n  events[event].push(listener);\n};\nmodule.exports.emit = function(event, data) {\n  (events[event] || []).forEach(listener => listener(data));\n};\n```\nFile: app.js\n```\nconst eventBus = require('./eventBus');\nfor (var i = 0; i < 3; i++) {\n  eventBus.on('tick', function(data) {\n    console.log(i, data);\n  });\n}\neventBus.emit('tick', 'Test');\n```\nWhat will likely be logged when 'tick' is emitted, and why?",
        "options": [
            {
                "description": "It will log '0 Test', '1 Test', '2 Test' because the loop variable is block-scoped",
                "isAnswerKey": false
            },
            {
                "description": "It will log '3 Test' three times due to var hoisting",
                "isAnswerKey": true
            },
            {
                "description": "It will log 'undefined Test' three times",
                "isAnswerKey": false
            },
            {
                "description": "It will throw a runtime error",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "364",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Module A (a.js):\n```\nconst b = require('./b');\nmodule.exports.foo = function() { return 'foo' + b.bar(); }\n```\nModule B (b.js):\n```\nconst a = require('./a');\nmodule.exports.bar = function() { return 'bar' + a.foo(); }\n```\nWhat issue might arise from these module definitions?",
        "options": [
            {
                "description": "They will execute correctly without any issues",
                "isAnswerKey": false
            },
            {
                "description": "A circular dependency may occur, resulting in undefined values",
                "isAnswerKey": true
            },
            {
                "description": "They will cause a syntax error during module parsing",
                "isAnswerKey": false
            },
            {
                "description": "They will result in a memory leak",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "365",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "File: api.js\n```\nfunction fetchUser(id) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if(id > 0) resolve({ id, name: 'User' + id });\n      else reject('Invalid ID');\n    }, 100);\n  });\n}\nmodule.exports = { fetchUser };\n```\nFile: app.js\n```\nconst { fetchUser } = require('./api');\nlet user;\nfetchUser(-1).then(data => {\n  user = data;\n});\nconsole.log(user);\n```\nWhat is the bug in the 'app.js' code regarding asynchronous operations?",
        "options": [
            {
                "description": "The promise is not properly awaited, causing console.log to execute before resolution",
                "isAnswerKey": true
            },
            {
                "description": "The condition in fetchUser is incorrect",
                "isAnswerKey": false
            },
            {
                "description": "The module exports are defined improperly",
                "isAnswerKey": false
            },
            {
                "description": "The setTimeout delay is too short for proper execution",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "366",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following function:\n```\nfunction processItems(items) {\n  let result = [];\n  for (let i = 0; i < items.length; i++) {\n    result.push(items[i] * 2);\n  }\n  return result;\n}\n```\nWhich refactoring improves clarity without altering functionality?",
        "options": [
            {
                "description": "Replace the for loop with items.map(item => item * 2)",
                "isAnswerKey": true
            },
            {
                "description": "Replace the for loop with a for...in loop",
                "isAnswerKey": false
            },
            {
                "description": "Refactor the code to use recursion",
                "isAnswerKey": false
            },
            {
                "description": "Remove the result array initialization",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "367",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Given the following React component:\n```\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n  increment() {\n    this.setState({ count: this.state.count + 1 });\n  }\n  render() {\n    return <button onClick={() => this.increment()}>{this.state.count}</button>;\n  }\n}\n```\nWhich refactoring would most improve its conciseness and readability?",
        "options": [
            {
                "description": "Converting it to a functional component using the useState hook",
                "isAnswerKey": true
            },
            {
                "description": "Converting it to a pure class component",
                "isAnswerKey": false
            },
            {
                "description": "Integrating Redux for local state management",
                "isAnswerKey": false
            },
            {
                "description": "Removing the constructor entirely",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "368",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following event listener code:\n```\nwindow.addEventListener('resize', () => {\n  console.log('Resized');\n});\n```\nWhich refactoring approach can optimize performance by reducing the frequency of the event handler execution?",
        "options": [
            {
                "description": "Wrap the handler in a debounce function",
                "isAnswerKey": true
            },
            {
                "description": "Increase the number of event listeners",
                "isAnswerKey": false
            },
            {
                "description": "Remove the event listener entirely",
                "isAnswerKey": false
            },
            {
                "description": "Replace the callback with a synchronous loop",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "369",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the nested promise code below:\n```\ndoSomething()\n  .then(result => {\n    doAnotherThing(result)\n      .then(newResult => {\n        doThirdThing(newResult)\n          .then(finalResult => {\n            console.log(finalResult);\n          });\n      });\n  });\n```\nWhich refactoring would improve readability and error handling?",
        "options": [
            {
                "description": "Convert the code to use async/await syntax",
                "isAnswerKey": true
            },
            {
                "description": "Revert the code to use plain callbacks",
                "isAnswerKey": false
            },
            {
                "description": "Increase the nesting levels for clarity",
                "isAnswerKey": false
            },
            {
                "description": "Eliminate error handling to simplify the flow",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "370",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following duplicated code:\n```\nfunction getUserData(userId) {\n  fetch(`/api/user/${userId}`)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n\nfunction getOrderData(orderId) {\n  fetch(`/api/order/${orderId}`)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n```\nWhich refactoring strategy best reduces duplication?",
        "options": [
            {
                "description": "Create a generic API fetching function for both endpoints",
                "isAnswerKey": true
            },
            {
                "description": "Inline the fetch calls directly in the UI",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate the code further for each API call",
                "isAnswerKey": false
            },
            {
                "description": "Eliminate fetch calls and use synchronous HTTP requests",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "371",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following code snippet:\n```\nfunction withLogger(WrappedComponent) {\n  return function(props) {\n    console.log('Rendering', props);\n    return WrappedComponent(props);\n  };\n}\n```\nWhich design pattern does this code represent?",
        "options": [
            {
                "description": "Higher-order component",
                "isAnswerKey": true
            },
            {
                "description": "Singleton",
                "isAnswerKey": false
            },
            {
                "description": "Factory",
                "isAnswerKey": false
            },
            {
                "description": "Observer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "372",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following class definition:\n```\nclass Service {\n  constructor(db) {\n    this.db = db;\n  }\n  getData() {\n    return this.db.query('SELECT * FROM data');\n  }\n}\n```\nWhat design pattern is illustrated by passing the db dependency into the Service constructor?",
        "options": [
            {
                "description": "Facade",
                "isAnswerKey": false
            },
            {
                "description": "Dependency Injection",
                "isAnswerKey": true
            },
            {
                "description": "Singleton",
                "isAnswerKey": false
            },
            {
                "description": "Prototype",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "373",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Look at the following Express middleware function:\n```\nfunction authMiddleware(req, res, next) {\n  if(req.user) {\n    next();\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n}\n```\nWhich architectural pattern does this middleware exemplify?",
        "options": [
            {
                "description": "Observer",
                "isAnswerKey": false
            },
            {
                "description": "Middleware",
                "isAnswerKey": true
            },
            {
                "description": "Strategy",
                "isAnswerKey": false
            },
            {
                "description": "Proxy",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "374",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the code below:\n```\nclass Car {\n  constructor() {\n    this.wheels = 4;\n  }\n}\nclass Truck {\n  constructor() {\n    this.wheels = 6;\n  }\n}\nfunction vehicleFactory(type) {\n  if(type === 'car') {\n    return new Car();\n  }\n  if(type === 'truck') {\n    return new Truck();\n  }\n}\n```\nWhich design pattern is demonstrated by the vehicleFactory function?",
        "options": [
            {
                "description": "Singleton",
                "isAnswerKey": false
            },
            {
                "description": "Factory",
                "isAnswerKey": true
            },
            {
                "description": "Adapter",
                "isAnswerKey": false
            },
            {
                "description": "Observer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "375",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following higher-order function:\n```\nfunction withCache(fn) {\n  const cache = new Map();\n  return function(...args) {\n    const key = JSON.stringify(args);\n    if(cache.has(key)) {\n      return cache.get(key);\n    }\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  };\n}\n```\nWhich design pattern is illustrated by this function?",
        "options": [
            {
                "description": "Memoization (Decorator pattern)",
                "isAnswerKey": true
            },
            {
                "description": "Observer",
                "isAnswerKey": false
            },
            {
                "description": "Singleton",
                "isAnswerKey": false
            },
            {
                "description": "Strategy",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "376",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following JavaScript code snippet. Which design pattern is being used to ensure that only one instance of a Logger is created?\n\n```javascript\nlet Logger = (function() {\n  let instance;\n  function createInstance() {\n    return { log: function(msg) { console.log(msg); } };\n  }\n  return {\n    getInstance: function() {\n      if (!instance) {\n        instance = createInstance();\n      }\n      return instance;\n    }\n  };\n})();\n\nconst logger1 = Logger.getInstance();\nconst logger2 = Logger.getInstance();\n```\n",
        "options": [
            {
                "description": "Module Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Factory Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "377",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following code snippet. Which design pattern is illustrated by the following implementation that enables event subscription and notification?\n\n```javascript\nclass EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n  on(event, listener) {\n    if (!this.events[event]) this.events[event] = [];\n    this.events[event].push(listener);\n  }\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(listener => listener.apply(this, args));\n    }\n  }\n}\n```\n",
        "options": [
            {
                "description": "Observer Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Factory Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Module Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "378",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following code snippet. What design pattern does it best illustrate by coordinating interaction between multiple components without them referring to each other directly?\n\n```javascript\nclass Mediator {\n  constructor() {\n    this.components = [];\n  }\n  register(component) {\n    this.components.push(component);\n    component.mediator = this;\n  }\n  notify(sender, event) {\n    this.components.forEach(comp => {\n      if (comp !== sender && typeof comp.receive === 'function') {\n        comp.receive(event);\n      }\n    });\n  }\n}\n\nclass Component {\n  constructor(name) {\n    this.name = name;\n  }\n  send(event) {\n    this.mediator.notify(this, event);\n  }\n  receive(event) {\n    console.log(`${this.name} received ${event}`);\n  }\n}\n```\n",
        "options": [
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Mediator Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Strategy Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "379",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "In the following code snippet, which design pattern is applied to separate an abstraction (Shape) from its implementation (drawing colors), allowing them to vary independently?\n\n```javascript\nclass Shape {\n  constructor(implementation) {\n    this.implementation = implementation;\n  }\n  draw() {\n    this.implementation.draw();\n  }\n}\n\nclass RedCircle {\n  draw() {\n    console.log('Drawing red circle');\n  }\n}\n\nclass BlueCircle {\n  draw() {\n    console.log('Drawing blue circle');\n  }\n}\n\nconst shape1 = new Shape(new RedCircle());\nshape1.draw();\n```\n",
        "options": [
            {
                "description": "Bridge Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Adapter Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Decorator Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Facade Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "380",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which design pattern is demonstrated by the following code snippet that abstracts the creation of different vehicle objects based on a given type?\n\n```javascript\nfunction createVehicle(type) {\n  if (type === 'car') {\n    return { wheels: 4, drive: () => console.log('Driving a car') };\n  } else if (type === 'bike') {\n    return { wheels: 2, drive: () => console.log('Riding a bike') };\n  }\n}\n\nconst myVehicle = createVehicle('car');\nmyVehicle.drive();\n```\n",
        "options": [
            {
                "description": "Builder Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Factory Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Prototype Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "381",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Inspect the following snippet. It starts a polling process but leads to a memory leak. What is the root cause of this issue?\n\n```javascript\nfunction startPolling() {\n  setInterval(() => {\n    fetchData();\n  }, 1000);\n}\n\nstartPolling();\n```\n",
        "options": [
            {
                "description": "Unbounded recursion in fetchData",
                "isAnswerKey": false
            },
            {
                "description": "setInterval is never cleared",
                "isAnswerKey": true
            },
            {
                "description": "fetchData is a synchronous function",
                "isAnswerKey": false
            },
            {
                "description": "Improper use of arrow functions",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "382",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following code snippet simulating a withdrawal operation. What deep technical issue might arise when two withdrawals are executed concurrently?\n\n```javascript\nlet balance = 100;\n\nfunction withdraw(amount) {\n  if (balance >= amount) {\n    setTimeout(() => {\n      balance -= amount;\n      console.log(`Withdrawn ${amount}, new balance: ${balance}`);\n    }, Math.random() * 100);\n  }\n}\n\nwithdraw(80);\nwithdraw(50);\n```\n",
        "options": [
            {
                "description": "Memory leak due to setTimeout",
                "isAnswerKey": false
            },
            {
                "description": "Race condition from delayed state updates",
                "isAnswerKey": true
            },
            {
                "description": "Synchronous blocking of the event loop",
                "isAnswerKey": false
            },
            {
                "description": "Undefined behavior in setTimeout callback",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "383",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following asynchronous function. What potential bug might occur due to the error handling approach used?\n\n```javascript\nasync function fetchData() {\n  let result;\n  try {\n    result = await fetch('invalid_url');\n  } catch (e) {\n    // Error is swallowed\n  }\n  return result.json();\n}\n```\n",
        "options": [
            {
                "description": "A race condition on the 'result' variable",
                "isAnswerKey": false
            },
            {
                "description": "A memory leak due to unresolved promises",
                "isAnswerKey": false
            },
            {
                "description": "An unhandled exception because result might be undefined",
                "isAnswerKey": true
            },
            {
                "description": "Synchronous blocking due to improper async usage",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "384",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following code where two asynchronous functions increment a shared counter concurrently. What is the primary issue with this pattern?\n\n```javascript\nlet counter = 0;\n\nfunction increment() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      counter += 1;\n      resolve(counter);\n    }, 50);\n  });\n}\n\nasync function runIncrements() {\n  const results = await Promise.all([increment(), increment()]);\n  console.log(results);\n}\n\nrunIncrements();\n```\n",
        "options": [
            {
                "description": "Race condition due to concurrent modifications of 'counter'",
                "isAnswerKey": true
            },
            {
                "description": "Deadlock because of Promise.all",
                "isAnswerKey": false
            },
            {
                "description": "Memory leak from unreferenced promises",
                "isAnswerKey": false
            },
            {
                "description": "Synchronous blocking of the event loop",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "385",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following implementation that loads user data concurrently. What is a potential deep technical issue in this approach when one of the requests fails?\n\n```javascript\nasync function getUserData(ids) {\n  return Promise.all(ids.map(async id => {\n    const res = await fetch(`/api/user/${id}`);\n    return res.json();\n  }));\n}\n\ngetUserData([1,2,3]).then(console.log);\n```\n",
        "options": [
            {
                "description": "A race condition between network requests",
                "isAnswerKey": false
            },
            {
                "description": "Lack of individual error handling causing the entire operation to fail",
                "isAnswerKey": true
            },
            {
                "description": "Memory leak from unresolved promises",
                "isAnswerKey": false
            },
            {
                "description": "Synchronous blocking of the UI thread",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "386",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "The following code implements a plugin system using middleware functions. What design pattern is most clearly demonstrated by this approach?\n\n```javascript\nclass PluginManager {\n  constructor() {\n    this.plugins = [];\n  }\n  use(plugin) {\n    this.plugins.push(plugin);\n  }\n  execute(initialData) {\n    return this.plugins.reduce((data, plugin) => plugin(data), initialData);\n  }\n}\n\nconst addTimestamp = data => ({ ...data, timestamp: Date.now() });\nconst addId = data => ({ ...data, id: Math.random().toString(36).substr(2, 9) });\n\nconst manager = new PluginManager();\nmanager.use(addTimestamp);\nmanager.use(addId);\nconsole.log(manager.execute({}));\n```\n",
        "options": [
            {
                "description": "Middleware Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Factory Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Prototype Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "387",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following modular state management implementation. Which architectural pattern does this code best exemplify?\n\n```javascript\nfunction createStore(reducer, initialState) {\n  let state = initialState;\n  const listeners = [];\n  \n  return {\n    dispatch(action) {\n      state = reducer(state, action);\n      listeners.forEach(listener => listener());\n    },\n    getState() {\n      return state;\n    },\n    subscribe(listener) {\n      listeners.push(listener);\n      return () => {\n        const index = listeners.indexOf(listener);\n        if (index > -1) listeners.splice(index, 1);\n      };\n    }\n  };\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'INCREMENT': return state + 1;\n    default: return state;\n  }\n};\n\nconst store = createStore(reducer, 0);\n```\n",
        "options": [
            {
                "description": "Observer Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Mediator Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Adapter Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "388",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following code snippet that involves a database and its adapter implementations. What architectural principle is being demonstrated by passing the adapter into the Database constructor?\n\n```javascript\nclass Database {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n  query(sql) {\n    return this.adapter.execute(sql);\n  }\n}\n\nclass MySQLAdapter {\n  execute(sql) {\n    // Implementation for MySQL\n    return `MySQL results for ${sql}`;\n  }\n}\n\nclass PostgresAdapter {\n  execute(sql) {\n    // Implementation for Postgres\n    return `Postgres results for ${sql}`;\n  }\n}\n\nconst db = new Database(new MySQLAdapter());\n```\n",
        "options": [
            {
                "description": "Dependency Injection",
                "isAnswerKey": true
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Adapter Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "389",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the plugin architecture implemented in the snippet below. What design concept does this approach best illustrate?\n\n```javascript\nclass Application {\n  constructor() {\n    this.plugins = [];\n  }\n  register(plugin) {\n    this.plugins.push(plugin);\n    plugin.init(this);\n  }\n}\n\nconst authPlugin = {\n  init(app) {\n    app.authenticate = () => console.log('Authenticated');\n  }\n};\n\nconst app = new Application();\napp.register(authPlugin);\napp.authenticate();\n```\n",
        "options": [
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Plugin Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Factory Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "390",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the following Router implementation. Which design pattern does this approach most closely resemble by selecting a handler based on input criteria?\n\n```javascript\nclass Router {\n  constructor() {\n    this.routes = {};\n  }\n  addRoute(method, path, handler) {\n    if (!this.routes[path]) {\n      this.routes[path] = {};\n    }\n    this.routes[path][method] = handler;\n  }\n  handle(request) {\n    const route = this.routes[request.path];\n    if (route && route[request.method]) {\n      return route[request.method](request);\n    }\n    throw new Error('Route not found');\n  }\n}\n```\n",
        "options": [
            {
                "description": "Mediator Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Strategy Pattern",
                "isAnswerKey": true
            },
            {
                "description": "State Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "391",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "The following monolithic function handles multiple concerns such as validation, computation, and logging. Which refactoring technique would best improve its modularity and testability?\n\n```javascript\nfunction processOrder(order) {\n  // Validate order\n  if (!order.customerId || !order.items || order.items.length === 0) {\n    throw new Error('Invalid order');\n  }\n  \n  // Calculate total\n  let total = 0;\n  order.items.forEach(item => {\n    total += item.price * item.quantity;\n  });\n  \n  // Process payment\n  if (order.paymentMethod === 'credit') {\n    // complex logic here...\n  } else if (order.paymentMethod === 'paypal') {\n    // different complex logic...\n  }\n  \n  // Log order\n  console.log('Order processed:', order.id);\n  return total;\n}\n```\n",
        "options": [
            {
                "description": "Extract Function to isolate each concern",
                "isAnswerKey": true
            },
            {
                "description": "Inline all variables for brevity",
                "isAnswerKey": false
            },
            {
                "description": "Rename variables to enhance clarity",
                "isAnswerKey": false
            },
            {
                "description": "Merge validation and logging into one function",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "392",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the code snippet used for data processing that involves a heavy computation inside a loop. What optimization strategy can mitigate the performance issues observed in this production-level code?\n\n```javascript\nfunction processData(data) {\n  let results = [];\n  for (let i = 0; i < data.length; i++) {\n    // Simulate heavy computation\n    let computation = 0;\n    for (let j = 0; j < 100000; j++) {\n      computation += Math.sqrt(j);\n    }\n    results.push(data[i] + computation);\n  }\n  return results;\n}\n```\n",
        "options": [
            {
                "description": "Use memoization to cache and reuse the results of heavy computations",
                "isAnswerKey": true
            },
            {
                "description": "Increase the loop counters to reduce iterations",
                "isAnswerKey": false
            },
            {
                "description": "Replace loops with recursive calls",
                "isAnswerKey": false
            },
            {
                "description": "Convert heavy computation to synchronous processing",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "393",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "In the following code, the OrderProcessor class handles multiple responsibilities, leading to tight coupling. Which refactoring would best improve its modularity?\n\n```javascript\nclass OrderProcessor {\n  process(order) {\n    // Validate order\n    if (!order.items || order.items.length === 0) {\n      throw new Error('Invalid order');\n    }\n    \n    // Payment processing\n    if (order.paymentMethod === 'credit') {\n      // credit card processing logic\n    } else if (order.paymentMethod === 'paypal') {\n      // PayPal processing logic\n    }\n    \n    // Notification\n    this.sendNotification(order.customerId, 'Order processed');\n  }\n  \n  sendNotification(customerId, message) {\n    // Send notification via email\n    console.log(`Notification sent to ${customerId}: ${message}`);\n  }\n}\n```\n",
        "options": [
            {
                "description": "Extract the payment processing and notification logic into separate modules",
                "isAnswerKey": true
            },
            {
                "description": "Inline the sendNotification method within process()",
                "isAnswerKey": false
            },
            {
                "description": "Remove error handling to simplify the function",
                "isAnswerKey": false
            },
            {
                "description": "Merge the two payment methods into one conditional",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "394",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "The snippet below shows a mix of ES5 and ES6 syntax in creating objects. Which refactoring strategy will best ensure consistency and future maintainability?\n\n```javascript\nfunction Car(model) {\n  this.model = model;\n}\nCar.prototype.drive = function() {\n  console.log('Driving ' + this.model);\n};\n\nclass Bike {\n  constructor(model) {\n    this.model = model;\n  }\n  ride() {\n    console.log(`Riding ${this.model}`);\n  }\n}\n```\n",
        "options": [
            {
                "description": "Convert all constructors to ES6 classes",
                "isAnswerKey": true
            },
            {
                "description": "Convert ES6 classes to ES5 constructor functions",
                "isAnswerKey": false
            },
            {
                "description": "Wrap both implementations in an IIFE",
                "isAnswerKey": false
            },
            {
                "description": "Change prototype methods to arrow functions",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "395",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Analyze the asynchronous code snippet below, which suffers from deeply nested callbacks. Which refactoring approach would most effectively enhance its readability and scalability?\n\n```javascript\nfunction fetchData(callback) {\n  getData(function(err, data) {\n    if (err) return callback(err);\n    processData(data, function(err, processed) {\n      if (err) return callback(err);\n      saveData(processed, function(err, result) {\n        if (err) return callback(err);\n        callback(null, result);\n      });\n    });\n  });\n}\n```\n",
        "options": [
            {
                "description": "Convert the callback chain to Promises/async-await",
                "isAnswerKey": true
            },
            {
                "description": "Increase the level of nesting to better organize the code",
                "isAnswerKey": false
            },
            {
                "description": "Remove error handling altogether",
                "isAnswerKey": false
            },
            {
                "description": "Replace callbacks with multiple setTimeout calls",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "396",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a legacy codebase, two modules implement user data fetching using different approaches. What global refactoring strategy would best enforce consistent API calls across teams?\n\n```javascript\n// Module A\nfunction fetchUser(id) {\n  return $.ajax(`/users/${id}`);\n}\n\n// Module B\nfunction getUserData(id) {\n  return new Promise((resolve, reject) => {\n    $.get(`/users/${id}`, function(data) {\n      resolve(data);\n    }).fail(reject);\n  });\n}\n```\n",
        "options": [
            {
                "description": "Implement a centralized API client service",
                "isAnswerKey": true
            },
            {
                "description": "Continue using jQuery AJAX in all modules",
                "isAnswerKey": false
            },
            {
                "description": "Convert all functions to simple vanilla JavaScript without promises",
                "isAnswerKey": false
            },
            {
                "description": "Increase the use of callbacks for better control",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "397",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the following utility functions that handle localStorage operations. What systemic issue do they reveal, and what architectural improvement should be applied?\n\n```javascript\nfunction saveData(data) {\n  try {\n    localStorage.setItem('data', JSON.stringify(data));\n  } catch (e) {\n    console.error('Failed to save data', e);\n  }\n}\n\nfunction loadData() {\n  try {\n    return JSON.parse(localStorage.getItem('data'));\n  } catch (e) {\n    console.error('Failed to load data', e);\n    return null;\n  }\n}\n```\n",
        "options": [
            {
                "description": "Introduce a global error handler middleware to standardize error processing",
                "isAnswerKey": true
            },
            {
                "description": "Remove all try-catch blocks to simplify the logic",
                "isAnswerKey": false
            },
            {
                "description": "Switch to synchronous storage operations",
                "isAnswerKey": false
            },
            {
                "description": "Duplicate the error handling in every similar utility function",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "398",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following code snippet from two different modules that implement user retrieval with inconsistent naming conventions. What systemic coding issue is displayed, and what scalable strategy should be enforced?\n\n```javascript\nconst get_user = (id) => {\n  return fetch(`/api/user/${id}`).then(res => res.json());\n};\n\nfunction GetUser(id) {\n  return get_user(id);\n}\n```\n",
        "options": [
            {
                "description": "Inconsistent naming conventions; enforce strict linting and code style guidelines",
                "isAnswerKey": true
            },
            {
                "description": "A memory leak due to redundant functions",
                "isAnswerKey": false
            },
            {
                "description": "A race condition in async data retrieval",
                "isAnswerKey": false
            },
            {
                "description": "Deeply nested callbacks causing stack overflows",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "399",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following scenario where similar business logic is duplicated with inconsistent implementations across modules:\n\n```javascript\n// file: utils1.js\nexport function calculateTax(amount) {\n  return amount * 0.1;\n}\n\n// file: utils2.js\nexport const calculateTax = function(amount) {\n  return amount * 0.15;\n}\n```\n\nWhat systemic issue does this represent and how can it be resolved at scale?\n",
        "options": [
            {
                "description": "Duplicate business logic with inconsistent implementations; enforce a shared library with version control",
                "isAnswerKey": true
            },
            {
                "description": "Memory leaks caused by redundant exports",
                "isAnswerKey": false
            },
            {
                "description": "Race conditions due to simultaneous module loading",
                "isAnswerKey": false
            },
            {
                "description": "Callback hell due to multiple file dependencies",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "400",
        "skill": "javascript",
        "category": "programming language",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a codebase with pervasive asynchronous operations, a global listener for unhandled rejections is implemented as follows:\n\n```javascript\nprocess.on('unhandledRejection', (reason, promise) => {\n  // Log error but do not rethrow\n  console.error('Unhandled Rejection:', reason);\n});\n```\n\nWhat architectural change would best address systemic issues caused by silent asynchronous failures?\n",
        "options": [
            {
                "description": "Propagate errors by exiting the process on unhandled rejections and enforce global error handling via centralized logging middleware",
                "isAnswerKey": true
            },
            {
                "description": "Remove the process event listener to avoid extra logging",
                "isAnswerKey": false
            },
            {
                "description": "Add additional console.log statements to track failures",
                "isAnswerKey": false
            },
            {
                "description": "Wrap every async function in individual try-catch blocks",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "401",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following Git command:\n```\ngit commmit -m \"Initial commit\"\n```\nWhat is the error in this command?",
        "options": [
            {
                "description": "The commit message should not be enclosed in quotes.",
                "isAnswerKey": false
            },
            {
                "description": "The command 'commmit' is misspelled; it should be 'commit'.",
                "isAnswerKey": true
            },
            {
                "description": "There is an extra dash before the message flag.",
                "isAnswerKey": false
            },
            {
                "description": "The repository has not been initialized.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "402",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What does the following command do?\n```\ngit init\n```",
        "options": [
            {
                "description": "Creates a new branch.",
                "isAnswerKey": false
            },
            {
                "description": "Initializes a new Git repository.",
                "isAnswerKey": true
            },
            {
                "description": "Clones an existing repository.",
                "isAnswerKey": false
            },
            {
                "description": "Displays the repository status.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "403",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the Git command below:\n```\ngit commit -m \"Add README file\"\n```\nWhat happens when this command is executed?",
        "options": [
            {
                "description": "It stages all changes and then commits them.",
                "isAnswerKey": false
            },
            {
                "description": "It commits all staged changes with the message \"Add README file\".",
                "isAnswerKey": true
            },
            {
                "description": "It creates a new repository.",
                "isAnswerKey": false
            },
            {
                "description": "It pushes changes to the remote repository.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "404",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following command:\n```\ngit clone https://github.com/user/repo.git my_repo\n```\nIn this command, what does the argument 'my_repo' specify?",
        "options": [
            {
                "description": "The remote repository name.",
                "isAnswerKey": false
            },
            {
                "description": "The branch to be cloned.",
                "isAnswerKey": false
            },
            {
                "description": "The local directory name where the repository will be cloned.",
                "isAnswerKey": true
            },
            {
                "description": "The GitHub username.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "405",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What information does the command below provide?\n```\ngit status\n```\n",
        "options": [
            {
                "description": "It lists all the commit history.",
                "isAnswerKey": false
            },
            {
                "description": "It shows the differences between repository versions.",
                "isAnswerKey": false
            },
            {
                "description": "It displays the state of the working directory and staging area.",
                "isAnswerKey": true
            },
            {
                "description": "It merges branches automatically.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "406",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following shell script snippet:\n```\nif [ \"$BRANCH\" = \"main\" ]; then\n    git push origin main\nelse\n    echo \"Not on main branch\"\nfi\n```\nWhat will be the output if the environment variable BRANCH is set to \"dev\"?",
        "options": [
            {
                "description": "It will push the 'dev' branch to origin.",
                "isAnswerKey": false
            },
            {
                "description": "It will display \"Not on main branch\".",
                "isAnswerKey": true
            },
            {
                "description": "It will result in a syntax error.",
                "isAnswerKey": false
            },
            {
                "description": "It will push the 'main' branch regardless of the value.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "407",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the code snippet below:\n```\nfor branch in $(git branch | sed 's/*//'); do\n  echo \"Checking branch: $branch\"\ndone\n```\nIf the output of `git branch` includes `* main`, `dev`, and `feature`, what will this loop print?",
        "options": [
            {
                "description": "It will print only the branch names without any prefix.",
                "isAnswerKey": false
            },
            {
                "description": "It will print each branch name prefixed with \"Checking branch:\".",
                "isAnswerKey": true
            },
            {
                "description": "It will print only \"dev\" and \"feature\".",
                "isAnswerKey": false
            },
            {
                "description": "It results in an error because of the asterisk.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "408",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the following snippet:\n```\nBRANCH_NAME=\"feature-x\"\nif [ \"$BRANCH_NAME\" == \"main\" ]; then\n    echo \"On main branch\"\nelse\n    echo \"On feature branch\"\nfi\n```\nWhat will be the output of this script?",
        "options": [
            {
                "description": "On main branch.",
                "isAnswerKey": false
            },
            {
                "description": "On feature branch.",
                "isAnswerKey": true
            },
            {
                "description": "Both branch messages will be printed.",
                "isAnswerKey": false
            },
            {
                "description": "A syntax error will occur.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "409",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following sequence of commands:\n```\ngit add .\ngit commit -m \"Update files\"\ngit push origin HEAD\n```\nIn the context of Git, what does 'HEAD' refer to in the push command?",
        "options": [
            {
                "description": "It refers to the very first commit in the repository.",
                "isAnswerKey": false
            },
            {
                "description": "It references the default remote branch.",
                "isAnswerKey": false
            },
            {
                "description": "It indicates the current active branch's latest commit reference.",
                "isAnswerKey": true
            },
            {
                "description": "It signifies the previous commit.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "410",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the purpose of the command shown below?\n```\ngit diff --staged\n```\n",
        "options": [
            {
                "description": "To show changes between the working directory and unstaged files.",
                "isAnswerKey": false
            },
            {
                "description": "To display the differences between committed files.",
                "isAnswerKey": false
            },
            {
                "description": "To show the differences between the staging area and the last commit.",
                "isAnswerKey": true
            },
            {
                "description": "To list all branches that have staged changes.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "411",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Examine the following bash function:\n```\nfilter_commits() {\n  local keyword=$1\n  local commits=($(git log --pretty=format:\"%s\"))\n  for commit in \"${commits[@]}\"; do\n    if [[ $commit == *\"$keyword\"* ]]; then\n      echo $commit\n    fi\n  done\n}\n```\nWhat will be the output when calling `filter_commits \"fix\"`?",
        "options": [
            {
                "description": "It will print all commit hashes containing the word 'fix'.",
                "isAnswerKey": false
            },
            {
                "description": "It will print all commit messages that contain the word 'fix'.",
                "isAnswerKey": true
            },
            {
                "description": "It will delete commits that contain 'fix'.",
                "isAnswerKey": false
            },
            {
                "description": "It will return the count of commits containing 'fix'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "412",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following recursive bash function:\n```\nrecursive_count() {\n  local commit=$1\n  if [ \"$commit\" == \"\" ]; then\n    echo 0\n  else\n    parent=$(git rev-parse \"$commit^\" 2>/dev/null)\n    if [ \"$parent\" == \"\" ]; then\n      echo 1\n    else\n      echo $((1 + $(recursive_count \"$parent\")))\n    fi\n  fi\n}\n```\nWhat is the purpose of this function?",
        "options": [
            {
                "description": "It prints the commit message of the given commit.",
                "isAnswerKey": false
            },
            {
                "description": "It counts the number of commits from the given commit back to the root commit.",
                "isAnswerKey": true
            },
            {
                "description": "It lists all commit authors in the branch.",
                "isAnswerKey": false
            },
            {
                "description": "It determines the merge base between commits.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "413",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the following function:\n```\nget_last_commit() {\n  echo $(git log -1 --pretty=%B)\n}\n```\nWhat does the function `get_last_commit` output?",
        "options": [
            {
                "description": "The abbreviated commit hash of the latest commit.",
                "isAnswerKey": false
            },
            {
                "description": "The name of the current branch.",
                "isAnswerKey": false
            },
            {
                "description": "The full commit message of the latest commit.",
                "isAnswerKey": true
            },
            {
                "description": "A list of files changed in the latest commit.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "414",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following bash function:\n```\nlist_changed_files() {\n  git diff --name-only\n}\n```\nWhat is the role of the `list_changed_files` function when executed?",
        "options": [
            {
                "description": "It lists all tracked files in the repository.",
                "isAnswerKey": false
            },
            {
                "description": "It shows the differences between commits.",
                "isAnswerKey": false
            },
            {
                "description": "It lists only the names of files that have pending changes between the working directory and staging area.",
                "isAnswerKey": true
            },
            {
                "description": "It automatically commits changed files.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "415",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the code snippet below:\n```\nbranches=($(git branch --list))\nfor branch in \"${branches[@]}\"; do\n  echo $branch\ndone\n```\nWhat does this script do?",
        "options": [
            {
                "description": "It prints detailed commit information for each branch.",
                "isAnswerKey": false
            },
            {
                "description": "It prints a list of local branches.",
                "isAnswerKey": true
            },
            {
                "description": "It renames all local branches.",
                "isAnswerKey": false
            },
            {
                "description": "It deletes branches that are no longer needed.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "416",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following function intended to count commits:\n```\ncount_commits() {\n  count=0\n  for commit in $(git log --pretty=oneline); do\n    count=$count+1\n  done\n  echo $count\n}\n```\nWhat is the error, and how can it be fixed?",
        "options": [
            {
                "description": "The commit log command is incorrect; it should use 'git log' without formatting.",
                "isAnswerKey": false
            },
            {
                "description": "The arithmetic operation is incorrect; use count=$((count+1)) or ((count++)).",
                "isAnswerKey": true
            },
            {
                "description": "The function should use backticks instead of $( ).",
                "isAnswerKey": false
            },
            {
                "description": "The echo statement should include quotes around $count.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "417",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Identify the error in the snippet below for printing the latest commit:\n```\nlatest_commit=$(git log -n 1 --format=%H)\necho \"Latest commit is \" + $latest_commit\n```\nWhat is the mistake in this echo command?",
        "options": [
            {
                "description": "The git log command should use %s instead of %H.",
                "isAnswerKey": false
            },
            {
                "description": "The '+' operator is not used for string concatenation in Bash; it should be removed.",
                "isAnswerKey": true
            },
            {
                "description": "The variable latest_commit is not properly quoted.",
                "isAnswerKey": false
            },
            {
                "description": "The command should use backticks for command substitution.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "418",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the function below:\n```\nswitch_branch() {\n  branch=$1\n  git checkout $branch || echo \"Failed to checkout \" . $branch\n}\n```\nWhat is wrong with the error message in the echo statement?",
        "options": [
            {
                "description": "There should be no space before $branch.",
                "isAnswerKey": false
            },
            {
                "description": "The dot operator (.) is not used for string concatenation in Bash; it should be removed.",
                "isAnswerKey": true
            },
            {
                "description": "The git checkout command is missing a flag.",
                "isAnswerKey": false
            },
            {
                "description": "Double brackets should be used for string comparison.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "419",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following function aimed at listing all branches:\n```\nlist_all_branches() {\n  branches=($(git branch --format=\"%(refname:short)\"))\n  for (( i=0; i<=${#branches[@]}; i++ )); do\n    echo ${branches[i]}\n  done\n}\n```\nWhat is the off-by-one error in this loop?",
        "options": [
            {
                "description": "The loop should start with i=1 instead of i=0.",
                "isAnswerKey": false
            },
            {
                "description": "The loop condition should use '<' instead of '<=' to avoid accessing an undefined array index.",
                "isAnswerKey": true
            },
            {
                "description": "The branches array should be enclosed in quotes.",
                "isAnswerKey": false
            },
            {
                "description": "A while loop should be used instead of a for loop.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "420",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Analyze the following script:\n```\nupdate_repo() {\n  git pull origin master\n  if [ $? -ne 0 ]; then\n    echo \"Pull failed\"\n  fi\n}\n```\nAlthough the script functions, what improvement could make error detection more robust?",
        "options": [
            {
                "description": "Use 'git pull' without specifying the branch.",
                "isAnswerKey": false
            },
            {
                "description": "Check for specific error messages instead of only exit codes.",
                "isAnswerKey": false
            },
            {
                "description": "Redirect stderr to stdout for clearer error messages.",
                "isAnswerKey": true
            },
            {
                "description": "Initialize the repository before pulling.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "421",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following function for filtering commit logs:\n```\ngit_log_filter() {\n  if [ \"$1\" == \"error\" ]; then\n    git log --grep=\"error\" --oneline\n  elif [ \"$1\" == \"fix\" ]; then\n    git log --grep=\"fix\" --oneline\n  else\n    git log --oneline\n  fi\n}\n```\nWhat is the expected behavior when calling `git_log_filter \"fix\"`?",
        "options": [
            {
                "description": "It lists all commits containing the word 'error'.",
                "isAnswerKey": false
            },
            {
                "description": "It lists all commits containing the word 'fix'.",
                "isAnswerKey": true
            },
            {
                "description": "It lists all commits with multi-line messages.",
                "isAnswerKey": false
            },
            {
                "description": "It displays only the commit hashes.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "422",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the function below:\n```\ncommit_summary() {\n  message=$(git log -1 --pretty=%s)\n  if [[ $message == *\"fix\"* ]]; then\n    echo \"This commit likely contains bug fixes.\"\n  elif [[ $message == *\"feat\"* ]]; then\n    echo \"This commit likely adds a new feature.\"\n  else\n    echo \"General commit message.\"\n  fi\n}\n```\nIf the latest commit message is \"feat: add new login module\", what does `commit_summary` output?",
        "options": [
            {
                "description": "General commit message.",
                "isAnswerKey": false
            },
            {
                "description": "This commit likely contains bug fixes.",
                "isAnswerKey": false
            },
            {
                "description": "This commit likely adds a new feature.",
                "isAnswerKey": true
            },
            {
                "description": "No output will be produced.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "423",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Analyze the following function intended to merge a feature branch:\n```\nresolve_conflict() {\n  if git merge feature 2>&1 | grep -q \"CONFLICT\"; then\n    echo \"Merge conflict detected. Manual resolution required.\"\n  else\n    echo \"Merge successful.\"\n  fi\n}\n```\nWhat will this function output if a merge conflict occurs when merging the 'feature' branch?",
        "options": [
            {
                "description": "Merge successful.",
                "isAnswerKey": false
            },
            {
                "description": "Merge aborted automatically.",
                "isAnswerKey": false
            },
            {
                "description": "Merge conflict detected. Manual resolution required.",
                "isAnswerKey": true
            },
            {
                "description": "It displays detailed conflict information.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "424",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following function for comparing commit counts between two branches:\n```\ncompare_commits() {\n  count1=$(git rev-list --count $1)\n  count2=$(git rev-list --count $2)\n  if [ $count1 -gt $count2 ]; then\n    echo \"$1 has more commits\"\n  elif [ $count1 -lt $count2 ]; then\n    echo \"$2 has more commits\"\n  else\n    echo \"Both branches have equal commits\"\n  fi\n}\n```\nWhat will be the output of `compare_commits main feature` when branch 'main' has 10 commits and branch 'feature' has 8 commits?",
        "options": [
            {
                "description": "feature has more commits.",
                "isAnswerKey": false
            },
            {
                "description": "main has more commits.",
                "isAnswerKey": true
            },
            {
                "description": "Both branches have equal commits.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to integer comparison.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "425",
        "skill": "github",
        "category": "version control",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following deployment script:\n```\ndeploy_script() {\n  branch=$(git rev-parse --abbrev-ref HEAD)\n  case $branch in\n    main|master)\n      echo \"Deploying to production\"\n      ;;\n    develop)\n      echo \"Deploying to staging\"\n      ;;\n    *)\n      echo \"Deployment aborted: not on a deployable branch\"\n      ;;\n  esac\n}\n```\nIf the current branch is 'feature-xyz', what will `deploy_script()` output?",
        "options": [
            {
                "description": "Deploying to production",
                "isAnswerKey": false
            },
            {
                "description": "Deploying to staging",
                "isAnswerKey": false
            },
            {
                "description": "Deployment aborted: not on a deployable branch",
                "isAnswerKey": true
            },
            {
                "description": "It will default to deploying to production.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "426",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which command, correctly formatted as below, is used to clone a GitHub repository?\n\n```\ngit clone https://github.com/user/repository.git\n```",
        "options": [
            {
                "description": "git init https://github.com/user/repository.git",
                "isAnswerKey": false
            },
            {
                "description": "git clone https://github.com/user/repository.git",
                "isAnswerKey": true
            },
            {
                "description": "git checkout https://github.com/user/repository.git",
                "isAnswerKey": false
            },
            {
                "description": "git fork https://github.com/user/repository.git",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "427",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "What does the following command do?\n\n```\ngit commit -m 'Initial commit'\n```",
        "options": [
            {
                "description": "It stages all changes to be committed.",
                "isAnswerKey": false
            },
            {
                "description": "It creates a new commit with the message 'Initial commit'",
                "isAnswerKey": true
            },
            {
                "description": "It pushes changes to the remote repository.",
                "isAnswerKey": false
            },
            {
                "description": "It reverts changes made to files.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "428",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which Git command is used to add all changed files from the working directory to the staging area?\n\n```\ngit add .\n```",
        "options": [
            {
                "description": "git commit .",
                "isAnswerKey": false
            },
            {
                "description": "git stage all",
                "isAnswerKey": false
            },
            {
                "description": "git add .",
                "isAnswerKey": true
            },
            {
                "description": "git push .",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "429",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "What information does the following command provide?\n\n```\ngit status\n```",
        "options": [
            {
                "description": "It shows the commit history.",
                "isAnswerKey": false
            },
            {
                "description": "It displays the differences between commits.",
                "isAnswerKey": false
            },
            {
                "description": "It shows the current state of the working directory and staging area.",
                "isAnswerKey": true
            },
            {
                "description": "It prints the log of remote branches.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "430",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Given the following command, which one downloads changes from the remote repository without merging them into the current branch?\n\n```\ngit fetch\n```",
        "options": [
            {
                "description": "git pull",
                "isAnswerKey": false
            },
            {
                "description": "git fetch",
                "isAnswerKey": true
            },
            {
                "description": "git commit",
                "isAnswerKey": false
            },
            {
                "description": "git merge",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "431",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which command creates a new branch called 'feature-x' without switching to it?\n\n```\ngit branch feature-x\n```",
        "options": [
            {
                "description": "git branch feature-x",
                "isAnswerKey": true
            },
            {
                "description": "git checkout -b feature-x",
                "isAnswerKey": false
            },
            {
                "description": "git create feature-x",
                "isAnswerKey": false
            },
            {
                "description": "git init feature-x",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "432",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which of the following commands correctly merges the branch 'feature-x' into your current branch?\n\n```\ngit merge feature-x\n```",
        "options": [
            {
                "description": "git merge feature-x",
                "isAnswerKey": true
            },
            {
                "description": "git rebase feature-x",
                "isAnswerKey": false
            },
            {
                "description": "git merge origin/feature-x",
                "isAnswerKey": false
            },
            {
                "description": "git switch feature-x",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "433",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the primary function of the following command?\n\n```\ngit log --oneline\n```",
        "options": [
            {
                "description": "Displaying a brief, one-line summary of each commit",
                "isAnswerKey": true
            },
            {
                "description": "Cloning a remote repository",
                "isAnswerKey": false
            },
            {
                "description": "Showing file differences between commits",
                "isAnswerKey": false
            },
            {
                "description": "Undoing the last commit",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "434",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following Git command, what is its effect?\n\n```\ngit rm file.txt\n```",
        "options": [
            {
                "description": "It permanently deletes file.txt from the repository history.",
                "isAnswerKey": false
            },
            {
                "description": "It deletes file.txt from the working directory and stages the deletion for commit.",
                "isAnswerKey": true
            },
            {
                "description": "It only stages file.txt for commit but leaves the file intact.",
                "isAnswerKey": false
            },
            {
                "description": "It reverts file.txt to the last committed state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "435",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "What does the following Git command accomplish?\n\n```\ngit remote add origin https://github.com/user/repository.git\n```",
        "options": [
            {
                "description": "It adds a new branch named 'origin' in the repository.",
                "isAnswerKey": false
            },
            {
                "description": "It sets the remote repository named 'origin' to the provided URL.",
                "isAnswerKey": true
            },
            {
                "description": "It clones the repository from the given URL.",
                "isAnswerKey": false
            },
            {
                "description": "It pushes the local repository to the specified remote URL.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "436",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following pre-commit Git hook written in bash:\n\n```\n#!/bin/bash\nif ! git diff --cached --quiet; then\n  echo \"You have unstaged changes. Please stage your changes before committing.\"\n  exit 1\nfi\n```\n\nThe intention is to block commits when unstaged changes exist. What is the error in this script?",
        "options": [
            {
                "description": "The script is checking for staged changes instead of unstaged changes.",
                "isAnswerKey": true
            },
            {
                "description": "The script should use 'git diff --name-only' to detect changes.",
                "isAnswerKey": false
            },
            {
                "description": "The exit status is incorrectly set; it should be 0 to block commits.",
                "isAnswerKey": false
            },
            {
                "description": "The script is missing a shebang line.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "437",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "You intend to set up a Git alias to display commit logs in a concise format. Which of the following snippets correctly defines an alias in your .gitconfig to show a one-line log with graph and decoration?\n\n```\n[alias]\n  lg = log --oneline --graph --decorate\n```",
        "options": [
            {
                "description": "lg = log --graph --decorate --oneline",
                "isAnswerKey": false
            },
            {
                "description": "alias lg log --oneline --graph --decorate",
                "isAnswerKey": false
            },
            {
                "description": "[alias]\n  lg = log --oneline --graph --decorate",
                "isAnswerKey": true
            },
            {
                "description": "git config lg 'log --oneline --graph --decorate'",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "438",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "When resolving a merge conflict in a C file, you encounter the following snippet:\n\n```\n<<<<<<< HEAD\nint value = 10;\n=======\nint value = 20\n>>>>>>> feature\n```\n\nWhat issue must be addressed to ensure valid C code?",
        "options": [
            {
                "description": "Remove the conflict markers and add a missing semicolon after 'int value = 20'",
                "isAnswerKey": true
            },
            {
                "description": "Change '<<<<<<< HEAD' to '<<<<<< branch'",
                "isAnswerKey": false
            },
            {
                "description": "Rename the variable in one of the conflicting sections",
                "isAnswerKey": false
            },
            {
                "description": "Add curly braces around the conflicting code",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "439",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the primary function of the following Git command sequence in a bash script?\n\n```\nlatest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))\n```",
        "options": [
            {
                "description": "It creates a new tag for the latest commit.",
                "isAnswerKey": false
            },
            {
                "description": "It retrieves the most recent tag from the repository.",
                "isAnswerKey": true
            },
            {
                "description": "It lists all tags in the repository in reverse order.",
                "isAnswerKey": false
            },
            {
                "description": "It deletes the oldest tag in the repository.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "440",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following excerpt from a .gitignore file:\n\n```\n*.log\nbuild/\n!important.log\n```\n\nWhat does the '!' symbol before 'important.log' signify?",
        "options": [
            {
                "description": "It indicates that important.log is ignored.",
                "isAnswerKey": false
            },
            {
                "description": "It un-ignores or tracks important.log even if it matches a previous ignore pattern.",
                "isAnswerKey": true
            },
            {
                "description": "It comments out the ignore rule for important.log.",
                "isAnswerKey": false
            },
            {
                "description": "It signals an error in the .gitignore file.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "441",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "A developer implemented a pre-push hook with the following code to prevent pushing if the local branch is behind origin:\n\n```\n#!/bin/bash\nif [ $(git rev-list origin/main..HEAD --count) -eq 0 ]; then\n  echo \"No new commits to push.\"\n  exit 1\nfi\n```\n\nHowever, even when there are new commits, the push is blocked. What is the likely issue?",
        "options": [
            {
                "description": "The command 'git rev-list origin/main..HEAD --count' returns zero even when new commits exist due to improper branch reference.",
                "isAnswerKey": true
            },
            {
                "description": "The script should use double quotes around the command substitution.",
                "isAnswerKey": false
            },
            {
                "description": "The exit status should be 'exit 0' to allow pushing when there are new commits.",
                "isAnswerKey": false
            },
            {
                "description": "The hook is correctly written; the issue is with remote repository settings.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "442",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "A developer attempts to rebase their 'feature' branch on top of 'main' using the following script:\n\n```\ngit checkout feature\ngit pull origin main\ngit rebase main\n```\n\nHowever, the branch ends up with a merge commit instead of a linear history. What is the issue in the script?",
        "options": [
            {
                "description": "Using 'git pull origin main' performs a merge instead of fetching and rebasing.",
                "isAnswerKey": true
            },
            {
                "description": "The 'git rebase main' command should be executed before pulling from origin.",
                "isAnswerKey": false
            },
            {
                "description": "The branch 'feature' should not be checked out before pulling.",
                "isAnswerKey": false
            },
            {
                "description": "The script should use 'git merge --no-ff main' to ensure a linear history.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "443",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "After initiating a rebase operation, you encounter the following output:\n\n```\nCONFLICT (content): Merge conflict in app.js\nAutomatic rebase in progress; stop in case of ongoing conflicts.\n```\n\nWhat is the correct next step to properly complete the rebase?",
        "options": [
            {
                "description": "Run 'git rebase --continue' after resolving the conflict in app.js",
                "isAnswerKey": true
            },
            {
                "description": "Abort the rebase with 'git rebase --abort'",
                "isAnswerKey": false
            },
            {
                "description": "Force push with 'git push --force'",
                "isAnswerKey": false
            },
            {
                "description": "Commit the conflict markers to the repository",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "444",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "While attempting to merge a branch using the command below, a developer encounters the error 'fatal: refusing to merge unrelated histories':\n\n```\ngit merge feature\n```\n\nWhich option correctly resolves this error?",
        "options": [
            {
                "description": "git merge feature --allow-unrelated-histories",
                "isAnswerKey": true
            },
            {
                "description": "git merge feature --force",
                "isAnswerKey": false
            },
            {
                "description": "git rebase feature --allow-unrelated-histories",
                "isAnswerKey": false
            },
            {
                "description": "git pull feature --unrelated",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "445",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "A developer accidentally checks out a previous commit using the command below and makes a new commit:\n\n```\ngit checkout HEAD~1\n# Edit files\ngit commit -am \"Emergency fix\"\n```\n\nWhat is the potential issue with creating commits in this detached HEAD state?",
        "options": [
            {
                "description": "The new commit is not attached to any branch and can be easily lost.",
                "isAnswerKey": true
            },
            {
                "description": "It automatically creates a new branch and merges it into main.",
                "isAnswerKey": false
            },
            {
                "description": "It will overwrite the commit history of the main branch.",
                "isAnswerKey": false
            },
            {
                "description": "It triggers a forced rebase on the repository.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "446",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Consider the following git commands used to commit changes for two files:\n\n```\ngit add file1\ngit commit -m \"Update file1\"\ngit add file2\ngit commit -m \"Update file2\"\n```\n\nWhich alternative approach best applies DRY principles to maintain a cleaner commit history?",
        "options": [
            {
                "description": "Combine both files in a single commit: git add file1 file2 && git commit -m \"Update file1 and file2\"",
                "isAnswerKey": true
            },
            {
                "description": "Use git commit --amend after each commit",
                "isAnswerKey": false
            },
            {
                "description": "Commit each file separately using different commit messages",
                "isAnswerKey": false
            },
            {
                "description": "Stage one file, commit, then stage it again with file2",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "447",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following pre-commit hook script snippet:\n\n```\n#!/bin/bash\nif [ ! -z \"$(git diff --cached --name-only | grep '.js')\" ]; then\n  eslint .\n  if [ $? -ne 0 ]; then\n    echo \"Lint errors. Commit aborted.\"\n    exit 1\n  fi\nfi\nif [ ! -z \"$(git diff --cached --name-only | grep '.css')\" ]; then\n  stylelint \"**/*.css\"\n  if [ $? -ne 0 ]; then\n    echo \"Style errors. Commit aborted.\"\n    exit 1\n  fi\nfi\n```\n\nWhich refactoring approach best applies DRY principles to this script?",
        "options": [
            {
                "description": "Extract a function that accepts a file pattern and linter command, and call it for both '.js' and '.css' files.",
                "isAnswerKey": true
            },
            {
                "description": "Remove one of the linter checks because only JavaScript files are important.",
                "isAnswerKey": false
            },
            {
                "description": "Run both eslint and stylelint unconditionally.",
                "isAnswerKey": false
            },
            {
                "description": "Replace the if statements with a case statement for file types.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "448",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "A developer's commit message reads as follows:\n\n```\nFix bug\n```\n\nWhich of the following commit message examples best adheres to good Git practices for clarity and maintainability?",
        "options": [
            {
                "description": "Minor bug fix",
                "isAnswerKey": false
            },
            {
                "description": "Fix bug",
                "isAnswerKey": false
            },
            {
                "description": "Resolve null pointer exception in user authentication module by adding input validation",
                "isAnswerKey": true
            },
            {
                "description": "Bug fix in code",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "449",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the following simplified branching diagram:\n\n```\nmain:   A --- B --- C\n              \\\nfeature:       D --- E\n```\n\nWhich of the following practices would best ensure a clean, linear history for the 'feature' branch before merging it back into 'main'?",
        "options": [
            {
                "description": "Merge the 'feature' branch into 'main' using a non-fast-forward merge",
                "isAnswerKey": false
            },
            {
                "description": "Rebase the 'feature' branch onto the tip of 'main'",
                "isAnswerKey": true
            },
            {
                "description": "Cherry-pick commit D and E onto 'main'",
                "isAnswerKey": false
            },
            {
                "description": "Perform a merge commit with automatic conflict resolution",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "450",
        "skill": "github",
        "category": "version control",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "A developer implements the following commit-msg hook in multiple repositories to enforce conventional commit messages:\n\n```\n#!/bin/sh\ncommit_msg=$(cat $1)\nif ! grep -qE '^(feat|fix|docs|style|refactor|test|chore):' \"$1\"; then\n  echo \"Error: Commit message does not follow conventional format.\"\n  exit 1\nfi\n```\n\nWhich of the following approaches best avoids duplication of this hook logic across multiple repositories?",
        "options": [
            {
                "description": "Manually copy the hook into each repository's .git/hooks directory",
                "isAnswerKey": false
            },
            {
                "description": "Use a global Git template directory to provide a shared hook for all repositories",
                "isAnswerKey": true
            },
            {
                "description": "Remove the hook and rely solely on code reviews",
                "isAnswerKey": false
            },
            {
                "description": "Include the hook inline in each commit message",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "451",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "What does the command below display when executed in a Git repository?\n```\ngit log --oneline\n```",
        "options": [
            {
                "description": "Lists all branches in one line",
                "isAnswerKey": false
            },
            {
                "description": "Displays a condensed commit history with one line per commit",
                "isAnswerKey": true
            },
            {
                "description": "Shows the full commit diff for each commit",
                "isAnswerKey": false
            },
            {
                "description": "Resets the current branch to the latest commit",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "452",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "After running the command below, what information will you see?\n```\ngit status\n```",
        "options": [
            {
                "description": "A list of available Git commands",
                "isAnswerKey": false
            },
            {
                "description": "The status of staged, modified, and untracked files",
                "isAnswerKey": true
            },
            {
                "description": "A detailed commit history",
                "isAnswerKey": false
            },
            {
                "description": "Information about remote branches only",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "453",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the purpose of executing the command below in your Git project?\n```\ngit diff\n```",
        "options": [
            {
                "description": "To compare changes between two commits",
                "isAnswerKey": false
            },
            {
                "description": "To stage changes for committing",
                "isAnswerKey": false
            },
            {
                "description": "To display differences between the working directory and the index",
                "isAnswerKey": true
            },
            {
                "description": "To show the commit history",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "454",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "When you execute the command below, what will the output list?\n```\ngit branch\n```",
        "options": [
            {
                "description": "All remote branches",
                "isAnswerKey": false
            },
            {
                "description": "A list of local branches in the repository",
                "isAnswerKey": true
            },
            {
                "description": "All commits on the current branch",
                "isAnswerKey": false
            },
            {
                "description": "A list of tag names",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "455",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "What does the command below do in a Git project?\n```\ngit clone https://github.com/user/repo.git\n```",
        "options": [
            {
                "description": "Uploads a local repository to GitHub",
                "isAnswerKey": false
            },
            {
                "description": "Creates a local copy of the specified remote repository",
                "isAnswerKey": true
            },
            {
                "description": "Commits changes from the remote repository",
                "isAnswerKey": false
            },
            {
                "description": "Synchronizes the local repository with the remote",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "456",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the command below executed on a feature branch:\n```\ngit rebase master\n```\nWhat is the primary purpose of using 'git rebase' instead of 'git merge'?",
        "options": [
            {
                "description": "It creates a merge commit that preserves the branch history",
                "isAnswerKey": false
            },
            {
                "description": "It reapplies commits on top of 'master' to create a linear history",
                "isAnswerKey": true
            },
            {
                "description": "It discards the feature branch commits in favor of 'master'",
                "isAnswerKey": false
            },
            {
                "description": "It resets the remote repository to match 'master'",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "457",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following snippet that appears during a merge conflict:\n```\n<<<<<<< HEAD\nint value = 10;\n=======\nint value = 20;\n>>>>>>> feature_branch\n```\nWhat does this output indicate?",
        "options": [
            {
                "description": "It shows differences between two unrelated files",
                "isAnswerKey": false
            },
            {
                "description": "It indicates a successful merge",
                "isAnswerKey": false
            },
            {
                "description": "It displays merge conflict markers that require manual resolution",
                "isAnswerKey": true
            },
            {
                "description": "It shows the difference between committed and uncommitted changes",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "458",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "In the interactive prompt shown below, what does the '-p' option do?\n```\n$ git add -p\nStage this hunk [y,n,q,a,d,/,J,K,s,e,?]?\n```",
        "options": [
            {
                "description": "It adds all changes in the working directory",
                "isAnswerKey": false
            },
            {
                "description": "It stages changes patch-by-patch, allowing selective inclusion of modifications",
                "isAnswerKey": true
            },
            {
                "description": "It displays commit history in patch format",
                "isAnswerKey": false
            },
            {
                "description": "It compares differences between branches in a paginated view",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "459",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the effect of executing the following command in a repository with submodules?\n```\ngit submodule update --remote\n```",
        "options": [
            {
                "description": "It initializes submodules for the first time",
                "isAnswerKey": false
            },
            {
                "description": "It updates each submodule to the latest commit on its remote tracking branch",
                "isAnswerKey": true
            },
            {
                "description": "It clones new submodules into the repository",
                "isAnswerKey": false
            },
            {
                "description": "It removes outdated submodules",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "460",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the Git configuration snippet below:\n```\n[alias]\n    co = checkout\n```\nWhat functionality does this configuration provide?",
        "options": [
            {
                "description": "Creates a new branch named 'checkout'",
                "isAnswerKey": false
            },
            {
                "description": "Allows you to use 'git co' as a shortcut for 'git checkout'",
                "isAnswerKey": true
            },
            {
                "description": "Disables the checkout command",
                "isAnswerKey": false
            },
            {
                "description": "Automatically checks out a branch on cloning",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "461",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "A repository contains a .gitignore file with the following content:\n```\n*.log\n!error.log\n```\nIf error.log is still being tracked and appears in 'git status', what is the most likely reason?",
        "options": [
            {
                "description": "The .gitignore file contains a syntax error",
                "isAnswerKey": false
            },
            {
                "description": "error.log was already committed to the repository before this rule was added",
                "isAnswerKey": true
            },
            {
                "description": "The exception rule '!error.log' is misconfigured",
                "isAnswerKey": false
            },
            {
                "description": "Git does not support negation patterns in .gitignore",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "462",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "While rebasing your feature branch onto 'master', you encounter the following output:\n```\n$ git rebase master\nAuto-merging file1.txt\nCONFLICT (content): Merge conflict in file1.txt\n```\nAfter resolving the conflict, which command should be executed to continue the rebase process?",
        "options": [
            {
                "description": "git rebase --abort",
                "isAnswerKey": false
            },
            {
                "description": "git rebase --continue",
                "isAnswerKey": true
            },
            {
                "description": "git commit --amend",
                "isAnswerKey": false
            },
            {
                "description": "git merge --continue",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "463",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following Git commit history snippet:\n```\nabcd123 Fix critical bug\n3ad4f56 Add experimental feature\nefgh789 Improve performance\n```\nIf you determine that commit '3ad4f56' is problematic, which command would reverse its changes without rewriting history?",
        "options": [
            {
                "description": "git reset 3ad4f56",
                "isAnswerKey": false
            },
            {
                "description": "git revert 3ad4f56",
                "isAnswerKey": true
            },
            {
                "description": "git rebase -i 3ad4f56",
                "isAnswerKey": false
            },
            {
                "description": "git cherry-pick -n 3ad4f56",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "464",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "A repository includes a pre-commit hook with the following script:\n```\n#!/bin/sh\nif ! npm run lint; then\n  echo \"Lint errors detected.\"\n  exit 1\nfi\n```\nWhat is the primary function of this hook?",
        "options": [
            {
                "description": "To automatically commit code after linting",
                "isAnswerKey": false
            },
            {
                "description": "To run tests before every commit",
                "isAnswerKey": false
            },
            {
                "description": "To prevent commits when lint errors are detected",
                "isAnswerKey": true
            },
            {
                "description": "To deploy code after a successful commit",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "465",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the effect of executing the following command?\n```\ngit rm --cached video.mp4\n```\n",
        "options": [
            {
                "description": "video.mp4 is deleted from both the repository and the local disk",
                "isAnswerKey": false
            },
            {
                "description": "video.mp4 remains tracked in Git history but is untracked in the working directory",
                "isAnswerKey": false
            },
            {
                "description": "video.mp4 is removed from version control but remains in the local file system",
                "isAnswerKey": true
            },
            {
                "description": "video.mp4 is permanently deleted from the repository history",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "466",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "During an interactive rebase, you see the following todo list:\n```\npick a1b2c3d Initial commit\npick d4e5f6g Add new feature\npick h7i8j9k Fix bug\n```\nTo combine the 'Add new feature' commit with the previous commit while preserving its commit message, which keyword should replace 'pick' on the second line?",
        "options": [
            {
                "description": "edit",
                "isAnswerKey": false
            },
            {
                "description": "squash",
                "isAnswerKey": true
            },
            {
                "description": "fixup",
                "isAnswerKey": false
            },
            {
                "description": "reword",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "467",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following command used to rewrite history:\n```\ngit filter-branch --tree-filter 'rm -f secret.txt' HEAD\n```\nWhat is the purpose of this command?",
        "options": [
            {
                "description": "To remove 'secret.txt' from the working directory only",
                "isAnswerKey": false
            },
            {
                "description": "To delete 'secret.txt' from the repository's history across all commits",
                "isAnswerKey": true
            },
            {
                "description": "To stage 'secret.txt' for removal in the next commit",
                "isAnswerKey": false
            },
            {
                "description": "To archive 'secret.txt' into a backup branch",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "468",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "After merging a feature branch into 'master' with the command below, you realize the merge was a fast-forward merge, losing the context of a merge commit:\n```\ngit merge feature_branch\n```\nWhich command should have been used to enforce a merge commit?",
        "options": [
            {
                "description": "git merge --squash feature_branch",
                "isAnswerKey": false
            },
            {
                "description": "git merge --no-ff feature_branch",
                "isAnswerKey": true
            },
            {
                "description": "git merge --abort feature_branch",
                "isAnswerKey": false
            },
            {
                "description": "git push --force feature_branch",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "469",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "During an interactive rebase, you see the following instructions:\n```\npick abc123 Add API endpoints\nedit def456 Update API endpoints with error handling\npick ghi789 Fix typo\n```\nWhat is the effect of marking the commit with 'edit'?",
        "options": [
            {
                "description": "It removes the commit from the history",
                "isAnswerKey": false
            },
            {
                "description": "It pauses the rebase at that commit, allowing you to make changes",
                "isAnswerKey": true
            },
            {
                "description": "It automatically resolves merge conflicts for that commit",
                "isAnswerKey": false
            },
            {
                "description": "It duplicates the commit in the history",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "470",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the pre-push hook script below, which sometimes suffers from performance issues in a large repository:\n```\n#!/bin/bash\ngrep --recursive --exclude-dir=.git \"secret\" .\n```\nWhich refactoring is most likely to improve its performance?",
        "options": [
            {
                "description": "Use 'git diff --cached' to limit the search to staged changes",
                "isAnswerKey": true
            },
            {
                "description": "Remove the '--recursive' option to reduce the number of files scanned",
                "isAnswerKey": false
            },
            {
                "description": "Switch to a different shell like zsh",
                "isAnswerKey": false
            },
            {
                "description": "Execute the hook only when a specific file is changed",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "471",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Examine the pre-push hook below:\n```\n#!/bin/sh\necho \"Pre-push hook triggered.\"\n# perform additional validations\n```\nWhich design pattern does this Git hook system most closely represent?",
        "options": [
            {
                "description": "Singleton Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Observer Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Factory Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Decorator Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "472",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the GitHub Actions workflow file below:\n```\nname: CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run tests\n        run: npm test\n```\nWhich design principle does this CI pipeline most closely embody?",
        "options": [
            {
                "description": "Pipeline Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Mediator Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Command Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Adapter Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "473",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Which design pattern best describes Git's hook mechanism that enables custom scripts to be executed on specific Git events?",
        "options": [
            {
                "description": "Observer Pattern",
                "isAnswerKey": true
            },
            {
                "description": "Strategy Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Factory Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Facade Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "474",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "After rebasing a long-running feature branch onto 'master', you encounter several conflicts. Once these conflicts are resolved locally, what is the recommended next step when updating the remote feature branch?",
        "options": [
            {
                "description": "Perform a regular push using 'git push'",
                "isAnswerKey": false
            },
            {
                "description": "Force push the rebased branch using 'git push --force'",
                "isAnswerKey": true
            },
            {
                "description": "Abandon the rebase and perform a merge instead",
                "isAnswerKey": false
            },
            {
                "description": "Create a new branch and push it without force",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "475",
        "skill": "github",
        "category": "version control",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "A developer wants to enforce consistent commit message formatting across all new repositories in an organization. They execute the following command:\n```\ngit config --global init.templateDir '~/.git-templates'\n```\nWhat does this command achieve?",
        "options": [
            {
                "description": "Sets up a default remote repository for all new projects",
                "isAnswerKey": false
            },
            {
                "description": "Specifies a directory for Git hooks and templates that will be used during repository initialization",
                "isAnswerKey": true
            },
            {
                "description": "Automatically enforces commit message templates on existing repositories",
                "isAnswerKey": false
            },
            {
                "description": "Backs up all commit messages to a global log file",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "476",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Analyze the following git log output and identify which branching strategy is being used:\n```\n*   9d8f1a Merge branch 'feature/login'\n|\\  \n| * 4a1f3b Add login feature\n|/  \n*   5d2fb9 Merge branch 'feature/payment'\n|\\  \n| * 3c6e12 Implement payment functionality\n|/  \n*   1a2b3c Stable commit on master\n```",
        "options": [
            {
                "description": "GitFlow",
                "isAnswerKey": false
            },
            {
                "description": "Feature Branch Workflow",
                "isAnswerKey": true
            },
            {
                "description": "Trunk-Based Development",
                "isAnswerKey": false
            },
            {
                "description": "Forking Workflow",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "477",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Examine the following commands and identify the effect of a fast-forward merge:\n```\n$ git checkout master\n$ git merge feature/login\n```",
        "options": [
            {
                "description": "Preserves history as a linear progression",
                "isAnswerKey": true
            },
            {
                "description": "Creates a merge commit",
                "isAnswerKey": false
            },
            {
                "description": "Rewrites commit history",
                "isAnswerKey": false
            },
            {
                "description": "Discards commits from the feature branch",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "478",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Consider the following GitHub Actions workflow snippet. Which branch triggers the workflow?\n```\non:\n  push:\n    branches:\n      - master\n```",
        "options": [
            {
                "description": "Any branch push",
                "isAnswerKey": false
            },
            {
                "description": "Tag creation events",
                "isAnswerKey": false
            },
            {
                "description": "Push event to master branch",
                "isAnswerKey": true
            },
            {
                "description": "Pull requests on master",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "479",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Given the repository structure below, what is a potential drawback of using a monorepo strategy in large organizations?\n```\nrepo-root/\n├── service-a/\n│   ├── src/\n│   └── tests/\n├── service-b/\n│   ├── src/\n│   └── tests/\n└── shared/\n    ├── lib/\n    └── docs/\n```",
        "options": [
            {
                "description": "Simplified dependency management",
                "isAnswerKey": false
            },
            {
                "description": "Complex permission management",
                "isAnswerKey": true
            },
            {
                "description": "Reduced build times",
                "isAnswerKey": false
            },
            {
                "description": "Easier modularization",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "480",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Review the following snippet from an interactive rebase session. What Git operation does it represent?\n```\npick a1b2c3 Add feature X\nreword d4e5f6 Update commit message for feature Y\npick g7h8i9 Merge branch 'bugfix'\n```",
        "options": [
            {
                "description": "Cherry-pick operation",
                "isAnswerKey": false
            },
            {
                "description": "Interactive rebase",
                "isAnswerKey": true
            },
            {
                "description": "Fast-forward merge",
                "isAnswerKey": false
            },
            {
                "description": "Reset --hard",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "481",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Examine the conflict markers in the following snippet. What is the best approach to resolve this merge conflict in a production environment?\n```\n<<<<<<< HEAD\nconsole.log(\"Feature A implemented\");\n=======\nconsole.log(\"Feature A revised implementation\");\n>>>>>>> feature-a\n```",
        "options": [
            {
                "description": "Automatically accept all changes",
                "isAnswerKey": false
            },
            {
                "description": "Manually review and merge changes",
                "isAnswerKey": true
            },
            {
                "description": "Always choose changes from the feature branch",
                "isAnswerKey": false
            },
            {
                "description": "Abort the merge and reapply all commits",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "482",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Review the following pre-commit hook script snippet. Which part is most likely causing a memory leak?\n```\nconst { exec } = require('child_process');\nprocess.on('exit', () => {\n  exec('npm test');\n});\nfor (let i = 0; i < 10; i++) {\n  process.on('exit', () => {\n    console.log(`Exit listener ${i}`);\n  });\n}\n```",
        "options": [
            {
                "description": "The initial process.on('exit') with exec('npm test')",
                "isAnswerKey": false
            },
            {
                "description": "The for-loop that repeatedly adds exit listeners",
                "isAnswerKey": true
            },
            {
                "description": "The use of template literals in console.log",
                "isAnswerKey": false
            },
            {
                "description": "The absence of a cleanup for the exec callback",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "483",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following output from 'git fsck', what does it indicate?\n```\ndangling commit 4f3e2a\ndangling blob d75f3b\ncorrupt tree 9a3b6d\n```",
        "options": [
            {
                "description": "Unreachable objects due to standard garbage collection",
                "isAnswerKey": false
            },
            {
                "description": "Corrupted objects that could compromise data integrity",
                "isAnswerKey": true
            },
            {
                "description": "A normal state after merge operations",
                "isAnswerKey": false
            },
            {
                "description": "An outdated remote repository history",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "484",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Evaluate the following pre-push hook snippet and identify the primary issue:\n```\n#!/bin/bash\ngit push origin master &\ngit push origin develop\nwait\n```\n",
        "options": [
            {
                "description": "It does not wait for both pushes to complete",
                "isAnswerKey": false
            },
            {
                "description": "It causes a race condition by pushing concurrently without conflict resolution",
                "isAnswerKey": true
            },
            {
                "description": "It pushes sequentially, delaying execution",
                "isAnswerKey": false
            },
            {
                "description": "It improperly uses 'wait' for background tasks",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "485",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Analyze the following diff from a Git rebase operation and determine under what condition this refactoring could introduce a bug:\n```\n@@ -10,7 +10,7 @@ function calculateSum(a, b) {\n-  return a + b;\n+  return parseFloat(a) + parseFloat(b);\n}\n```",
        "options": [
            {
                "description": "When a and b are arrays instead of numbers",
                "isAnswerKey": false
            },
            {
                "description": "When previous behavior allowed string concatenation and now forces numeric addition",
                "isAnswerKey": true
            },
            {
                "description": "When parseFloat causes an exception for integer inputs",
                "isAnswerKey": false
            },
            {
                "description": "There is no risk, as the change is benign",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "486",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following configuration for a custom Git hook plugin system. Which design pattern does this configuration best exemplify?\n```\n{\n  \"hooks\": {\n    \"pre-commit\": [\"lint\", \"test\", \"verify\"]\n  },\n  \"plugins\": {\n    \"lint\": { \"command\": \"npm run lint\" },\n    \"test\": { \"command\": \"npm test -- --watch\" },\n    \"verify\": { \"command\": \"npm run verify\" }\n  }\n}\n```",
        "options": [
            {
                "description": "Singleton",
                "isAnswerKey": false
            },
            {
                "description": "Observer",
                "isAnswerKey": true
            },
            {
                "description": "Strategy Pattern",
                "isAnswerKey": false
            },
            {
                "description": "Command Pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "487",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following Python script used as a Git post-commit hook. To enable support for multiple post-commit actions, which refactoring approach is most scalable?\n```\n#!/usr/bin/env python3\nimport subprocess\n\ndef post_commit():\n    commit_hash = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip()\n    subprocess.call(['curl', '-X', 'POST', 'http://ci.example.com/build', '-d', commit_hash])\n\nif __name__ == '__main__':\n    post_commit()\n```",
        "options": [
            {
                "description": "Hard-code additional subprocess calls",
                "isAnswerKey": false
            },
            {
                "description": "Use a chain-of-responsibility pattern",
                "isAnswerKey": false
            },
            {
                "description": "Incorporate a plugin framework to dynamically load post-commit actions",
                "isAnswerKey": true
            },
            {
                "description": "Migrate to an alternative version control system",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "488",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "A repository uses Git submodules to manage dependencies. Running the following command provides which key benefit in a large project?\n```\ngit submodule update --init --recursive\n```",
        "options": [
            {
                "description": "Automatic version bumping",
                "isAnswerKey": false
            },
            {
                "description": "Decoupling of dependencies, allowing independent version control",
                "isAnswerKey": true
            },
            {
                "description": "Improved merge performance from parallel cloning",
                "isAnswerKey": false
            },
            {
                "description": "Enforcing a single codebase for all modules",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "489",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Review the following Git commit hook snippet that enforces commit message standards. Which modification would make this hook more configurable across teams?\n```\n#!/bin/bash\ncommit_msg=$(cat $1)\npattern='^([A-Z]+-[0-9]+): .+'\nif [[ ! $commit_msg =~ $pattern ]]; then\n   echo 'Commit message must start with a ticket ID (e.g., ABC-1234)'\n   exit 1\nfi\n```",
        "options": [
            {
                "description": "Hard-code the ticket prefix directly in the script",
                "isAnswerKey": false
            },
            {
                "description": "Extract the regex pattern into an external configuration file",
                "isAnswerKey": true
            },
            {
                "description": "Remove the regex check altogether",
                "isAnswerKey": false
            },
            {
                "description": "Add additional inline checks for multiple formats",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "490",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Analyze the following GitHub Actions workflow snippet. What modification would most improve execution time by leveraging caching?\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n      - name: Build\n        run: npm run build\n      - name: Test\n        run: npm test\n```",
        "options": [
            {
                "description": "Insert an extra checkout step to refresh the codebase",
                "isAnswerKey": false
            },
            {
                "description": "Utilize actions/cache to cache Node modules",
                "isAnswerKey": true
            },
            {
                "description": "Run tests in parallel via matrix strategy",
                "isAnswerKey": false
            },
            {
                "description": "Remove the build step to shorten runtime",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "491",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Examine the following monolithic Git hook script. A team lead wants to refactor it into a modular design. Which approach is most appropriate?\n```\n#!/bin/bash\nbranch=$(git rev-parse --abbrev-ref HEAD)\nif [ \"$branch\" != \"master\" ]; then\n  echo \"Only master branch is allowed to push!\"\n  exit 1\nfi\nnpm test\nif [ $? -ne 0 ]; then\n  echo \"Tests failed!\"\n  exit 1\nfi\ngit push origin master\n```",
        "options": [
            {
                "description": "Encapsulate each logical unit into separate scripts and call them from a main hook",
                "isAnswerKey": true
            },
            {
                "description": "Inline all commands into a single function for simplicity",
                "isAnswerKey": false
            },
            {
                "description": "Remove conditional logic to streamline the script",
                "isAnswerKey": false
            },
            {
                "description": "Convert the script to Python without modular segregation",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "492",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "During a large-scale refactor, repeated use of force pushes (git push --force) is causing coordination issues. What systemic change best addresses this technical debt?",
        "options": [
            {
                "description": "Implement branch protection rules on critical branches",
                "isAnswerKey": true
            },
            {
                "description": "Mandate that teams continue using force pushes for speed",
                "isAnswerKey": false
            },
            {
                "description": "Disable all push operations to the repository",
                "isAnswerKey": false
            },
            {
                "description": "Ignore the issue as it doesn’t impact development",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "493",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Consider the following GitHub Actions workflow snippet that runs integration tests:\n```\njobs:\n  integration_tests:\n    strategy:\n      matrix:\n        node: [12, 14, 16]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node }}\n      - name: Run Tests\n        run: npm run integration-test\n```\nWhich modification would most effectively reduce overall execution time?",
        "options": [
            {
                "description": "Replace the matrix strategy with a single Node.js version",
                "isAnswerKey": false
            },
            {
                "description": "Enable job concurrency limits",
                "isAnswerKey": false
            },
            {
                "description": "Cache dependencies between runs to avoid repeated installations",
                "isAnswerKey": true
            },
            {
                "description": "Remove the integration test step to save time",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "494",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "A company's repository history is cluttered with merge commits. Which strategy would simplify future commit history while preserving essential information?",
        "options": [
            {
                "description": "Switch to rebase-based workflows for feature integration",
                "isAnswerKey": true
            },
            {
                "description": "Continue using merge commits without change",
                "isAnswerKey": false
            },
            {
                "description": "Delete all merge commits retrospectively",
                "isAnswerKey": false
            },
            {
                "description": "Convert the repository to another version control system",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "495",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Review the following merge conflict diff. Which approach best resolves the ambiguity while ensuring consistent code quality?\n```\n<<<<<<< HEAD\nfunction processData(data) {\n-    return data.filter(item => item.active);\n+    return data.filter(item => !!item.active);\n}\n=======\nfunction processData(data) {\n    return data.filter(item => item.active === true);\n}\n>>>>>>> feature/active-check\n```",
        "options": [
            {
                "description": "Merge the diff by using strict equality (===) to ensure type safety",
                "isAnswerKey": true
            },
            {
                "description": "Retain the double negation (!!) as it is more concise",
                "isAnswerKey": false
            },
            {
                "description": "Combine both conditions into a hybrid solution",
                "isAnswerKey": false
            },
            {
                "description": "Comment out the function until manual review",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "496",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "An organization is facing recurring issues with inconsistent commit messages that break automated processes. What systemic solution best enforces commit message standards across all repositories?",
        "options": [
            {
                "description": "Implement a server-side pre-receive hook on the central GitHub Enterprise server",
                "isAnswerKey": true
            },
            {
                "description": "Rely solely on client-side commit hooks",
                "isAnswerKey": false
            },
            {
                "description": "Mandate manual review of every commit message",
                "isAnswerKey": false
            },
            {
                "description": "Disable commit message linting for faster commits",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "497",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "A systemic issue arises from repeated rebasing and force pushing across repositories, leading to conflicts:\n```\nfatal: refusing to merge unrelated histories\n```\nWhat measure should be implemented to mitigate these issues?",
        "options": [
            {
                "description": "Enforce a consistent branching strategy and repository integration via submodules or a monorepo approach",
                "isAnswerKey": true
            },
            {
                "description": "Allow force pushes on all branches to override conflicts",
                "isAnswerKey": false
            },
            {
                "description": "Disable history rewriting entirely",
                "isAnswerKey": false
            },
            {
                "description": "Merge repositories without any structured plan",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "498",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Frequent stalls during large merge operations have raised performance concerns. A senior engineer suspects Git attributes for large binary files are a bottleneck. Consider the following .gitattributes snippet:\n```\n*.png filter=lfs diff=lfs merge=lfs -text\n```\nWhich optimization would most effectively improve merge performance with large binary files?",
        "options": [
            {
                "description": "Remove Git LFS tracking for images entirely",
                "isAnswerKey": false
            },
            {
                "description": "Optimize the Git LFS server configuration to handle binary diffing more efficiently",
                "isAnswerKey": true
            },
            {
                "description": "Encrypt binary files before committing",
                "isAnswerKey": false
            },
            {
                "description": "Store binary files directly in the repository without filtering",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "499",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Persistent technical debt from unstructured branching and merging practices has prompted the proposal of a custom automation tool integrated with GitHub's API. Which architectural pattern best supports this systemic approach?",
        "options": [
            {
                "description": "Monolithic architecture with manual scripts",
                "isAnswerKey": false
            },
            {
                "description": "Microservices architecture employing an event-driven pipeline to standardize Git operations",
                "isAnswerKey": true
            },
            {
                "description": "Ad-hoc scripting without reusability",
                "isAnswerKey": false
            },
            {
                "description": "Decentralized team-specific tooling with no central enforcement",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "500",
        "skill": "github",
        "category": "version control",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Review the following GitHub webhook payload for a pull request event. To address interdependent services that are not synchronizing branch protections, what architectural improvement is most effective?\n```\n{\n  \"action\": \"opened\",\n  \"number\": 42,\n  \"pull_request\": {\n    \"id\": 12345,\n    \"title\": \"Improve error handling\",\n    \"body\": \"Detailed description\"\n  },\n  \"repository\": {\n    \"id\": 67890,\n    \"name\": \"enterprise-app\",\n    \"full_name\": \"org/enterprise-app\"\n  }\n}\n```",
        "options": [
            {
                "description": "Implement a centralized webhook listener that enforces branch protection policies via GitHub's API across all repositories",
                "isAnswerKey": true
            },
            {
                "description": "Remove branch protection rules from all repositories",
                "isAnswerKey": false
            },
            {
                "description": "Allow pull requests to bypass branch protection",
                "isAnswerKey": false
            },
            {
                "description": "Manually update branch protections for each repository",
                "isAnswerKey": false
            }
        ]
    }
]
